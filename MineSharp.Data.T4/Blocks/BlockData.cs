

/////////////////////////////////////////////////////////
//  Generated Block Data for Minecraft Version 1.18.1  //
/////////////////////////////////////////////////////////

using MineSharp.Core.Types;

namespace MineSharp.Data.T4.Blocks {

	
	public static class BlockPalette {

				public static int GetBlockIdByState(int state) => state switch {
								(>= 0) and (<= 0) => 0,
									(>= 1) and (<= 1) => 1,
									(>= 2) and (<= 2) => 2,
									(>= 3) and (<= 3) => 3,
									(>= 4) and (<= 4) => 4,
									(>= 5) and (<= 5) => 5,
									(>= 6) and (<= 6) => 6,
									(>= 7) and (<= 7) => 7,
									(>= 8) and (<= 9) => 8,
									(>= 10) and (<= 10) => 9,
									(>= 11) and (<= 11) => 10,
									(>= 12) and (<= 13) => 11,
									(>= 14) and (<= 14) => 12,
									(>= 15) and (<= 15) => 13,
									(>= 16) and (<= 16) => 14,
									(>= 17) and (<= 17) => 15,
									(>= 18) and (<= 18) => 16,
									(>= 19) and (<= 19) => 17,
									(>= 20) and (<= 20) => 18,
									(>= 21) and (<= 22) => 19,
									(>= 23) and (<= 24) => 20,
									(>= 25) and (<= 26) => 21,
									(>= 27) and (<= 28) => 22,
									(>= 29) and (<= 30) => 23,
									(>= 31) and (<= 32) => 24,
									(>= 33) and (<= 33) => 25,
									(>= 34) and (<= 49) => 26,
									(>= 50) and (<= 65) => 27,
									(>= 66) and (<= 66) => 28,
									(>= 67) and (<= 67) => 29,
									(>= 68) and (<= 68) => 30,
									(>= 69) and (<= 69) => 31,
									(>= 70) and (<= 70) => 32,
									(>= 71) and (<= 71) => 33,
									(>= 72) and (<= 72) => 34,
									(>= 73) and (<= 73) => 35,
									(>= 74) and (<= 74) => 36,
									(>= 75) and (<= 75) => 37,
									(>= 76) and (<= 78) => 38,
									(>= 79) and (<= 81) => 39,
									(>= 82) and (<= 84) => 40,
									(>= 85) and (<= 87) => 41,
									(>= 88) and (<= 90) => 42,
									(>= 91) and (<= 93) => 43,
									(>= 94) and (<= 96) => 44,
									(>= 97) and (<= 99) => 45,
									(>= 100) and (<= 102) => 46,
									(>= 103) and (<= 105) => 47,
									(>= 106) and (<= 108) => 48,
									(>= 109) and (<= 111) => 49,
									(>= 112) and (<= 114) => 50,
									(>= 115) and (<= 117) => 51,
									(>= 118) and (<= 120) => 52,
									(>= 121) and (<= 123) => 53,
									(>= 124) and (<= 126) => 54,
									(>= 127) and (<= 129) => 55,
									(>= 130) and (<= 132) => 56,
									(>= 133) and (<= 135) => 57,
									(>= 136) and (<= 138) => 58,
									(>= 139) and (<= 141) => 59,
									(>= 142) and (<= 144) => 60,
									(>= 145) and (<= 147) => 61,
									(>= 148) and (<= 161) => 62,
									(>= 162) and (<= 175) => 63,
									(>= 176) and (<= 189) => 64,
									(>= 190) and (<= 203) => 65,
									(>= 204) and (<= 217) => 66,
									(>= 218) and (<= 231) => 67,
									(>= 232) and (<= 245) => 68,
									(>= 246) and (<= 259) => 69,
									(>= 260) and (<= 260) => 70,
									(>= 261) and (<= 261) => 71,
									(>= 262) and (<= 262) => 72,
									(>= 263) and (<= 263) => 73,
									(>= 264) and (<= 264) => 74,
									(>= 265) and (<= 265) => 75,
									(>= 266) and (<= 277) => 76,
									(>= 278) and (<= 278) => 77,
									(>= 279) and (<= 279) => 78,
									(>= 280) and (<= 280) => 79,
									(>= 281) and (<= 1080) => 80,
									(>= 1081) and (<= 1096) => 81,
									(>= 1097) and (<= 1112) => 82,
									(>= 1113) and (<= 1128) => 83,
									(>= 1129) and (<= 1144) => 84,
									(>= 1145) and (<= 1160) => 85,
									(>= 1161) and (<= 1176) => 86,
									(>= 1177) and (<= 1192) => 87,
									(>= 1193) and (<= 1208) => 88,
									(>= 1209) and (<= 1224) => 89,
									(>= 1225) and (<= 1240) => 90,
									(>= 1241) and (<= 1256) => 91,
									(>= 1257) and (<= 1272) => 92,
									(>= 1273) and (<= 1288) => 93,
									(>= 1289) and (<= 1304) => 94,
									(>= 1305) and (<= 1320) => 95,
									(>= 1321) and (<= 1336) => 96,
									(>= 1337) and (<= 1360) => 97,
									(>= 1361) and (<= 1384) => 98,
									(>= 1385) and (<= 1396) => 99,
									(>= 1397) and (<= 1397) => 100,
									(>= 1398) and (<= 1398) => 101,
									(>= 1399) and (<= 1399) => 102,
									(>= 1400) and (<= 1400) => 103,
									(>= 1401) and (<= 1401) => 104,
									(>= 1402) and (<= 1403) => 105,
									(>= 1404) and (<= 1415) => 106,
									(>= 1416) and (<= 1439) => 107,
									(>= 1440) and (<= 1440) => 108,
									(>= 1441) and (<= 1441) => 109,
									(>= 1442) and (<= 1442) => 110,
									(>= 1443) and (<= 1443) => 111,
									(>= 1444) and (<= 1444) => 112,
									(>= 1445) and (<= 1445) => 113,
									(>= 1446) and (<= 1446) => 114,
									(>= 1447) and (<= 1447) => 115,
									(>= 1448) and (<= 1448) => 116,
									(>= 1449) and (<= 1449) => 117,
									(>= 1450) and (<= 1450) => 118,
									(>= 1451) and (<= 1451) => 119,
									(>= 1452) and (<= 1452) => 120,
									(>= 1453) and (<= 1453) => 121,
									(>= 1454) and (<= 1454) => 122,
									(>= 1455) and (<= 1455) => 123,
									(>= 1456) and (<= 1467) => 124,
									(>= 1468) and (<= 1468) => 125,
									(>= 1469) and (<= 1469) => 126,
									(>= 1470) and (<= 1470) => 127,
									(>= 1471) and (<= 1471) => 128,
									(>= 1472) and (<= 1472) => 129,
									(>= 1473) and (<= 1473) => 130,
									(>= 1474) and (<= 1474) => 131,
									(>= 1475) and (<= 1475) => 132,
									(>= 1476) and (<= 1476) => 133,
									(>= 1477) and (<= 1477) => 134,
									(>= 1478) and (<= 1478) => 135,
									(>= 1479) and (<= 1479) => 136,
									(>= 1480) and (<= 1480) => 137,
									(>= 1481) and (<= 1481) => 138,
									(>= 1482) and (<= 1482) => 139,
									(>= 1483) and (<= 1483) => 140,
									(>= 1484) and (<= 1484) => 141,
									(>= 1485) and (<= 1485) => 142,
									(>= 1486) and (<= 1487) => 143,
									(>= 1488) and (<= 1488) => 144,
									(>= 1489) and (<= 1489) => 145,
									(>= 1490) and (<= 1490) => 146,
									(>= 1491) and (<= 1491) => 147,
									(>= 1492) and (<= 1495) => 148,
									(>= 1496) and (<= 2007) => 149,
									(>= 2008) and (<= 2008) => 150,
									(>= 2009) and (<= 2009) => 151,
									(>= 2010) and (<= 2089) => 152,
									(>= 2090) and (<= 2113) => 153,
									(>= 2114) and (<= 3409) => 154,
									(>= 3410) and (<= 3410) => 155,
									(>= 3411) and (<= 3411) => 156,
									(>= 3412) and (<= 3412) => 157,
									(>= 3413) and (<= 3413) => 158,
									(>= 3414) and (<= 3421) => 159,
									(>= 3422) and (<= 3429) => 160,
									(>= 3430) and (<= 3437) => 161,
									(>= 3438) and (<= 3469) => 162,
									(>= 3470) and (<= 3501) => 163,
									(>= 3502) and (<= 3533) => 164,
									(>= 3534) and (<= 3565) => 165,
									(>= 3566) and (<= 3597) => 166,
									(>= 3598) and (<= 3629) => 167,
									(>= 3630) and (<= 3693) => 168,
									(>= 3694) and (<= 3701) => 169,
									(>= 3702) and (<= 3721) => 170,
									(>= 3722) and (<= 3801) => 171,
									(>= 3802) and (<= 3809) => 172,
									(>= 3810) and (<= 3817) => 173,
									(>= 3818) and (<= 3825) => 174,
									(>= 3826) and (<= 3833) => 175,
									(>= 3834) and (<= 3841) => 176,
									(>= 3842) and (<= 3849) => 177,
									(>= 3850) and (<= 3873) => 178,
									(>= 3874) and (<= 3875) => 179,
									(>= 3876) and (<= 3939) => 180,
									(>= 3940) and (<= 3941) => 181,
									(>= 3942) and (<= 3943) => 182,
									(>= 3944) and (<= 3945) => 183,
									(>= 3946) and (<= 3947) => 184,
									(>= 3948) and (<= 3949) => 185,
									(>= 3950) and (<= 3951) => 186,
									(>= 3952) and (<= 3953) => 187,
									(>= 3954) and (<= 3955) => 188,
									(>= 3956) and (<= 3957) => 189,
									(>= 3958) and (<= 3965) => 190,
									(>= 3966) and (<= 3989) => 191,
									(>= 3990) and (<= 3997) => 192,
									(>= 3998) and (<= 3998) => 193,
									(>= 3999) and (<= 3999) => 194,
									(>= 4000) and (<= 4015) => 195,
									(>= 4016) and (<= 4016) => 196,
									(>= 4017) and (<= 4032) => 197,
									(>= 4033) and (<= 4034) => 198,
									(>= 4035) and (<= 4066) => 199,
									(>= 4067) and (<= 4067) => 200,
									(>= 4068) and (<= 4068) => 201,
									(>= 4069) and (<= 4069) => 202,
									(>= 4070) and (<= 4070) => 203,
									(>= 4071) and (<= 4073) => 204,
									(>= 4074) and (<= 4076) => 205,
									(>= 4077) and (<= 4077) => 206,
									(>= 4078) and (<= 4081) => 207,
									(>= 4082) and (<= 4082) => 208,
									(>= 4083) and (<= 4084) => 209,
									(>= 4085) and (<= 4088) => 210,
									(>= 4089) and (<= 4092) => 211,
									(>= 4093) and (<= 4099) => 212,
									(>= 4100) and (<= 4163) => 213,
									(>= 4164) and (<= 4164) => 214,
									(>= 4165) and (<= 4165) => 215,
									(>= 4166) and (<= 4166) => 216,
									(>= 4167) and (<= 4167) => 217,
									(>= 4168) and (<= 4168) => 218,
									(>= 4169) and (<= 4169) => 219,
									(>= 4170) and (<= 4170) => 220,
									(>= 4171) and (<= 4171) => 221,
									(>= 4172) and (<= 4172) => 222,
									(>= 4173) and (<= 4173) => 223,
									(>= 4174) and (<= 4174) => 224,
									(>= 4175) and (<= 4175) => 225,
									(>= 4176) and (<= 4176) => 226,
									(>= 4177) and (<= 4177) => 227,
									(>= 4178) and (<= 4178) => 228,
									(>= 4179) and (<= 4179) => 229,
									(>= 4180) and (<= 4243) => 230,
									(>= 4244) and (<= 4307) => 231,
									(>= 4308) and (<= 4371) => 232,
									(>= 4372) and (<= 4435) => 233,
									(>= 4436) and (<= 4499) => 234,
									(>= 4500) and (<= 4563) => 235,
									(>= 4564) and (<= 4564) => 236,
									(>= 4565) and (<= 4565) => 237,
									(>= 4566) and (<= 4566) => 238,
									(>= 4567) and (<= 4567) => 239,
									(>= 4568) and (<= 4568) => 240,
									(>= 4569) and (<= 4569) => 241,
									(>= 4570) and (<= 4570) => 242,
									(>= 4571) and (<= 4571) => 243,
									(>= 4572) and (<= 4572) => 244,
									(>= 4573) and (<= 4573) => 245,
									(>= 4574) and (<= 4637) => 246,
									(>= 4638) and (<= 4701) => 247,
									(>= 4702) and (<= 4765) => 248,
									(>= 4766) and (<= 4797) => 249,
									(>= 4798) and (<= 4803) => 250,
									(>= 4804) and (<= 4835) => 251,
									(>= 4836) and (<= 4836) => 252,
									(>= 4837) and (<= 4840) => 253,
									(>= 4841) and (<= 4844) => 254,
									(>= 4845) and (<= 4852) => 255,
									(>= 4853) and (<= 4860) => 256,
									(>= 4861) and (<= 4892) => 257,
									(>= 4893) and (<= 5020) => 258,
									(>= 5021) and (<= 5052) => 259,
									(>= 5053) and (<= 5132) => 260,
									(>= 5133) and (<= 5212) => 261,
									(>= 5213) and (<= 5214) => 262,
									(>= 5215) and (<= 5215) => 263,
									(>= 5216) and (<= 5216) => 264,
									(>= 5217) and (<= 5248) => 265,
									(>= 5249) and (<= 5328) => 266,
									(>= 5329) and (<= 5332) => 267,
									(>= 5333) and (<= 5333) => 268,
									(>= 5334) and (<= 5341) => 269,
									(>= 5342) and (<= 5342) => 270,
									(>= 5343) and (<= 5345) => 271,
									(>= 5346) and (<= 5346) => 272,
									(>= 5347) and (<= 5349) => 273,
									(>= 5350) and (<= 5350) => 274,
									(>= 5351) and (<= 5358) => 275,
									(>= 5359) and (<= 5359) => 276,
									(>= 5360) and (<= 5360) => 277,
									(>= 5361) and (<= 5362) => 278,
									(>= 5363) and (<= 5374) => 279,
									(>= 5375) and (<= 5454) => 280,
									(>= 5455) and (<= 5455) => 281,
									(>= 5456) and (<= 5456) => 282,
									(>= 5457) and (<= 5464) => 283,
									(>= 5465) and (<= 5480) => 284,
									(>= 5481) and (<= 5608) => 285,
									(>= 5609) and (<= 5609) => 286,
									(>= 5610) and (<= 5689) => 287,
									(>= 5690) and (<= 5769) => 288,
									(>= 5770) and (<= 5849) => 289,
									(>= 5850) and (<= 5861) => 290,
									(>= 5862) and (<= 5862) => 291,
									(>= 5863) and (<= 6186) => 292,
									(>= 6187) and (<= 6510) => 293,
									(>= 6511) and (<= 6511) => 294,
									(>= 6512) and (<= 6512) => 295,
									(>= 6513) and (<= 6513) => 296,
									(>= 6514) and (<= 6514) => 297,
									(>= 6515) and (<= 6515) => 298,
									(>= 6516) and (<= 6516) => 299,
									(>= 6517) and (<= 6517) => 300,
									(>= 6518) and (<= 6518) => 301,
									(>= 6519) and (<= 6519) => 302,
									(>= 6520) and (<= 6520) => 303,
									(>= 6521) and (<= 6521) => 304,
									(>= 6522) and (<= 6522) => 305,
									(>= 6523) and (<= 6523) => 306,
									(>= 6524) and (<= 6524) => 307,
									(>= 6525) and (<= 6525) => 308,
									(>= 6526) and (<= 6526) => 309,
									(>= 6527) and (<= 6527) => 310,
									(>= 6528) and (<= 6528) => 311,
									(>= 6529) and (<= 6529) => 312,
									(>= 6530) and (<= 6530) => 313,
									(>= 6531) and (<= 6531) => 314,
									(>= 6532) and (<= 6532) => 315,
									(>= 6533) and (<= 6533) => 316,
									(>= 6534) and (<= 6534) => 317,
									(>= 6535) and (<= 6535) => 318,
									(>= 6536) and (<= 6543) => 319,
									(>= 6544) and (<= 6551) => 320,
									(>= 6552) and (<= 6575) => 321,
									(>= 6576) and (<= 6599) => 322,
									(>= 6600) and (<= 6623) => 323,
									(>= 6624) and (<= 6647) => 324,
									(>= 6648) and (<= 6671) => 325,
									(>= 6672) and (<= 6695) => 326,
									(>= 6696) and (<= 6711) => 327,
									(>= 6712) and (<= 6715) => 328,
									(>= 6716) and (<= 6731) => 329,
									(>= 6732) and (<= 6735) => 330,
									(>= 6736) and (<= 6751) => 331,
									(>= 6752) and (<= 6755) => 332,
									(>= 6756) and (<= 6771) => 333,
									(>= 6772) and (<= 6775) => 334,
									(>= 6776) and (<= 6791) => 335,
									(>= 6792) and (<= 6795) => 336,
									(>= 6796) and (<= 6811) => 337,
									(>= 6812) and (<= 6815) => 338,
									(>= 6816) and (<= 6819) => 339,
									(>= 6820) and (<= 6823) => 340,
									(>= 6824) and (<= 6827) => 341,
									(>= 6828) and (<= 6851) => 342,
									(>= 6852) and (<= 6867) => 343,
									(>= 6868) and (<= 6883) => 344,
									(>= 6884) and (<= 6899) => 345,
									(>= 6900) and (<= 6931) => 346,
									(>= 6932) and (<= 6932) => 347,
									(>= 6933) and (<= 6933) => 348,
									(>= 6934) and (<= 6943) => 349,
									(>= 6944) and (<= 6944) => 350,
									(>= 6945) and (<= 6945) => 351,
									(>= 6946) and (<= 6948) => 352,
									(>= 6949) and (<= 7028) => 353,
									(>= 7029) and (<= 7052) => 354,
									(>= 7053) and (<= 7064) => 355,
									(>= 7065) and (<= 7065) => 356,
									(>= 7066) and (<= 7066) => 357,
									(>= 7067) and (<= 7067) => 358,
									(>= 7068) and (<= 7068) => 359,
									(>= 7069) and (<= 7069) => 360,
									(>= 7070) and (<= 7070) => 361,
									(>= 7071) and (<= 7071) => 362,
									(>= 7072) and (<= 7072) => 363,
									(>= 7073) and (<= 7073) => 364,
									(>= 7074) and (<= 7074) => 365,
									(>= 7075) and (<= 7075) => 366,
									(>= 7076) and (<= 7076) => 367,
									(>= 7077) and (<= 7077) => 368,
									(>= 7078) and (<= 7078) => 369,
									(>= 7079) and (<= 7079) => 370,
									(>= 7080) and (<= 7080) => 371,
									(>= 7081) and (<= 7112) => 372,
									(>= 7113) and (<= 7144) => 373,
									(>= 7145) and (<= 7176) => 374,
									(>= 7177) and (<= 7208) => 375,
									(>= 7209) and (<= 7240) => 376,
									(>= 7241) and (<= 7272) => 377,
									(>= 7273) and (<= 7304) => 378,
									(>= 7305) and (<= 7336) => 379,
									(>= 7337) and (<= 7368) => 380,
									(>= 7369) and (<= 7400) => 381,
									(>= 7401) and (<= 7432) => 382,
									(>= 7433) and (<= 7464) => 383,
									(>= 7465) and (<= 7496) => 384,
									(>= 7497) and (<= 7528) => 385,
									(>= 7529) and (<= 7560) => 386,
									(>= 7561) and (<= 7592) => 387,
									(>= 7593) and (<= 7672) => 388,
									(>= 7673) and (<= 7752) => 389,
									(>= 7753) and (<= 7753) => 390,
									(>= 7754) and (<= 7754) => 391,
									(>= 7755) and (<= 7786) => 392,
									(>= 7787) and (<= 7850) => 393,
									(>= 7851) and (<= 7851) => 394,
									(>= 7852) and (<= 7852) => 395,
									(>= 7853) and (<= 7853) => 396,
									(>= 7854) and (<= 7933) => 397,
									(>= 7934) and (<= 8013) => 398,
									(>= 8014) and (<= 8093) => 399,
									(>= 8094) and (<= 8099) => 400,
									(>= 8100) and (<= 8105) => 401,
									(>= 8106) and (<= 8111) => 402,
									(>= 8112) and (<= 8112) => 403,
									(>= 8113) and (<= 8115) => 404,
									(>= 8116) and (<= 8116) => 405,
									(>= 8117) and (<= 8117) => 406,
									(>= 8118) and (<= 8118) => 407,
									(>= 8119) and (<= 8119) => 408,
									(>= 8120) and (<= 8120) => 409,
									(>= 8121) and (<= 8121) => 410,
									(>= 8122) and (<= 8122) => 411,
									(>= 8123) and (<= 8123) => 412,
									(>= 8124) and (<= 8124) => 413,
									(>= 8125) and (<= 8125) => 414,
									(>= 8126) and (<= 8126) => 415,
									(>= 8127) and (<= 8127) => 416,
									(>= 8128) and (<= 8128) => 417,
									(>= 8129) and (<= 8129) => 418,
									(>= 8130) and (<= 8130) => 419,
									(>= 8131) and (<= 8131) => 420,
									(>= 8132) and (<= 8132) => 421,
									(>= 8133) and (<= 8133) => 422,
									(>= 8134) and (<= 8134) => 423,
									(>= 8135) and (<= 8136) => 424,
									(>= 8137) and (<= 8138) => 425,
									(>= 8139) and (<= 8140) => 426,
									(>= 8141) and (<= 8142) => 427,
									(>= 8143) and (<= 8144) => 428,
									(>= 8145) and (<= 8146) => 429,
									(>= 8147) and (<= 8162) => 430,
									(>= 8163) and (<= 8178) => 431,
									(>= 8179) and (<= 8194) => 432,
									(>= 8195) and (<= 8210) => 433,
									(>= 8211) and (<= 8226) => 434,
									(>= 8227) and (<= 8242) => 435,
									(>= 8243) and (<= 8258) => 436,
									(>= 8259) and (<= 8274) => 437,
									(>= 8275) and (<= 8290) => 438,
									(>= 8291) and (<= 8306) => 439,
									(>= 8307) and (<= 8322) => 440,
									(>= 8323) and (<= 8338) => 441,
									(>= 8339) and (<= 8354) => 442,
									(>= 8355) and (<= 8370) => 443,
									(>= 8371) and (<= 8386) => 444,
									(>= 8387) and (<= 8402) => 445,
									(>= 8403) and (<= 8406) => 446,
									(>= 8407) and (<= 8410) => 447,
									(>= 8411) and (<= 8414) => 448,
									(>= 8415) and (<= 8418) => 449,
									(>= 8419) and (<= 8422) => 450,
									(>= 8423) and (<= 8426) => 451,
									(>= 8427) and (<= 8430) => 452,
									(>= 8431) and (<= 8434) => 453,
									(>= 8435) and (<= 8438) => 454,
									(>= 8439) and (<= 8442) => 455,
									(>= 8443) and (<= 8446) => 456,
									(>= 8447) and (<= 8450) => 457,
									(>= 8451) and (<= 8454) => 458,
									(>= 8455) and (<= 8458) => 459,
									(>= 8459) and (<= 8462) => 460,
									(>= 8463) and (<= 8466) => 461,
									(>= 8467) and (<= 8467) => 462,
									(>= 8468) and (<= 8468) => 463,
									(>= 8469) and (<= 8469) => 464,
									(>= 8470) and (<= 8549) => 465,
									(>= 8550) and (<= 8555) => 466,
									(>= 8556) and (<= 8561) => 467,
									(>= 8562) and (<= 8567) => 468,
									(>= 8568) and (<= 8573) => 469,
									(>= 8574) and (<= 8579) => 470,
									(>= 8580) and (<= 8585) => 471,
									(>= 8586) and (<= 8591) => 472,
									(>= 8592) and (<= 8597) => 473,
									(>= 8598) and (<= 8603) => 474,
									(>= 8604) and (<= 8609) => 475,
									(>= 8610) and (<= 8615) => 476,
									(>= 8616) and (<= 8621) => 477,
									(>= 8622) and (<= 8627) => 478,
									(>= 8628) and (<= 8633) => 479,
									(>= 8634) and (<= 8639) => 480,
									(>= 8640) and (<= 8645) => 481,
									(>= 8646) and (<= 8651) => 482,
									(>= 8652) and (<= 8657) => 483,
									(>= 8658) and (<= 8663) => 484,
									(>= 8664) and (<= 8664) => 485,
									(>= 8665) and (<= 8665) => 486,
									(>= 8666) and (<= 8666) => 487,
									(>= 8667) and (<= 8667) => 488,
									(>= 8668) and (<= 8699) => 489,
									(>= 8700) and (<= 8731) => 490,
									(>= 8732) and (<= 8763) => 491,
									(>= 8764) and (<= 8795) => 492,
									(>= 8796) and (<= 8827) => 493,
									(>= 8828) and (<= 8859) => 494,
									(>= 8860) and (<= 8891) => 495,
									(>= 8892) and (<= 8923) => 496,
									(>= 8924) and (<= 8955) => 497,
									(>= 8956) and (<= 8987) => 498,
									(>= 8988) and (<= 9051) => 499,
									(>= 9052) and (<= 9115) => 500,
									(>= 9116) and (<= 9179) => 501,
									(>= 9180) and (<= 9243) => 502,
									(>= 9244) and (<= 9307) => 503,
									(>= 9308) and (<= 9313) => 504,
									(>= 9314) and (<= 9377) => 505,
									(>= 9378) and (<= 9383) => 506,
									(>= 9384) and (<= 9384) => 507,
									(>= 9385) and (<= 9387) => 508,
									(>= 9388) and (<= 9467) => 509,
									(>= 9468) and (<= 9468) => 510,
									(>= 9469) and (<= 9472) => 511,
									(>= 9473) and (<= 9473) => 512,
									(>= 9474) and (<= 9474) => 513,
									(>= 9475) and (<= 9486) => 514,
									(>= 9487) and (<= 9498) => 515,
									(>= 9499) and (<= 9502) => 516,
									(>= 9503) and (<= 9503) => 517,
									(>= 9504) and (<= 9504) => 518,
									(>= 9505) and (<= 9505) => 519,
									(>= 9506) and (<= 9508) => 520,
									(>= 9509) and (<= 9509) => 521,
									(>= 9510) and (<= 9521) => 522,
									(>= 9522) and (<= 9527) => 523,
									(>= 9528) and (<= 9533) => 524,
									(>= 9534) and (<= 9539) => 525,
									(>= 9540) and (<= 9545) => 526,
									(>= 9546) and (<= 9551) => 527,
									(>= 9552) and (<= 9557) => 528,
									(>= 9558) and (<= 9563) => 529,
									(>= 9564) and (<= 9569) => 530,
									(>= 9570) and (<= 9575) => 531,
									(>= 9576) and (<= 9581) => 532,
									(>= 9582) and (<= 9587) => 533,
									(>= 9588) and (<= 9593) => 534,
									(>= 9594) and (<= 9599) => 535,
									(>= 9600) and (<= 9605) => 536,
									(>= 9606) and (<= 9611) => 537,
									(>= 9612) and (<= 9617) => 538,
									(>= 9618) and (<= 9623) => 539,
									(>= 9624) and (<= 9627) => 540,
									(>= 9628) and (<= 9631) => 541,
									(>= 9632) and (<= 9635) => 542,
									(>= 9636) and (<= 9639) => 543,
									(>= 9640) and (<= 9643) => 544,
									(>= 9644) and (<= 9647) => 545,
									(>= 9648) and (<= 9651) => 546,
									(>= 9652) and (<= 9655) => 547,
									(>= 9656) and (<= 9659) => 548,
									(>= 9660) and (<= 9663) => 549,
									(>= 9664) and (<= 9667) => 550,
									(>= 9668) and (<= 9671) => 551,
									(>= 9672) and (<= 9675) => 552,
									(>= 9676) and (<= 9679) => 553,
									(>= 9680) and (<= 9683) => 554,
									(>= 9684) and (<= 9687) => 555,
									(>= 9688) and (<= 9688) => 556,
									(>= 9689) and (<= 9689) => 557,
									(>= 9690) and (<= 9690) => 558,
									(>= 9691) and (<= 9691) => 559,
									(>= 9692) and (<= 9692) => 560,
									(>= 9693) and (<= 9693) => 561,
									(>= 9694) and (<= 9694) => 562,
									(>= 9695) and (<= 9695) => 563,
									(>= 9696) and (<= 9696) => 564,
									(>= 9697) and (<= 9697) => 565,
									(>= 9698) and (<= 9698) => 566,
									(>= 9699) and (<= 9699) => 567,
									(>= 9700) and (<= 9700) => 568,
									(>= 9701) and (<= 9701) => 569,
									(>= 9702) and (<= 9702) => 570,
									(>= 9703) and (<= 9703) => 571,
									(>= 9704) and (<= 9704) => 572,
									(>= 9705) and (<= 9705) => 573,
									(>= 9706) and (<= 9706) => 574,
									(>= 9707) and (<= 9707) => 575,
									(>= 9708) and (<= 9708) => 576,
									(>= 9709) and (<= 9709) => 577,
									(>= 9710) and (<= 9710) => 578,
									(>= 9711) and (<= 9711) => 579,
									(>= 9712) and (<= 9712) => 580,
									(>= 9713) and (<= 9713) => 581,
									(>= 9714) and (<= 9714) => 582,
									(>= 9715) and (<= 9715) => 583,
									(>= 9716) and (<= 9716) => 584,
									(>= 9717) and (<= 9717) => 585,
									(>= 9718) and (<= 9718) => 586,
									(>= 9719) and (<= 9719) => 587,
									(>= 9720) and (<= 9745) => 588,
									(>= 9746) and (<= 9746) => 589,
									(>= 9747) and (<= 9747) => 590,
									(>= 9748) and (<= 9759) => 591,
									(>= 9760) and (<= 9760) => 592,
									(>= 9761) and (<= 9761) => 593,
									(>= 9762) and (<= 9762) => 594,
									(>= 9763) and (<= 9763) => 595,
									(>= 9764) and (<= 9764) => 596,
									(>= 9765) and (<= 9765) => 597,
									(>= 9766) and (<= 9766) => 598,
									(>= 9767) and (<= 9767) => 599,
									(>= 9768) and (<= 9768) => 600,
									(>= 9769) and (<= 9769) => 601,
									(>= 9770) and (<= 9771) => 602,
									(>= 9772) and (<= 9773) => 603,
									(>= 9774) and (<= 9775) => 604,
									(>= 9776) and (<= 9777) => 605,
									(>= 9778) and (<= 9779) => 606,
									(>= 9780) and (<= 9781) => 607,
									(>= 9782) and (<= 9783) => 608,
									(>= 9784) and (<= 9785) => 609,
									(>= 9786) and (<= 9787) => 610,
									(>= 9788) and (<= 9789) => 611,
									(>= 9790) and (<= 9791) => 612,
									(>= 9792) and (<= 9793) => 613,
									(>= 9794) and (<= 9795) => 614,
									(>= 9796) and (<= 9797) => 615,
									(>= 9798) and (<= 9799) => 616,
									(>= 9800) and (<= 9801) => 617,
									(>= 9802) and (<= 9803) => 618,
									(>= 9804) and (<= 9805) => 619,
									(>= 9806) and (<= 9807) => 620,
									(>= 9808) and (<= 9809) => 621,
									(>= 9810) and (<= 9817) => 622,
									(>= 9818) and (<= 9825) => 623,
									(>= 9826) and (<= 9833) => 624,
									(>= 9834) and (<= 9841) => 625,
									(>= 9842) and (<= 9849) => 626,
									(>= 9850) and (<= 9857) => 627,
									(>= 9858) and (<= 9865) => 628,
									(>= 9866) and (<= 9873) => 629,
									(>= 9874) and (<= 9881) => 630,
									(>= 9882) and (<= 9889) => 631,
									(>= 9890) and (<= 9897) => 632,
									(>= 9898) and (<= 9898) => 633,
									(>= 9899) and (<= 9900) => 634,
									(>= 9901) and (<= 9901) => 635,
									(>= 9902) and (<= 9913) => 636,
									(>= 9914) and (<= 9914) => 637,
									(>= 9915) and (<= 9915) => 638,
									(>= 9916) and (<= 9916) => 639,
									(>= 9917) and (<= 9918) => 640,
									(>= 9919) and (<= 9998) => 641,
									(>= 9999) and (<= 10078) => 642,
									(>= 10079) and (<= 10158) => 643,
									(>= 10159) and (<= 10238) => 644,
									(>= 10239) and (<= 10318) => 645,
									(>= 10319) and (<= 10398) => 646,
									(>= 10399) and (<= 10478) => 647,
									(>= 10479) and (<= 10558) => 648,
									(>= 10559) and (<= 10638) => 649,
									(>= 10639) and (<= 10718) => 650,
									(>= 10719) and (<= 10798) => 651,
									(>= 10799) and (<= 10878) => 652,
									(>= 10879) and (<= 10958) => 653,
									(>= 10959) and (<= 11038) => 654,
									(>= 11039) and (<= 11044) => 655,
									(>= 11045) and (<= 11050) => 656,
									(>= 11051) and (<= 11056) => 657,
									(>= 11057) and (<= 11062) => 658,
									(>= 11063) and (<= 11068) => 659,
									(>= 11069) and (<= 11074) => 660,
									(>= 11075) and (<= 11080) => 661,
									(>= 11081) and (<= 11086) => 662,
									(>= 11087) and (<= 11092) => 663,
									(>= 11093) and (<= 11098) => 664,
									(>= 11099) and (<= 11104) => 665,
									(>= 11105) and (<= 11110) => 666,
									(>= 11111) and (<= 11116) => 667,
									(>= 11117) and (<= 11440) => 668,
									(>= 11441) and (<= 11764) => 669,
									(>= 11765) and (<= 12088) => 670,
									(>= 12089) and (<= 12412) => 671,
									(>= 12413) and (<= 12736) => 672,
									(>= 12737) and (<= 13060) => 673,
									(>= 13061) and (<= 13384) => 674,
									(>= 13385) and (<= 13708) => 675,
									(>= 13709) and (<= 14032) => 676,
									(>= 14033) and (<= 14356) => 677,
									(>= 14357) and (<= 14680) => 678,
									(>= 14681) and (<= 15004) => 679,
									(>= 15005) and (<= 15036) => 680,
									(>= 15037) and (<= 15040) => 681,
									(>= 15041) and (<= 15052) => 682,
									(>= 15053) and (<= 15060) => 683,
									(>= 15061) and (<= 15068) => 684,
									(>= 15069) and (<= 15069) => 685,
									(>= 15070) and (<= 15070) => 686,
									(>= 15071) and (<= 15082) => 687,
									(>= 15083) and (<= 15098) => 688,
									(>= 15099) and (<= 15099) => 689,
									(>= 15100) and (<= 15103) => 690,
									(>= 15104) and (<= 15135) => 691,
									(>= 15136) and (<= 15139) => 692,
									(>= 15140) and (<= 15143) => 693,
									(>= 15144) and (<= 15175) => 694,
									(>= 15176) and (<= 15207) => 695,
									(>= 15208) and (<= 15211) => 696,
									(>= 15212) and (<= 15214) => 697,
									(>= 15215) and (<= 15217) => 698,
									(>= 15218) and (<= 15220) => 699,
									(>= 15221) and (<= 15223) => 700,
									(>= 15224) and (<= 15224) => 701,
									(>= 15225) and (<= 15225) => 702,
									(>= 15226) and (<= 15226) => 703,
									(>= 15227) and (<= 15227) => 704,
									(>= 15228) and (<= 15228) => 705,
									(>= 15229) and (<= 15231) => 706,
									(>= 15232) and (<= 15234) => 707,
									(>= 15235) and (<= 15237) => 708,
									(>= 15238) and (<= 15240) => 709,
									(>= 15241) and (<= 15241) => 710,
									(>= 15242) and (<= 15242) => 711,
									(>= 15243) and (<= 15243) => 712,
									(>= 15244) and (<= 15269) => 713,
									(>= 15270) and (<= 15270) => 714,
									(>= 15271) and (<= 15296) => 715,
									(>= 15297) and (<= 15297) => 716,
									(>= 15298) and (<= 15298) => 717,
									(>= 15299) and (<= 15299) => 718,
									(>= 15300) and (<= 15300) => 719,
									(>= 15301) and (<= 15306) => 720,
									(>= 15307) and (<= 15312) => 721,
									(>= 15313) and (<= 15314) => 722,
									(>= 15315) and (<= 15316) => 723,
									(>= 15317) and (<= 15348) => 724,
									(>= 15349) and (<= 15380) => 725,
									(>= 15381) and (<= 15444) => 726,
									(>= 15445) and (<= 15508) => 727,
									(>= 15509) and (<= 15540) => 728,
									(>= 15541) and (<= 15572) => 729,
									(>= 15573) and (<= 15652) => 730,
									(>= 15653) and (<= 15732) => 731,
									(>= 15733) and (<= 15756) => 732,
									(>= 15757) and (<= 15780) => 733,
									(>= 15781) and (<= 15844) => 734,
									(>= 15845) and (<= 15908) => 735,
									(>= 15909) and (<= 15940) => 736,
									(>= 15941) and (<= 15972) => 737,
									(>= 15973) and (<= 15980) => 738,
									(>= 15981) and (<= 15988) => 739,
									(>= 15989) and (<= 15992) => 740,
									(>= 15993) and (<= 16004) => 741,
									(>= 16005) and (<= 16013) => 742,
									(>= 16014) and (<= 16029) => 743,
									(>= 16030) and (<= 16053) => 744,
									(>= 16054) and (<= 16077) => 745,
									(>= 16078) and (<= 16078) => 746,
									(>= 16079) and (<= 16079) => 747,
									(>= 16080) and (<= 16080) => 748,
									(>= 16081) and (<= 16081) => 749,
									(>= 16082) and (<= 16082) => 750,
									(>= 16083) and (<= 16087) => 751,
									(>= 16088) and (<= 16088) => 752,
									(>= 16089) and (<= 16089) => 753,
									(>= 16090) and (<= 16090) => 754,
									(>= 16091) and (<= 16091) => 755,
									(>= 16092) and (<= 16092) => 756,
									(>= 16093) and (<= 16093) => 757,
									(>= 16094) and (<= 16173) => 758,
									(>= 16174) and (<= 16497) => 759,
									(>= 16498) and (<= 16503) => 760,
									(>= 16504) and (<= 16504) => 761,
									(>= 16505) and (<= 16505) => 762,
									(>= 16506) and (<= 16506) => 763,
									(>= 16507) and (<= 16507) => 764,
									(>= 16508) and (<= 16513) => 765,
									(>= 16514) and (<= 16593) => 766,
									(>= 16594) and (<= 16917) => 767,
									(>= 16918) and (<= 16918) => 768,
									(>= 16919) and (<= 16998) => 769,
									(>= 16999) and (<= 17004) => 770,
									(>= 17005) and (<= 17006) => 771,
									(>= 17007) and (<= 17030) => 772,
									(>= 17031) and (<= 17354) => 773,
									(>= 17355) and (<= 17355) => 774,
									(>= 17356) and (<= 17356) => 775,
									(>= 17357) and (<= 17357) => 776,
									(>= 17358) and (<= 17373) => 777,
									(>= 17374) and (<= 17389) => 778,
									(>= 17390) and (<= 17405) => 779,
									(>= 17406) and (<= 17421) => 780,
									(>= 17422) and (<= 17437) => 781,
									(>= 17438) and (<= 17453) => 782,
									(>= 17454) and (<= 17469) => 783,
									(>= 17470) and (<= 17485) => 784,
									(>= 17486) and (<= 17501) => 785,
									(>= 17502) and (<= 17517) => 786,
									(>= 17518) and (<= 17533) => 787,
									(>= 17534) and (<= 17549) => 788,
									(>= 17550) and (<= 17565) => 789,
									(>= 17566) and (<= 17581) => 790,
									(>= 17582) and (<= 17597) => 791,
									(>= 17598) and (<= 17613) => 792,
									(>= 17614) and (<= 17629) => 793,
									(>= 17630) and (<= 17631) => 794,
									(>= 17632) and (<= 17633) => 795,
									(>= 17634) and (<= 17635) => 796,
									(>= 17636) and (<= 17637) => 797,
									(>= 17638) and (<= 17639) => 798,
									(>= 17640) and (<= 17641) => 799,
									(>= 17642) and (<= 17643) => 800,
									(>= 17644) and (<= 17645) => 801,
									(>= 17646) and (<= 17647) => 802,
									(>= 17648) and (<= 17649) => 803,
									(>= 17650) and (<= 17651) => 804,
									(>= 17652) and (<= 17653) => 805,
									(>= 17654) and (<= 17655) => 806,
									(>= 17656) and (<= 17657) => 807,
									(>= 17658) and (<= 17659) => 808,
									(>= 17660) and (<= 17661) => 809,
									(>= 17662) and (<= 17663) => 810,
									(>= 17664) and (<= 17664) => 811,
									(>= 17665) and (<= 17665) => 812,
									(>= 17666) and (<= 17677) => 813,
									(>= 17678) and (<= 17689) => 814,
									(>= 17690) and (<= 17701) => 815,
									(>= 17702) and (<= 17713) => 816,
									(>= 17714) and (<= 17714) => 817,
									(>= 17715) and (<= 17715) => 818,
									(>= 17716) and (<= 17716) => 819,
									(>= 17717) and (<= 17717) => 820,
									(>= 17718) and (<= 17813) => 821,
									(>= 17814) and (<= 17814) => 822,
									(>= 17815) and (<= 17815) => 823,
									(>= 17816) and (<= 17816) => 824,
									(>= 17817) and (<= 17817) => 825,
									(>= 17818) and (<= 17818) => 826,
									(>= 17819) and (<= 17819) => 827,
									(>= 17820) and (<= 17820) => 828,
									(>= 17821) and (<= 17821) => 829,
									(>= 17822) and (<= 17822) => 830,
									(>= 17823) and (<= 17823) => 831,
									(>= 17824) and (<= 17903) => 832,
									(>= 17904) and (<= 17983) => 833,
									(>= 17984) and (<= 18063) => 834,
									(>= 18064) and (<= 18143) => 835,
									(>= 18144) and (<= 18149) => 836,
									(>= 18150) and (<= 18155) => 837,
									(>= 18156) and (<= 18161) => 838,
									(>= 18162) and (<= 18167) => 839,
									(>= 18168) and (<= 18168) => 840,
									(>= 18169) and (<= 18169) => 841,
									(>= 18170) and (<= 18170) => 842,
									(>= 18171) and (<= 18171) => 843,
									(>= 18172) and (<= 18172) => 844,
									(>= 18173) and (<= 18173) => 845,
									(>= 18174) and (<= 18174) => 846,
									(>= 18175) and (<= 18175) => 847,
									(>= 18176) and (<= 18255) => 848,
									(>= 18256) and (<= 18335) => 849,
									(>= 18336) and (<= 18415) => 850,
									(>= 18416) and (<= 18495) => 851,
									(>= 18496) and (<= 18501) => 852,
									(>= 18502) and (<= 18507) => 853,
									(>= 18508) and (<= 18513) => 854,
									(>= 18514) and (<= 18519) => 855,
									(>= 18520) and (<= 18543) => 856,
									(>= 18544) and (<= 18563) => 857,
									(>= 18564) and (<= 18564) => 858,
									(>= 18565) and (<= 18616) => 859,
									(>= 18617) and (<= 18618) => 860,
									(>= 18619) and (<= 18619) => 861,
									(>= 18620) and (<= 18620) => 862,
									(>= 18621) and (<= 18621) => 863,
									(>= 18622) and (<= 18622) => 864,
									(>= 18623) and (<= 18623) => 865,
									(>= 18624) and (<= 18655) => 866,
									(>= 18656) and (<= 18663) => 867,
									(>= 18664) and (<= 18679) => 868,
									(>= 18680) and (<= 18681) => 869,
									(>= 18682) and (<= 18682) => 870,
									(>= 18683) and (<= 18685) => 871,
									(>= 18686) and (<= 18686) => 872,
									(>= 18687) and (<= 18766) => 873,
									(>= 18767) and (<= 18772) => 874,
									(>= 18773) and (<= 19096) => 875,
									(>= 19097) and (<= 19097) => 876,
									(>= 19098) and (<= 19177) => 877,
									(>= 19178) and (<= 19183) => 878,
									(>= 19184) and (<= 19507) => 879,
									(>= 19508) and (<= 19508) => 880,
									(>= 19509) and (<= 19588) => 881,
									(>= 19589) and (<= 19594) => 882,
									(>= 19595) and (<= 19918) => 883,
									(>= 19919) and (<= 19919) => 884,
									(>= 19920) and (<= 19999) => 885,
									(>= 20000) and (<= 20005) => 886,
									(>= 20006) and (<= 20329) => 887,
									(>= 20330) and (<= 20330) => 888,
									(>= 20331) and (<= 20331) => 889,
									(>= 20332) and (<= 20332) => 890,
									(>= 20333) and (<= 20335) => 891,
									(>= 20336) and (<= 20336) => 892,
									(>= 20337) and (<= 20337) => 893,
									(>= 20338) and (<= 20338) => 894,
									(>= 20339) and (<= 20339) => 895,
									(>= 20340) and (<= 20340) => 896,
									(>= 20341) and (<= 20341) => 897,
								_ => throw new ArgumentException("Block with state " + state + " not found!")
		};

		public static Type GetBlockTypeById(int id) => id switch {
								0 => typeof(Air),
									1 => typeof(Stone),
									2 => typeof(Granite),
									3 => typeof(PolishedGranite),
									4 => typeof(Diorite),
									5 => typeof(PolishedDiorite),
									6 => typeof(Andesite),
									7 => typeof(PolishedAndesite),
									8 => typeof(GrassBlock),
									9 => typeof(Dirt),
									10 => typeof(CoarseDirt),
									11 => typeof(Podzol),
									12 => typeof(Cobblestone),
									13 => typeof(OakPlanks),
									14 => typeof(SprucePlanks),
									15 => typeof(BirchPlanks),
									16 => typeof(JunglePlanks),
									17 => typeof(AcaciaPlanks),
									18 => typeof(DarkOakPlanks),
									19 => typeof(OakSapling),
									20 => typeof(SpruceSapling),
									21 => typeof(BirchSapling),
									22 => typeof(JungleSapling),
									23 => typeof(AcaciaSapling),
									24 => typeof(DarkOakSapling),
									25 => typeof(Bedrock),
									26 => typeof(Water),
									27 => typeof(Lava),
									28 => typeof(Sand),
									29 => typeof(RedSand),
									30 => typeof(Gravel),
									31 => typeof(GoldOre),
									32 => typeof(DeepslateGoldOre),
									33 => typeof(IronOre),
									34 => typeof(DeepslateIronOre),
									35 => typeof(CoalOre),
									36 => typeof(DeepslateCoalOre),
									37 => typeof(NetherGoldOre),
									38 => typeof(OakLog),
									39 => typeof(SpruceLog),
									40 => typeof(BirchLog),
									41 => typeof(JungleLog),
									42 => typeof(AcaciaLog),
									43 => typeof(DarkOakLog),
									44 => typeof(StrippedSpruceLog),
									45 => typeof(StrippedBirchLog),
									46 => typeof(StrippedJungleLog),
									47 => typeof(StrippedAcaciaLog),
									48 => typeof(StrippedDarkOakLog),
									49 => typeof(StrippedOakLog),
									50 => typeof(OakWood),
									51 => typeof(SpruceWood),
									52 => typeof(BirchWood),
									53 => typeof(JungleWood),
									54 => typeof(AcaciaWood),
									55 => typeof(DarkOakWood),
									56 => typeof(StrippedOakWood),
									57 => typeof(StrippedSpruceWood),
									58 => typeof(StrippedBirchWood),
									59 => typeof(StrippedJungleWood),
									60 => typeof(StrippedAcaciaWood),
									61 => typeof(StrippedDarkOakWood),
									62 => typeof(OakLeaves),
									63 => typeof(SpruceLeaves),
									64 => typeof(BirchLeaves),
									65 => typeof(JungleLeaves),
									66 => typeof(AcaciaLeaves),
									67 => typeof(DarkOakLeaves),
									68 => typeof(AzaleaLeaves),
									69 => typeof(FloweringAzaleaLeaves),
									70 => typeof(Sponge),
									71 => typeof(WetSponge),
									72 => typeof(Glass),
									73 => typeof(LapisOre),
									74 => typeof(DeepslateLapisOre),
									75 => typeof(LapisBlock),
									76 => typeof(Dispenser),
									77 => typeof(Sandstone),
									78 => typeof(ChiseledSandstone),
									79 => typeof(CutSandstone),
									80 => typeof(NoteBlock),
									81 => typeof(WhiteBed),
									82 => typeof(OrangeBed),
									83 => typeof(MagentaBed),
									84 => typeof(LightBlueBed),
									85 => typeof(YellowBed),
									86 => typeof(LimeBed),
									87 => typeof(PinkBed),
									88 => typeof(GrayBed),
									89 => typeof(LightGrayBed),
									90 => typeof(CyanBed),
									91 => typeof(PurpleBed),
									92 => typeof(BlueBed),
									93 => typeof(BrownBed),
									94 => typeof(GreenBed),
									95 => typeof(RedBed),
									96 => typeof(BlackBed),
									97 => typeof(PoweredRail),
									98 => typeof(DetectorRail),
									99 => typeof(StickyPiston),
									100 => typeof(Cobweb),
									101 => typeof(Grass),
									102 => typeof(Fern),
									103 => typeof(DeadBush),
									104 => typeof(Seagrass),
									105 => typeof(TallSeagrass),
									106 => typeof(Piston),
									107 => typeof(PistonHead),
									108 => typeof(WhiteWool),
									109 => typeof(OrangeWool),
									110 => typeof(MagentaWool),
									111 => typeof(LightBlueWool),
									112 => typeof(YellowWool),
									113 => typeof(LimeWool),
									114 => typeof(PinkWool),
									115 => typeof(GrayWool),
									116 => typeof(LightGrayWool),
									117 => typeof(CyanWool),
									118 => typeof(PurpleWool),
									119 => typeof(BlueWool),
									120 => typeof(BrownWool),
									121 => typeof(GreenWool),
									122 => typeof(RedWool),
									123 => typeof(BlackWool),
									124 => typeof(MovingPiston),
									125 => typeof(Dandelion),
									126 => typeof(Poppy),
									127 => typeof(BlueOrchid),
									128 => typeof(Allium),
									129 => typeof(AzureBluet),
									130 => typeof(RedTulip),
									131 => typeof(OrangeTulip),
									132 => typeof(WhiteTulip),
									133 => typeof(PinkTulip),
									134 => typeof(OxeyeDaisy),
									135 => typeof(Cornflower),
									136 => typeof(WitherRose),
									137 => typeof(LilyOfTheValley),
									138 => typeof(BrownMushroom),
									139 => typeof(RedMushroom),
									140 => typeof(GoldBlock),
									141 => typeof(IronBlock),
									142 => typeof(Bricks),
									143 => typeof(Tnt),
									144 => typeof(Bookshelf),
									145 => typeof(MossyCobblestone),
									146 => typeof(Obsidian),
									147 => typeof(Torch),
									148 => typeof(WallTorch),
									149 => typeof(Fire),
									150 => typeof(SoulFire),
									151 => typeof(Spawner),
									152 => typeof(OakStairs),
									153 => typeof(Chest),
									154 => typeof(RedstoneWire),
									155 => typeof(DiamondOre),
									156 => typeof(DeepslateDiamondOre),
									157 => typeof(DiamondBlock),
									158 => typeof(CraftingTable),
									159 => typeof(Wheat),
									160 => typeof(Farmland),
									161 => typeof(Furnace),
									162 => typeof(OakSign),
									163 => typeof(SpruceSign),
									164 => typeof(BirchSign),
									165 => typeof(AcaciaSign),
									166 => typeof(JungleSign),
									167 => typeof(DarkOakSign),
									168 => typeof(OakDoor),
									169 => typeof(Ladder),
									170 => typeof(Rail),
									171 => typeof(CobblestoneStairs),
									172 => typeof(OakWallSign),
									173 => typeof(SpruceWallSign),
									174 => typeof(BirchWallSign),
									175 => typeof(AcaciaWallSign),
									176 => typeof(JungleWallSign),
									177 => typeof(DarkOakWallSign),
									178 => typeof(Lever),
									179 => typeof(StonePressurePlate),
									180 => typeof(IronDoor),
									181 => typeof(OakPressurePlate),
									182 => typeof(SprucePressurePlate),
									183 => typeof(BirchPressurePlate),
									184 => typeof(JunglePressurePlate),
									185 => typeof(AcaciaPressurePlate),
									186 => typeof(DarkOakPressurePlate),
									187 => typeof(RedstoneOre),
									188 => typeof(DeepslateRedstoneOre),
									189 => typeof(RedstoneTorch),
									190 => typeof(RedstoneWallTorch),
									191 => typeof(StoneButton),
									192 => typeof(Snow),
									193 => typeof(Ice),
									194 => typeof(SnowBlock),
									195 => typeof(Cactus),
									196 => typeof(Clay),
									197 => typeof(SugarCane),
									198 => typeof(Jukebox),
									199 => typeof(OakFence),
									200 => typeof(Pumpkin),
									201 => typeof(Netherrack),
									202 => typeof(SoulSand),
									203 => typeof(SoulSoil),
									204 => typeof(Basalt),
									205 => typeof(PolishedBasalt),
									206 => typeof(SoulTorch),
									207 => typeof(SoulWallTorch),
									208 => typeof(Glowstone),
									209 => typeof(NetherPortal),
									210 => typeof(CarvedPumpkin),
									211 => typeof(JackOLantern),
									212 => typeof(Cake),
									213 => typeof(Repeater),
									214 => typeof(WhiteStainedGlass),
									215 => typeof(OrangeStainedGlass),
									216 => typeof(MagentaStainedGlass),
									217 => typeof(LightBlueStainedGlass),
									218 => typeof(YellowStainedGlass),
									219 => typeof(LimeStainedGlass),
									220 => typeof(PinkStainedGlass),
									221 => typeof(GrayStainedGlass),
									222 => typeof(LightGrayStainedGlass),
									223 => typeof(CyanStainedGlass),
									224 => typeof(PurpleStainedGlass),
									225 => typeof(BlueStainedGlass),
									226 => typeof(BrownStainedGlass),
									227 => typeof(GreenStainedGlass),
									228 => typeof(RedStainedGlass),
									229 => typeof(BlackStainedGlass),
									230 => typeof(OakTrapdoor),
									231 => typeof(SpruceTrapdoor),
									232 => typeof(BirchTrapdoor),
									233 => typeof(JungleTrapdoor),
									234 => typeof(AcaciaTrapdoor),
									235 => typeof(DarkOakTrapdoor),
									236 => typeof(StoneBricks),
									237 => typeof(MossyStoneBricks),
									238 => typeof(CrackedStoneBricks),
									239 => typeof(ChiseledStoneBricks),
									240 => typeof(InfestedStone),
									241 => typeof(InfestedCobblestone),
									242 => typeof(InfestedStoneBricks),
									243 => typeof(InfestedMossyStoneBricks),
									244 => typeof(InfestedCrackedStoneBricks),
									245 => typeof(InfestedChiseledStoneBricks),
									246 => typeof(BrownMushroomBlock),
									247 => typeof(RedMushroomBlock),
									248 => typeof(MushroomStem),
									249 => typeof(IronBars),
									250 => typeof(Chain),
									251 => typeof(GlassPane),
									252 => typeof(Melon),
									253 => typeof(AttachedPumpkinStem),
									254 => typeof(AttachedMelonStem),
									255 => typeof(PumpkinStem),
									256 => typeof(MelonStem),
									257 => typeof(Vine),
									258 => typeof(GlowLichen),
									259 => typeof(OakFenceGate),
									260 => typeof(BrickStairs),
									261 => typeof(StoneBrickStairs),
									262 => typeof(Mycelium),
									263 => typeof(LilyPad),
									264 => typeof(NetherBricks),
									265 => typeof(NetherBrickFence),
									266 => typeof(NetherBrickStairs),
									267 => typeof(NetherWart),
									268 => typeof(EnchantingTable),
									269 => typeof(BrewingStand),
									270 => typeof(Cauldron),
									271 => typeof(WaterCauldron),
									272 => typeof(LavaCauldron),
									273 => typeof(PowderSnowCauldron),
									274 => typeof(EndPortal),
									275 => typeof(EndPortalFrame),
									276 => typeof(EndStone),
									277 => typeof(DragonEgg),
									278 => typeof(RedstoneLamp),
									279 => typeof(Cocoa),
									280 => typeof(SandstoneStairs),
									281 => typeof(EmeraldOre),
									282 => typeof(DeepslateEmeraldOre),
									283 => typeof(EnderChest),
									284 => typeof(TripwireHook),
									285 => typeof(Tripwire),
									286 => typeof(EmeraldBlock),
									287 => typeof(SpruceStairs),
									288 => typeof(BirchStairs),
									289 => typeof(JungleStairs),
									290 => typeof(CommandBlock),
									291 => typeof(Beacon),
									292 => typeof(CobblestoneWall),
									293 => typeof(MossyCobblestoneWall),
									294 => typeof(FlowerPot),
									295 => typeof(PottedOakSapling),
									296 => typeof(PottedSpruceSapling),
									297 => typeof(PottedBirchSapling),
									298 => typeof(PottedJungleSapling),
									299 => typeof(PottedAcaciaSapling),
									300 => typeof(PottedDarkOakSapling),
									301 => typeof(PottedFern),
									302 => typeof(PottedDandelion),
									303 => typeof(PottedPoppy),
									304 => typeof(PottedBlueOrchid),
									305 => typeof(PottedAllium),
									306 => typeof(PottedAzureBluet),
									307 => typeof(PottedRedTulip),
									308 => typeof(PottedOrangeTulip),
									309 => typeof(PottedWhiteTulip),
									310 => typeof(PottedPinkTulip),
									311 => typeof(PottedOxeyeDaisy),
									312 => typeof(PottedCornflower),
									313 => typeof(PottedLilyOfTheValley),
									314 => typeof(PottedWitherRose),
									315 => typeof(PottedRedMushroom),
									316 => typeof(PottedBrownMushroom),
									317 => typeof(PottedDeadBush),
									318 => typeof(PottedCactus),
									319 => typeof(Carrots),
									320 => typeof(Potatoes),
									321 => typeof(OakButton),
									322 => typeof(SpruceButton),
									323 => typeof(BirchButton),
									324 => typeof(JungleButton),
									325 => typeof(AcaciaButton),
									326 => typeof(DarkOakButton),
									327 => typeof(SkeletonSkull),
									328 => typeof(SkeletonWallSkull),
									329 => typeof(WitherSkeletonSkull),
									330 => typeof(WitherSkeletonWallSkull),
									331 => typeof(ZombieHead),
									332 => typeof(ZombieWallHead),
									333 => typeof(PlayerHead),
									334 => typeof(PlayerWallHead),
									335 => typeof(CreeperHead),
									336 => typeof(CreeperWallHead),
									337 => typeof(DragonHead),
									338 => typeof(DragonWallHead),
									339 => typeof(Anvil),
									340 => typeof(ChippedAnvil),
									341 => typeof(DamagedAnvil),
									342 => typeof(TrappedChest),
									343 => typeof(LightWeightedPressurePlate),
									344 => typeof(HeavyWeightedPressurePlate),
									345 => typeof(Comparator),
									346 => typeof(DaylightDetector),
									347 => typeof(RedstoneBlock),
									348 => typeof(NetherQuartzOre),
									349 => typeof(Hopper),
									350 => typeof(QuartzBlock),
									351 => typeof(ChiseledQuartzBlock),
									352 => typeof(QuartzPillar),
									353 => typeof(QuartzStairs),
									354 => typeof(ActivatorRail),
									355 => typeof(Dropper),
									356 => typeof(WhiteTerracotta),
									357 => typeof(OrangeTerracotta),
									358 => typeof(MagentaTerracotta),
									359 => typeof(LightBlueTerracotta),
									360 => typeof(YellowTerracotta),
									361 => typeof(LimeTerracotta),
									362 => typeof(PinkTerracotta),
									363 => typeof(GrayTerracotta),
									364 => typeof(LightGrayTerracotta),
									365 => typeof(CyanTerracotta),
									366 => typeof(PurpleTerracotta),
									367 => typeof(BlueTerracotta),
									368 => typeof(BrownTerracotta),
									369 => typeof(GreenTerracotta),
									370 => typeof(RedTerracotta),
									371 => typeof(BlackTerracotta),
									372 => typeof(WhiteStainedGlassPane),
									373 => typeof(OrangeStainedGlassPane),
									374 => typeof(MagentaStainedGlassPane),
									375 => typeof(LightBlueStainedGlassPane),
									376 => typeof(YellowStainedGlassPane),
									377 => typeof(LimeStainedGlassPane),
									378 => typeof(PinkStainedGlassPane),
									379 => typeof(GrayStainedGlassPane),
									380 => typeof(LightGrayStainedGlassPane),
									381 => typeof(CyanStainedGlassPane),
									382 => typeof(PurpleStainedGlassPane),
									383 => typeof(BlueStainedGlassPane),
									384 => typeof(BrownStainedGlassPane),
									385 => typeof(GreenStainedGlassPane),
									386 => typeof(RedStainedGlassPane),
									387 => typeof(BlackStainedGlassPane),
									388 => typeof(AcaciaStairs),
									389 => typeof(DarkOakStairs),
									390 => typeof(SlimeBlock),
									391 => typeof(Barrier),
									392 => typeof(Light),
									393 => typeof(IronTrapdoor),
									394 => typeof(Prismarine),
									395 => typeof(PrismarineBricks),
									396 => typeof(DarkPrismarine),
									397 => typeof(PrismarineStairs),
									398 => typeof(PrismarineBrickStairs),
									399 => typeof(DarkPrismarineStairs),
									400 => typeof(PrismarineSlab),
									401 => typeof(PrismarineBrickSlab),
									402 => typeof(DarkPrismarineSlab),
									403 => typeof(SeaLantern),
									404 => typeof(HayBlock),
									405 => typeof(WhiteCarpet),
									406 => typeof(OrangeCarpet),
									407 => typeof(MagentaCarpet),
									408 => typeof(LightBlueCarpet),
									409 => typeof(YellowCarpet),
									410 => typeof(LimeCarpet),
									411 => typeof(PinkCarpet),
									412 => typeof(GrayCarpet),
									413 => typeof(LightGrayCarpet),
									414 => typeof(CyanCarpet),
									415 => typeof(PurpleCarpet),
									416 => typeof(BlueCarpet),
									417 => typeof(BrownCarpet),
									418 => typeof(GreenCarpet),
									419 => typeof(RedCarpet),
									420 => typeof(BlackCarpet),
									421 => typeof(Terracotta),
									422 => typeof(CoalBlock),
									423 => typeof(PackedIce),
									424 => typeof(Sunflower),
									425 => typeof(Lilac),
									426 => typeof(RoseBush),
									427 => typeof(Peony),
									428 => typeof(TallGrass),
									429 => typeof(LargeFern),
									430 => typeof(WhiteBanner),
									431 => typeof(OrangeBanner),
									432 => typeof(MagentaBanner),
									433 => typeof(LightBlueBanner),
									434 => typeof(YellowBanner),
									435 => typeof(LimeBanner),
									436 => typeof(PinkBanner),
									437 => typeof(GrayBanner),
									438 => typeof(LightGrayBanner),
									439 => typeof(CyanBanner),
									440 => typeof(PurpleBanner),
									441 => typeof(BlueBanner),
									442 => typeof(BrownBanner),
									443 => typeof(GreenBanner),
									444 => typeof(RedBanner),
									445 => typeof(BlackBanner),
									446 => typeof(WhiteWallBanner),
									447 => typeof(OrangeWallBanner),
									448 => typeof(MagentaWallBanner),
									449 => typeof(LightBlueWallBanner),
									450 => typeof(YellowWallBanner),
									451 => typeof(LimeWallBanner),
									452 => typeof(PinkWallBanner),
									453 => typeof(GrayWallBanner),
									454 => typeof(LightGrayWallBanner),
									455 => typeof(CyanWallBanner),
									456 => typeof(PurpleWallBanner),
									457 => typeof(BlueWallBanner),
									458 => typeof(BrownWallBanner),
									459 => typeof(GreenWallBanner),
									460 => typeof(RedWallBanner),
									461 => typeof(BlackWallBanner),
									462 => typeof(RedSandstone),
									463 => typeof(ChiseledRedSandstone),
									464 => typeof(CutRedSandstone),
									465 => typeof(RedSandstoneStairs),
									466 => typeof(OakSlab),
									467 => typeof(SpruceSlab),
									468 => typeof(BirchSlab),
									469 => typeof(JungleSlab),
									470 => typeof(AcaciaSlab),
									471 => typeof(DarkOakSlab),
									472 => typeof(StoneSlab),
									473 => typeof(SmoothStoneSlab),
									474 => typeof(SandstoneSlab),
									475 => typeof(CutSandstoneSlab),
									476 => typeof(PetrifiedOakSlab),
									477 => typeof(CobblestoneSlab),
									478 => typeof(BrickSlab),
									479 => typeof(StoneBrickSlab),
									480 => typeof(NetherBrickSlab),
									481 => typeof(QuartzSlab),
									482 => typeof(RedSandstoneSlab),
									483 => typeof(CutRedSandstoneSlab),
									484 => typeof(PurpurSlab),
									485 => typeof(SmoothStone),
									486 => typeof(SmoothSandstone),
									487 => typeof(SmoothQuartz),
									488 => typeof(SmoothRedSandstone),
									489 => typeof(SpruceFenceGate),
									490 => typeof(BirchFenceGate),
									491 => typeof(JungleFenceGate),
									492 => typeof(AcaciaFenceGate),
									493 => typeof(DarkOakFenceGate),
									494 => typeof(SpruceFence),
									495 => typeof(BirchFence),
									496 => typeof(JungleFence),
									497 => typeof(AcaciaFence),
									498 => typeof(DarkOakFence),
									499 => typeof(SpruceDoor),
									500 => typeof(BirchDoor),
									501 => typeof(JungleDoor),
									502 => typeof(AcaciaDoor),
									503 => typeof(DarkOakDoor),
									504 => typeof(EndRod),
									505 => typeof(ChorusPlant),
									506 => typeof(ChorusFlower),
									507 => typeof(PurpurBlock),
									508 => typeof(PurpurPillar),
									509 => typeof(PurpurStairs),
									510 => typeof(EndStoneBricks),
									511 => typeof(Beetroots),
									512 => typeof(DirtPath),
									513 => typeof(EndGateway),
									514 => typeof(RepeatingCommandBlock),
									515 => typeof(ChainCommandBlock),
									516 => typeof(FrostedIce),
									517 => typeof(MagmaBlock),
									518 => typeof(NetherWartBlock),
									519 => typeof(RedNetherBricks),
									520 => typeof(BoneBlock),
									521 => typeof(StructureVoid),
									522 => typeof(Observer),
									523 => typeof(ShulkerBox),
									524 => typeof(WhiteShulkerBox),
									525 => typeof(OrangeShulkerBox),
									526 => typeof(MagentaShulkerBox),
									527 => typeof(LightBlueShulkerBox),
									528 => typeof(YellowShulkerBox),
									529 => typeof(LimeShulkerBox),
									530 => typeof(PinkShulkerBox),
									531 => typeof(GrayShulkerBox),
									532 => typeof(LightGrayShulkerBox),
									533 => typeof(CyanShulkerBox),
									534 => typeof(PurpleShulkerBox),
									535 => typeof(BlueShulkerBox),
									536 => typeof(BrownShulkerBox),
									537 => typeof(GreenShulkerBox),
									538 => typeof(RedShulkerBox),
									539 => typeof(BlackShulkerBox),
									540 => typeof(WhiteGlazedTerracotta),
									541 => typeof(OrangeGlazedTerracotta),
									542 => typeof(MagentaGlazedTerracotta),
									543 => typeof(LightBlueGlazedTerracotta),
									544 => typeof(YellowGlazedTerracotta),
									545 => typeof(LimeGlazedTerracotta),
									546 => typeof(PinkGlazedTerracotta),
									547 => typeof(GrayGlazedTerracotta),
									548 => typeof(LightGrayGlazedTerracotta),
									549 => typeof(CyanGlazedTerracotta),
									550 => typeof(PurpleGlazedTerracotta),
									551 => typeof(BlueGlazedTerracotta),
									552 => typeof(BrownGlazedTerracotta),
									553 => typeof(GreenGlazedTerracotta),
									554 => typeof(RedGlazedTerracotta),
									555 => typeof(BlackGlazedTerracotta),
									556 => typeof(WhiteConcrete),
									557 => typeof(OrangeConcrete),
									558 => typeof(MagentaConcrete),
									559 => typeof(LightBlueConcrete),
									560 => typeof(YellowConcrete),
									561 => typeof(LimeConcrete),
									562 => typeof(PinkConcrete),
									563 => typeof(GrayConcrete),
									564 => typeof(LightGrayConcrete),
									565 => typeof(CyanConcrete),
									566 => typeof(PurpleConcrete),
									567 => typeof(BlueConcrete),
									568 => typeof(BrownConcrete),
									569 => typeof(GreenConcrete),
									570 => typeof(RedConcrete),
									571 => typeof(BlackConcrete),
									572 => typeof(WhiteConcretePowder),
									573 => typeof(OrangeConcretePowder),
									574 => typeof(MagentaConcretePowder),
									575 => typeof(LightBlueConcretePowder),
									576 => typeof(YellowConcretePowder),
									577 => typeof(LimeConcretePowder),
									578 => typeof(PinkConcretePowder),
									579 => typeof(GrayConcretePowder),
									580 => typeof(LightGrayConcretePowder),
									581 => typeof(CyanConcretePowder),
									582 => typeof(PurpleConcretePowder),
									583 => typeof(BlueConcretePowder),
									584 => typeof(BrownConcretePowder),
									585 => typeof(GreenConcretePowder),
									586 => typeof(RedConcretePowder),
									587 => typeof(BlackConcretePowder),
									588 => typeof(Kelp),
									589 => typeof(KelpPlant),
									590 => typeof(DriedKelpBlock),
									591 => typeof(TurtleEgg),
									592 => typeof(DeadTubeCoralBlock),
									593 => typeof(DeadBrainCoralBlock),
									594 => typeof(DeadBubbleCoralBlock),
									595 => typeof(DeadFireCoralBlock),
									596 => typeof(DeadHornCoralBlock),
									597 => typeof(TubeCoralBlock),
									598 => typeof(BrainCoralBlock),
									599 => typeof(BubbleCoralBlock),
									600 => typeof(FireCoralBlock),
									601 => typeof(HornCoralBlock),
									602 => typeof(DeadTubeCoral),
									603 => typeof(DeadBrainCoral),
									604 => typeof(DeadBubbleCoral),
									605 => typeof(DeadFireCoral),
									606 => typeof(DeadHornCoral),
									607 => typeof(TubeCoral),
									608 => typeof(BrainCoral),
									609 => typeof(BubbleCoral),
									610 => typeof(FireCoral),
									611 => typeof(HornCoral),
									612 => typeof(DeadTubeCoralFan),
									613 => typeof(DeadBrainCoralFan),
									614 => typeof(DeadBubbleCoralFan),
									615 => typeof(DeadFireCoralFan),
									616 => typeof(DeadHornCoralFan),
									617 => typeof(TubeCoralFan),
									618 => typeof(BrainCoralFan),
									619 => typeof(BubbleCoralFan),
									620 => typeof(FireCoralFan),
									621 => typeof(HornCoralFan),
									622 => typeof(DeadTubeCoralWallFan),
									623 => typeof(DeadBrainCoralWallFan),
									624 => typeof(DeadBubbleCoralWallFan),
									625 => typeof(DeadFireCoralWallFan),
									626 => typeof(DeadHornCoralWallFan),
									627 => typeof(TubeCoralWallFan),
									628 => typeof(BrainCoralWallFan),
									629 => typeof(BubbleCoralWallFan),
									630 => typeof(FireCoralWallFan),
									631 => typeof(HornCoralWallFan),
									632 => typeof(SeaPickle),
									633 => typeof(BlueIce),
									634 => typeof(Conduit),
									635 => typeof(BambooSapling),
									636 => typeof(Bamboo),
									637 => typeof(PottedBamboo),
									638 => typeof(VoidAir),
									639 => typeof(CaveAir),
									640 => typeof(BubbleColumn),
									641 => typeof(PolishedGraniteStairs),
									642 => typeof(SmoothRedSandstoneStairs),
									643 => typeof(MossyStoneBrickStairs),
									644 => typeof(PolishedDioriteStairs),
									645 => typeof(MossyCobblestoneStairs),
									646 => typeof(EndStoneBrickStairs),
									647 => typeof(StoneStairs),
									648 => typeof(SmoothSandstoneStairs),
									649 => typeof(SmoothQuartzStairs),
									650 => typeof(GraniteStairs),
									651 => typeof(AndesiteStairs),
									652 => typeof(RedNetherBrickStairs),
									653 => typeof(PolishedAndesiteStairs),
									654 => typeof(DioriteStairs),
									655 => typeof(PolishedGraniteSlab),
									656 => typeof(SmoothRedSandstoneSlab),
									657 => typeof(MossyStoneBrickSlab),
									658 => typeof(PolishedDioriteSlab),
									659 => typeof(MossyCobblestoneSlab),
									660 => typeof(EndStoneBrickSlab),
									661 => typeof(SmoothSandstoneSlab),
									662 => typeof(SmoothQuartzSlab),
									663 => typeof(GraniteSlab),
									664 => typeof(AndesiteSlab),
									665 => typeof(RedNetherBrickSlab),
									666 => typeof(PolishedAndesiteSlab),
									667 => typeof(DioriteSlab),
									668 => typeof(BrickWall),
									669 => typeof(PrismarineWall),
									670 => typeof(RedSandstoneWall),
									671 => typeof(MossyStoneBrickWall),
									672 => typeof(GraniteWall),
									673 => typeof(StoneBrickWall),
									674 => typeof(NetherBrickWall),
									675 => typeof(AndesiteWall),
									676 => typeof(RedNetherBrickWall),
									677 => typeof(SandstoneWall),
									678 => typeof(EndStoneBrickWall),
									679 => typeof(DioriteWall),
									680 => typeof(Scaffolding),
									681 => typeof(Loom),
									682 => typeof(Barrel),
									683 => typeof(Smoker),
									684 => typeof(BlastFurnace),
									685 => typeof(CartographyTable),
									686 => typeof(FletchingTable),
									687 => typeof(Grindstone),
									688 => typeof(Lectern),
									689 => typeof(SmithingTable),
									690 => typeof(Stonecutter),
									691 => typeof(Bell),
									692 => typeof(Lantern),
									693 => typeof(SoulLantern),
									694 => typeof(Campfire),
									695 => typeof(SoulCampfire),
									696 => typeof(SweetBerryBush),
									697 => typeof(WarpedStem),
									698 => typeof(StrippedWarpedStem),
									699 => typeof(WarpedHyphae),
									700 => typeof(StrippedWarpedHyphae),
									701 => typeof(WarpedNylium),
									702 => typeof(WarpedFungus),
									703 => typeof(WarpedWartBlock),
									704 => typeof(WarpedRoots),
									705 => typeof(NetherSprouts),
									706 => typeof(CrimsonStem),
									707 => typeof(StrippedCrimsonStem),
									708 => typeof(CrimsonHyphae),
									709 => typeof(StrippedCrimsonHyphae),
									710 => typeof(CrimsonNylium),
									711 => typeof(CrimsonFungus),
									712 => typeof(Shroomlight),
									713 => typeof(WeepingVines),
									714 => typeof(WeepingVinesPlant),
									715 => typeof(TwistingVines),
									716 => typeof(TwistingVinesPlant),
									717 => typeof(CrimsonRoots),
									718 => typeof(CrimsonPlanks),
									719 => typeof(WarpedPlanks),
									720 => typeof(CrimsonSlab),
									721 => typeof(WarpedSlab),
									722 => typeof(CrimsonPressurePlate),
									723 => typeof(WarpedPressurePlate),
									724 => typeof(CrimsonFence),
									725 => typeof(WarpedFence),
									726 => typeof(CrimsonTrapdoor),
									727 => typeof(WarpedTrapdoor),
									728 => typeof(CrimsonFenceGate),
									729 => typeof(WarpedFenceGate),
									730 => typeof(CrimsonStairs),
									731 => typeof(WarpedStairs),
									732 => typeof(CrimsonButton),
									733 => typeof(WarpedButton),
									734 => typeof(CrimsonDoor),
									735 => typeof(WarpedDoor),
									736 => typeof(CrimsonSign),
									737 => typeof(WarpedSign),
									738 => typeof(CrimsonWallSign),
									739 => typeof(WarpedWallSign),
									740 => typeof(StructureBlock),
									741 => typeof(Jigsaw),
									742 => typeof(Composter),
									743 => typeof(Target),
									744 => typeof(BeeNest),
									745 => typeof(Beehive),
									746 => typeof(HoneyBlock),
									747 => typeof(HoneycombBlock),
									748 => typeof(NetheriteBlock),
									749 => typeof(AncientDebris),
									750 => typeof(CryingObsidian),
									751 => typeof(RespawnAnchor),
									752 => typeof(PottedCrimsonFungus),
									753 => typeof(PottedWarpedFungus),
									754 => typeof(PottedCrimsonRoots),
									755 => typeof(PottedWarpedRoots),
									756 => typeof(Lodestone),
									757 => typeof(Blackstone),
									758 => typeof(BlackstoneStairs),
									759 => typeof(BlackstoneWall),
									760 => typeof(BlackstoneSlab),
									761 => typeof(PolishedBlackstone),
									762 => typeof(PolishedBlackstoneBricks),
									763 => typeof(CrackedPolishedBlackstoneBricks),
									764 => typeof(ChiseledPolishedBlackstone),
									765 => typeof(PolishedBlackstoneBrickSlab),
									766 => typeof(PolishedBlackstoneBrickStairs),
									767 => typeof(PolishedBlackstoneBrickWall),
									768 => typeof(GildedBlackstone),
									769 => typeof(PolishedBlackstoneStairs),
									770 => typeof(PolishedBlackstoneSlab),
									771 => typeof(PolishedBlackstonePressurePlate),
									772 => typeof(PolishedBlackstoneButton),
									773 => typeof(PolishedBlackstoneWall),
									774 => typeof(ChiseledNetherBricks),
									775 => typeof(CrackedNetherBricks),
									776 => typeof(QuartzBricks),
									777 => typeof(Candle),
									778 => typeof(WhiteCandle),
									779 => typeof(OrangeCandle),
									780 => typeof(MagentaCandle),
									781 => typeof(LightBlueCandle),
									782 => typeof(YellowCandle),
									783 => typeof(LimeCandle),
									784 => typeof(PinkCandle),
									785 => typeof(GrayCandle),
									786 => typeof(LightGrayCandle),
									787 => typeof(CyanCandle),
									788 => typeof(PurpleCandle),
									789 => typeof(BlueCandle),
									790 => typeof(BrownCandle),
									791 => typeof(GreenCandle),
									792 => typeof(RedCandle),
									793 => typeof(BlackCandle),
									794 => typeof(CandleCake),
									795 => typeof(WhiteCandleCake),
									796 => typeof(OrangeCandleCake),
									797 => typeof(MagentaCandleCake),
									798 => typeof(LightBlueCandleCake),
									799 => typeof(YellowCandleCake),
									800 => typeof(LimeCandleCake),
									801 => typeof(PinkCandleCake),
									802 => typeof(GrayCandleCake),
									803 => typeof(LightGrayCandleCake),
									804 => typeof(CyanCandleCake),
									805 => typeof(PurpleCandleCake),
									806 => typeof(BlueCandleCake),
									807 => typeof(BrownCandleCake),
									808 => typeof(GreenCandleCake),
									809 => typeof(RedCandleCake),
									810 => typeof(BlackCandleCake),
									811 => typeof(AmethystBlock),
									812 => typeof(BuddingAmethyst),
									813 => typeof(AmethystCluster),
									814 => typeof(LargeAmethystBud),
									815 => typeof(MediumAmethystBud),
									816 => typeof(SmallAmethystBud),
									817 => typeof(Tuff),
									818 => typeof(Calcite),
									819 => typeof(TintedGlass),
									820 => typeof(PowderSnow),
									821 => typeof(SculkSensor),
									822 => typeof(OxidizedCopper),
									823 => typeof(WeatheredCopper),
									824 => typeof(ExposedCopper),
									825 => typeof(CopperBlock),
									826 => typeof(CopperOre),
									827 => typeof(DeepslateCopperOre),
									828 => typeof(OxidizedCutCopper),
									829 => typeof(WeatheredCutCopper),
									830 => typeof(ExposedCutCopper),
									831 => typeof(CutCopper),
									832 => typeof(OxidizedCutCopperStairs),
									833 => typeof(WeatheredCutCopperStairs),
									834 => typeof(ExposedCutCopperStairs),
									835 => typeof(CutCopperStairs),
									836 => typeof(OxidizedCutCopperSlab),
									837 => typeof(WeatheredCutCopperSlab),
									838 => typeof(ExposedCutCopperSlab),
									839 => typeof(CutCopperSlab),
									840 => typeof(WaxedCopperBlock),
									841 => typeof(WaxedWeatheredCopper),
									842 => typeof(WaxedExposedCopper),
									843 => typeof(WaxedOxidizedCopper),
									844 => typeof(WaxedOxidizedCutCopper),
									845 => typeof(WaxedWeatheredCutCopper),
									846 => typeof(WaxedExposedCutCopper),
									847 => typeof(WaxedCutCopper),
									848 => typeof(WaxedOxidizedCutCopperStairs),
									849 => typeof(WaxedWeatheredCutCopperStairs),
									850 => typeof(WaxedExposedCutCopperStairs),
									851 => typeof(WaxedCutCopperStairs),
									852 => typeof(WaxedOxidizedCutCopperSlab),
									853 => typeof(WaxedWeatheredCutCopperSlab),
									854 => typeof(WaxedExposedCutCopperSlab),
									855 => typeof(WaxedCutCopperSlab),
									856 => typeof(LightningRod),
									857 => typeof(PointedDripstone),
									858 => typeof(DripstoneBlock),
									859 => typeof(CaveVines),
									860 => typeof(CaveVinesPlant),
									861 => typeof(SporeBlossom),
									862 => typeof(Azalea),
									863 => typeof(FloweringAzalea),
									864 => typeof(MossCarpet),
									865 => typeof(MossBlock),
									866 => typeof(BigDripleaf),
									867 => typeof(BigDripleafStem),
									868 => typeof(SmallDripleaf),
									869 => typeof(HangingRoots),
									870 => typeof(RootedDirt),
									871 => typeof(Deepslate),
									872 => typeof(CobbledDeepslate),
									873 => typeof(CobbledDeepslateStairs),
									874 => typeof(CobbledDeepslateSlab),
									875 => typeof(CobbledDeepslateWall),
									876 => typeof(PolishedDeepslate),
									877 => typeof(PolishedDeepslateStairs),
									878 => typeof(PolishedDeepslateSlab),
									879 => typeof(PolishedDeepslateWall),
									880 => typeof(DeepslateTiles),
									881 => typeof(DeepslateTileStairs),
									882 => typeof(DeepslateTileSlab),
									883 => typeof(DeepslateTileWall),
									884 => typeof(DeepslateBricks),
									885 => typeof(DeepslateBrickStairs),
									886 => typeof(DeepslateBrickSlab),
									887 => typeof(DeepslateBrickWall),
									888 => typeof(ChiseledDeepslate),
									889 => typeof(CrackedDeepslateBricks),
									890 => typeof(CrackedDeepslateTiles),
									891 => typeof(InfestedDeepslate),
									892 => typeof(SmoothBasalt),
									893 => typeof(RawIronBlock),
									894 => typeof(RawCopperBlock),
									895 => typeof(RawGoldBlock),
									896 => typeof(PottedAzaleaBush),
									897 => typeof(PottedFloweringAzaleaBush),
								_ => throw new ArgumentException("Block with id " + id + " not found!")
		};
	}

	public class Air : Block {
		public const int BlockId = 0;
		public const string BlockName = "air";
		public const string BlockDisplayName = "Air";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 0;
		public const int BlockMinStateId = 0;
		public const int BlockMaxStateId = 0;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Air () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Air (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Stone : Block {
		public const int BlockId = 1;
		public const string BlockName = "stone";
		public const string BlockDisplayName = "Stone";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 1;
		public const int BlockMinStateId = 1;
		public const int BlockMaxStateId = 1;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Stone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Stone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Granite : Block {
		public const int BlockId = 2;
		public const string BlockName = "granite";
		public const string BlockDisplayName = "Granite";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 2;
		public const int BlockMinStateId = 2;
		public const int BlockMaxStateId = 2;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Granite () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Granite (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedGranite : Block {
		public const int BlockId = 3;
		public const string BlockName = "polished_granite";
		public const string BlockDisplayName = "Polished Granite";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 3;
		public const int BlockMinStateId = 3;
		public const int BlockMaxStateId = 3;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PolishedGranite () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedGranite (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Diorite : Block {
		public const int BlockId = 4;
		public const string BlockName = "diorite";
		public const string BlockDisplayName = "Diorite";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4;
		public const int BlockMinStateId = 4;
		public const int BlockMaxStateId = 4;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Diorite () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Diorite (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedDiorite : Block {
		public const int BlockId = 5;
		public const string BlockName = "polished_diorite";
		public const string BlockDisplayName = "Polished Diorite";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5;
		public const int BlockMinStateId = 5;
		public const int BlockMaxStateId = 5;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PolishedDiorite () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedDiorite (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Andesite : Block {
		public const int BlockId = 6;
		public const string BlockName = "andesite";
		public const string BlockDisplayName = "Andesite";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6;
		public const int BlockMinStateId = 6;
		public const int BlockMaxStateId = 6;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Andesite () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Andesite (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedAndesite : Block {
		public const int BlockId = 7;
		public const string BlockName = "polished_andesite";
		public const string BlockDisplayName = "Polished Andesite";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7;
		public const int BlockMinStateId = 7;
		public const int BlockMaxStateId = 7;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PolishedAndesite () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedAndesite (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrassBlock : Block {
		public const int BlockId = 8;
		public const string BlockName = "grass_block";
		public const string BlockDisplayName = "Grass Block";

		public const float BlockHardness = 0.6F;
		public const float BlockResistance = 0.6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9;
		public const int BlockMinStateId = 8;
		public const int BlockMaxStateId = 9;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("snowy", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public GrassBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrassBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Dirt : Block {
		public const int BlockId = 9;
		public const string BlockName = "dirt";
		public const string BlockDisplayName = "Dirt";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 10;
		public const int BlockMinStateId = 10;
		public const int BlockMaxStateId = 10;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Dirt () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Dirt (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CoarseDirt : Block {
		public const int BlockId = 10;
		public const string BlockName = "coarse_dirt";
		public const string BlockDisplayName = "Coarse Dirt";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 11;
		public const int BlockMinStateId = 11;
		public const int BlockMaxStateId = 11;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CoarseDirt () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CoarseDirt (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Podzol : Block {
		public const int BlockId = 11;
		public const string BlockName = "podzol";
		public const string BlockDisplayName = "Podzol";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 13;
		public const int BlockMinStateId = 12;
		public const int BlockMaxStateId = 13;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("snowy", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Podzol () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Podzol (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Cobblestone : Block {
		public const int BlockId = 12;
		public const string BlockName = "cobblestone";
		public const string BlockDisplayName = "Cobblestone";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 14;
		public const int BlockMinStateId = 14;
		public const int BlockMaxStateId = 14;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Cobblestone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Cobblestone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakPlanks : Block {
		public const int BlockId = 13;
		public const string BlockName = "oak_planks";
		public const string BlockDisplayName = "Oak Planks";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15;
		public const int BlockMinStateId = 15;
		public const int BlockMaxStateId = 15;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public OakPlanks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakPlanks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SprucePlanks : Block {
		public const int BlockId = 14;
		public const string BlockName = "spruce_planks";
		public const string BlockDisplayName = "Spruce Planks";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 16;
		public const int BlockMinStateId = 16;
		public const int BlockMaxStateId = 16;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SprucePlanks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SprucePlanks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchPlanks : Block {
		public const int BlockId = 15;
		public const string BlockName = "birch_planks";
		public const string BlockDisplayName = "Birch Planks";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 17;
		public const int BlockMinStateId = 17;
		public const int BlockMaxStateId = 17;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BirchPlanks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchPlanks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JunglePlanks : Block {
		public const int BlockId = 16;
		public const string BlockName = "jungle_planks";
		public const string BlockDisplayName = "Jungle Planks";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 18;
		public const int BlockMinStateId = 18;
		public const int BlockMaxStateId = 18;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public JunglePlanks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JunglePlanks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaPlanks : Block {
		public const int BlockId = 17;
		public const string BlockName = "acacia_planks";
		public const string BlockDisplayName = "Acacia Planks";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 19;
		public const int BlockMinStateId = 19;
		public const int BlockMaxStateId = 19;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public AcaciaPlanks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaPlanks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakPlanks : Block {
		public const int BlockId = 18;
		public const string BlockName = "dark_oak_planks";
		public const string BlockDisplayName = "Dark Oak Planks";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 20;
		public const int BlockMinStateId = 20;
		public const int BlockMaxStateId = 20;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DarkOakPlanks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakPlanks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakSapling : Block {
		public const int BlockId = 19;
		public const string BlockName = "oak_sapling";
		public const string BlockDisplayName = "Oak Sapling";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 21;
		public const int BlockMinStateId = 21;
		public const int BlockMaxStateId = 22;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("stage", BlockStateProperty.BlockStatePropertyType.Int, 2, null), }, 0);	

		public OakSapling () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakSapling (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SpruceSapling : Block {
		public const int BlockId = 20;
		public const string BlockName = "spruce_sapling";
		public const string BlockDisplayName = "Spruce Sapling";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 23;
		public const int BlockMinStateId = 23;
		public const int BlockMaxStateId = 24;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("stage", BlockStateProperty.BlockStatePropertyType.Int, 2, null), }, 0);	

		public SpruceSapling () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SpruceSapling (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchSapling : Block {
		public const int BlockId = 21;
		public const string BlockName = "birch_sapling";
		public const string BlockDisplayName = "Birch Sapling";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 25;
		public const int BlockMinStateId = 25;
		public const int BlockMaxStateId = 26;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("stage", BlockStateProperty.BlockStatePropertyType.Int, 2, null), }, 0);	

		public BirchSapling () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchSapling (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JungleSapling : Block {
		public const int BlockId = 22;
		public const string BlockName = "jungle_sapling";
		public const string BlockDisplayName = "Jungle Sapling";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 27;
		public const int BlockMinStateId = 27;
		public const int BlockMaxStateId = 28;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("stage", BlockStateProperty.BlockStatePropertyType.Int, 2, null), }, 0);	

		public JungleSapling () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JungleSapling (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaSapling : Block {
		public const int BlockId = 23;
		public const string BlockName = "acacia_sapling";
		public const string BlockDisplayName = "Acacia Sapling";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 29;
		public const int BlockMinStateId = 29;
		public const int BlockMaxStateId = 30;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("stage", BlockStateProperty.BlockStatePropertyType.Int, 2, null), }, 0);	

		public AcaciaSapling () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaSapling (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakSapling : Block {
		public const int BlockId = 24;
		public const string BlockName = "dark_oak_sapling";
		public const string BlockDisplayName = "Dark Oak Sapling";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 31;
		public const int BlockMinStateId = 31;
		public const int BlockMaxStateId = 32;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("stage", BlockStateProperty.BlockStatePropertyType.Int, 2, null), }, 0);	

		public DarkOakSapling () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakSapling (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Bedrock : Block {
		public const int BlockId = 25;
		public const string BlockName = "bedrock";
		public const string BlockDisplayName = "Bedrock";

		public const float BlockHardness = 3.4028235E+38F;
		public const float BlockResistance = 3600000F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 33;
		public const int BlockMinStateId = 33;
		public const int BlockMaxStateId = 33;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Bedrock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Bedrock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Water : Block {
		public const int BlockId = 26;
		public const string BlockName = "water";
		public const string BlockDisplayName = "Water";

		public const float BlockHardness = 100F;
		public const float BlockResistance = 100F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 34;
		public const int BlockMinStateId = 34;
		public const int BlockMaxStateId = 49;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("level", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public Water () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Water (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Lava : Block {
		public const int BlockId = 27;
		public const string BlockName = "lava";
		public const string BlockDisplayName = "Lava";

		public const float BlockHardness = 100F;
		public const float BlockResistance = 100F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 50;
		public const int BlockMinStateId = 50;
		public const int BlockMaxStateId = 65;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("level", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public Lava () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Lava (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Sand : Block {
		public const int BlockId = 28;
		public const string BlockName = "sand";
		public const string BlockDisplayName = "Sand";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 66;
		public const int BlockMinStateId = 66;
		public const int BlockMaxStateId = 66;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Sand () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Sand (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedSand : Block {
		public const int BlockId = 29;
		public const string BlockName = "red_sand";
		public const string BlockDisplayName = "Red Sand";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 67;
		public const int BlockMinStateId = 67;
		public const int BlockMaxStateId = 67;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RedSand () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedSand (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Gravel : Block {
		public const int BlockId = 30;
		public const string BlockName = "gravel";
		public const string BlockDisplayName = "Gravel";

		public const float BlockHardness = 0.6F;
		public const float BlockResistance = 0.6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 68;
		public const int BlockMinStateId = 68;
		public const int BlockMaxStateId = 68;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Gravel () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Gravel (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GoldOre : Block {
		public const int BlockId = 31;
		public const string BlockName = "gold_ore";
		public const string BlockDisplayName = "Gold Ore";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 69;
		public const int BlockMinStateId = 69;
		public const int BlockMaxStateId = 69;
				public static readonly int[]? BlockHarvestTools = new int[] { 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GoldOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GoldOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateGoldOre : Block {
		public const int BlockId = 32;
		public const string BlockName = "deepslate_gold_ore";
		public const string BlockDisplayName = "Deepslate Gold Ore";

		public const float BlockHardness = 4.5F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 70;
		public const int BlockMinStateId = 70;
		public const int BlockMaxStateId = 70;
				public static readonly int[]? BlockHarvestTools = new int[] { 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeepslateGoldOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateGoldOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class IronOre : Block {
		public const int BlockId = 33;
		public const string BlockName = "iron_ore";
		public const string BlockDisplayName = "Iron Ore";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 71;
		public const int BlockMinStateId = 71;
		public const int BlockMaxStateId = 71;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public IronOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public IronOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateIronOre : Block {
		public const int BlockId = 34;
		public const string BlockName = "deepslate_iron_ore";
		public const string BlockDisplayName = "Deepslate Iron Ore";

		public const float BlockHardness = 4.5F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 72;
		public const int BlockMinStateId = 72;
		public const int BlockMaxStateId = 72;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeepslateIronOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateIronOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CoalOre : Block {
		public const int BlockId = 35;
		public const string BlockName = "coal_ore";
		public const string BlockDisplayName = "Coal Ore";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 73;
		public const int BlockMinStateId = 73;
		public const int BlockMaxStateId = 73;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CoalOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CoalOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateCoalOre : Block {
		public const int BlockId = 36;
		public const string BlockName = "deepslate_coal_ore";
		public const string BlockDisplayName = "Deepslate Coal Ore";

		public const float BlockHardness = 4.5F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 74;
		public const int BlockMinStateId = 74;
		public const int BlockMaxStateId = 74;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeepslateCoalOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateCoalOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class NetherGoldOre : Block {
		public const int BlockId = 37;
		public const string BlockName = "nether_gold_ore";
		public const string BlockDisplayName = "Nether Gold Ore";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 75;
		public const int BlockMinStateId = 75;
		public const int BlockMaxStateId = 75;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public NetherGoldOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public NetherGoldOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakLog : Block {
		public const int BlockId = 38;
		public const string BlockName = "oak_log";
		public const string BlockDisplayName = "Oak Log";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 77;
		public const int BlockMinStateId = 76;
		public const int BlockMaxStateId = 78;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public OakLog () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakLog (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SpruceLog : Block {
		public const int BlockId = 39;
		public const string BlockName = "spruce_log";
		public const string BlockDisplayName = "Spruce Log";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 80;
		public const int BlockMinStateId = 79;
		public const int BlockMaxStateId = 81;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public SpruceLog () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SpruceLog (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchLog : Block {
		public const int BlockId = 40;
		public const string BlockName = "birch_log";
		public const string BlockDisplayName = "Birch Log";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 83;
		public const int BlockMinStateId = 82;
		public const int BlockMaxStateId = 84;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public BirchLog () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchLog (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JungleLog : Block {
		public const int BlockId = 41;
		public const string BlockName = "jungle_log";
		public const string BlockDisplayName = "Jungle Log";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 86;
		public const int BlockMinStateId = 85;
		public const int BlockMaxStateId = 87;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public JungleLog () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JungleLog (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaLog : Block {
		public const int BlockId = 42;
		public const string BlockName = "acacia_log";
		public const string BlockDisplayName = "Acacia Log";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 89;
		public const int BlockMinStateId = 88;
		public const int BlockMaxStateId = 90;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public AcaciaLog () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaLog (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakLog : Block {
		public const int BlockId = 43;
		public const string BlockName = "dark_oak_log";
		public const string BlockDisplayName = "Dark Oak Log";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 92;
		public const int BlockMinStateId = 91;
		public const int BlockMaxStateId = 93;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public DarkOakLog () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakLog (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedSpruceLog : Block {
		public const int BlockId = 44;
		public const string BlockName = "stripped_spruce_log";
		public const string BlockDisplayName = "Stripped Spruce Log";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 95;
		public const int BlockMinStateId = 94;
		public const int BlockMaxStateId = 96;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedSpruceLog () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedSpruceLog (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedBirchLog : Block {
		public const int BlockId = 45;
		public const string BlockName = "stripped_birch_log";
		public const string BlockDisplayName = "Stripped Birch Log";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 98;
		public const int BlockMinStateId = 97;
		public const int BlockMaxStateId = 99;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedBirchLog () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedBirchLog (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedJungleLog : Block {
		public const int BlockId = 46;
		public const string BlockName = "stripped_jungle_log";
		public const string BlockDisplayName = "Stripped Jungle Log";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 101;
		public const int BlockMinStateId = 100;
		public const int BlockMaxStateId = 102;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedJungleLog () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedJungleLog (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedAcaciaLog : Block {
		public const int BlockId = 47;
		public const string BlockName = "stripped_acacia_log";
		public const string BlockDisplayName = "Stripped Acacia Log";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 104;
		public const int BlockMinStateId = 103;
		public const int BlockMaxStateId = 105;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedAcaciaLog () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedAcaciaLog (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedDarkOakLog : Block {
		public const int BlockId = 48;
		public const string BlockName = "stripped_dark_oak_log";
		public const string BlockDisplayName = "Stripped Dark Oak Log";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 107;
		public const int BlockMinStateId = 106;
		public const int BlockMaxStateId = 108;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedDarkOakLog () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedDarkOakLog (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedOakLog : Block {
		public const int BlockId = 49;
		public const string BlockName = "stripped_oak_log";
		public const string BlockDisplayName = "Stripped Oak Log";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 110;
		public const int BlockMinStateId = 109;
		public const int BlockMaxStateId = 111;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedOakLog () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedOakLog (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakWood : Block {
		public const int BlockId = 50;
		public const string BlockName = "oak_wood";
		public const string BlockDisplayName = "Oak Wood";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 113;
		public const int BlockMinStateId = 112;
		public const int BlockMaxStateId = 114;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public OakWood () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakWood (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SpruceWood : Block {
		public const int BlockId = 51;
		public const string BlockName = "spruce_wood";
		public const string BlockDisplayName = "Spruce Wood";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 116;
		public const int BlockMinStateId = 115;
		public const int BlockMaxStateId = 117;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public SpruceWood () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SpruceWood (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchWood : Block {
		public const int BlockId = 52;
		public const string BlockName = "birch_wood";
		public const string BlockDisplayName = "Birch Wood";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 119;
		public const int BlockMinStateId = 118;
		public const int BlockMaxStateId = 120;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public BirchWood () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchWood (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JungleWood : Block {
		public const int BlockId = 53;
		public const string BlockName = "jungle_wood";
		public const string BlockDisplayName = "Jungle Wood";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 122;
		public const int BlockMinStateId = 121;
		public const int BlockMaxStateId = 123;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public JungleWood () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JungleWood (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaWood : Block {
		public const int BlockId = 54;
		public const string BlockName = "acacia_wood";
		public const string BlockDisplayName = "Acacia Wood";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 125;
		public const int BlockMinStateId = 124;
		public const int BlockMaxStateId = 126;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public AcaciaWood () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaWood (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakWood : Block {
		public const int BlockId = 55;
		public const string BlockName = "dark_oak_wood";
		public const string BlockDisplayName = "Dark Oak Wood";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 128;
		public const int BlockMinStateId = 127;
		public const int BlockMaxStateId = 129;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public DarkOakWood () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakWood (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedOakWood : Block {
		public const int BlockId = 56;
		public const string BlockName = "stripped_oak_wood";
		public const string BlockDisplayName = "Stripped Oak Wood";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 131;
		public const int BlockMinStateId = 130;
		public const int BlockMaxStateId = 132;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedOakWood () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedOakWood (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedSpruceWood : Block {
		public const int BlockId = 57;
		public const string BlockName = "stripped_spruce_wood";
		public const string BlockDisplayName = "Stripped Spruce Wood";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 134;
		public const int BlockMinStateId = 133;
		public const int BlockMaxStateId = 135;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedSpruceWood () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedSpruceWood (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedBirchWood : Block {
		public const int BlockId = 58;
		public const string BlockName = "stripped_birch_wood";
		public const string BlockDisplayName = "Stripped Birch Wood";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 137;
		public const int BlockMinStateId = 136;
		public const int BlockMaxStateId = 138;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedBirchWood () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedBirchWood (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedJungleWood : Block {
		public const int BlockId = 59;
		public const string BlockName = "stripped_jungle_wood";
		public const string BlockDisplayName = "Stripped Jungle Wood";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 140;
		public const int BlockMinStateId = 139;
		public const int BlockMaxStateId = 141;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedJungleWood () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedJungleWood (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedAcaciaWood : Block {
		public const int BlockId = 60;
		public const string BlockName = "stripped_acacia_wood";
		public const string BlockDisplayName = "Stripped Acacia Wood";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 143;
		public const int BlockMinStateId = 142;
		public const int BlockMaxStateId = 144;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedAcaciaWood () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedAcaciaWood (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedDarkOakWood : Block {
		public const int BlockId = 61;
		public const string BlockName = "stripped_dark_oak_wood";
		public const string BlockDisplayName = "Stripped Dark Oak Wood";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 146;
		public const int BlockMinStateId = 145;
		public const int BlockMaxStateId = 147;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedDarkOakWood () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedDarkOakWood (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakLeaves : Block {
		public const int BlockId = 62;
		public const string BlockName = "oak_leaves";
		public const string BlockDisplayName = "Oak Leaves";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "leaves;mineable/hoe";
		public const int BlockDefaultState = 161;
		public const int BlockMinStateId = 148;
		public const int BlockMaxStateId = 161;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("distance", BlockStateProperty.BlockStatePropertyType.Enum, 7, new string[] { "1", "2", "3", "4", "5", "6", "7" }),new BlockStateProperty("persistent", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 13);	

		public OakLeaves () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakLeaves (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SpruceLeaves : Block {
		public const int BlockId = 63;
		public const string BlockName = "spruce_leaves";
		public const string BlockDisplayName = "Spruce Leaves";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "leaves;mineable/hoe";
		public const int BlockDefaultState = 175;
		public const int BlockMinStateId = 162;
		public const int BlockMaxStateId = 175;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("distance", BlockStateProperty.BlockStatePropertyType.Enum, 7, new string[] { "1", "2", "3", "4", "5", "6", "7" }),new BlockStateProperty("persistent", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 13);	

		public SpruceLeaves () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SpruceLeaves (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchLeaves : Block {
		public const int BlockId = 64;
		public const string BlockName = "birch_leaves";
		public const string BlockDisplayName = "Birch Leaves";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "leaves;mineable/hoe";
		public const int BlockDefaultState = 189;
		public const int BlockMinStateId = 176;
		public const int BlockMaxStateId = 189;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("distance", BlockStateProperty.BlockStatePropertyType.Enum, 7, new string[] { "1", "2", "3", "4", "5", "6", "7" }),new BlockStateProperty("persistent", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 13);	

		public BirchLeaves () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchLeaves (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JungleLeaves : Block {
		public const int BlockId = 65;
		public const string BlockName = "jungle_leaves";
		public const string BlockDisplayName = "Jungle Leaves";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "leaves;mineable/hoe";
		public const int BlockDefaultState = 203;
		public const int BlockMinStateId = 190;
		public const int BlockMaxStateId = 203;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("distance", BlockStateProperty.BlockStatePropertyType.Enum, 7, new string[] { "1", "2", "3", "4", "5", "6", "7" }),new BlockStateProperty("persistent", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 13);	

		public JungleLeaves () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JungleLeaves (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaLeaves : Block {
		public const int BlockId = 66;
		public const string BlockName = "acacia_leaves";
		public const string BlockDisplayName = "Acacia Leaves";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "leaves;mineable/hoe";
		public const int BlockDefaultState = 217;
		public const int BlockMinStateId = 204;
		public const int BlockMaxStateId = 217;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("distance", BlockStateProperty.BlockStatePropertyType.Enum, 7, new string[] { "1", "2", "3", "4", "5", "6", "7" }),new BlockStateProperty("persistent", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 13);	

		public AcaciaLeaves () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaLeaves (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakLeaves : Block {
		public const int BlockId = 67;
		public const string BlockName = "dark_oak_leaves";
		public const string BlockDisplayName = "Dark Oak Leaves";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "leaves;mineable/hoe";
		public const int BlockDefaultState = 231;
		public const int BlockMinStateId = 218;
		public const int BlockMaxStateId = 231;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("distance", BlockStateProperty.BlockStatePropertyType.Enum, 7, new string[] { "1", "2", "3", "4", "5", "6", "7" }),new BlockStateProperty("persistent", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 13);	

		public DarkOakLeaves () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakLeaves (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AzaleaLeaves : Block {
		public const int BlockId = 68;
		public const string BlockName = "azalea_leaves";
		public const string BlockDisplayName = "Azalea Leaves";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "leaves;mineable/hoe";
		public const int BlockDefaultState = 245;
		public const int BlockMinStateId = 232;
		public const int BlockMaxStateId = 245;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("distance", BlockStateProperty.BlockStatePropertyType.Enum, 7, new string[] { "1", "2", "3", "4", "5", "6", "7" }),new BlockStateProperty("persistent", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 13);	

		public AzaleaLeaves () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AzaleaLeaves (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class FloweringAzaleaLeaves : Block {
		public const int BlockId = 69;
		public const string BlockName = "flowering_azalea_leaves";
		public const string BlockDisplayName = "Flowering Azalea Leaves";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "leaves;mineable/axe;mineable/hoe";
		public const int BlockDefaultState = 259;
		public const int BlockMinStateId = 246;
		public const int BlockMaxStateId = 259;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("distance", BlockStateProperty.BlockStatePropertyType.Enum, 7, new string[] { "1", "2", "3", "4", "5", "6", "7" }),new BlockStateProperty("persistent", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 13);	

		public FloweringAzaleaLeaves () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public FloweringAzaleaLeaves (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Sponge : Block {
		public const int BlockId = 70;
		public const string BlockName = "sponge";
		public const string BlockDisplayName = "Sponge";

		public const float BlockHardness = 0.6F;
		public const float BlockResistance = 0.6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/hoe";
		public const int BlockDefaultState = 260;
		public const int BlockMinStateId = 260;
		public const int BlockMaxStateId = 260;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Sponge () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Sponge (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WetSponge : Block {
		public const int BlockId = 71;
		public const string BlockName = "wet_sponge";
		public const string BlockDisplayName = "Wet Sponge";

		public const float BlockHardness = 0.6F;
		public const float BlockResistance = 0.6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/hoe";
		public const int BlockDefaultState = 261;
		public const int BlockMinStateId = 261;
		public const int BlockMaxStateId = 261;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WetSponge () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WetSponge (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Glass : Block {
		public const int BlockId = 72;
		public const string BlockName = "glass";
		public const string BlockDisplayName = "Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 262;
		public const int BlockMinStateId = 262;
		public const int BlockMaxStateId = 262;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Glass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Glass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LapisOre : Block {
		public const int BlockId = 73;
		public const string BlockName = "lapis_ore";
		public const string BlockDisplayName = "Lapis Lazuli Ore";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 263;
		public const int BlockMinStateId = 263;
		public const int BlockMaxStateId = 263;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LapisOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LapisOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateLapisOre : Block {
		public const int BlockId = 74;
		public const string BlockName = "deepslate_lapis_ore";
		public const string BlockDisplayName = "Deepslate Lapis Lazuli Ore";

		public const float BlockHardness = 4.5F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 264;
		public const int BlockMinStateId = 264;
		public const int BlockMaxStateId = 264;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeepslateLapisOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateLapisOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LapisBlock : Block {
		public const int BlockId = 75;
		public const string BlockName = "lapis_block";
		public const string BlockDisplayName = "Block of Lapis Lazuli";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 265;
		public const int BlockMinStateId = 265;
		public const int BlockMaxStateId = 265;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LapisBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LapisBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Dispenser : Block {
		public const int BlockId = 76;
		public const string BlockName = "dispenser";
		public const string BlockDisplayName = "Dispenser";

		public const float BlockHardness = 3.5F;
		public const float BlockResistance = 3.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 267;
		public const int BlockMinStateId = 266;
		public const int BlockMaxStateId = 277;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }),new BlockStateProperty("triggered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Dispenser () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Dispenser (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Sandstone : Block {
		public const int BlockId = 77;
		public const string BlockName = "sandstone";
		public const string BlockDisplayName = "Sandstone";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 278;
		public const int BlockMinStateId = 278;
		public const int BlockMaxStateId = 278;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Sandstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Sandstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ChiseledSandstone : Block {
		public const int BlockId = 78;
		public const string BlockName = "chiseled_sandstone";
		public const string BlockDisplayName = "Chiseled Sandstone";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 279;
		public const int BlockMinStateId = 279;
		public const int BlockMaxStateId = 279;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public ChiseledSandstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ChiseledSandstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CutSandstone : Block {
		public const int BlockId = 79;
		public const string BlockName = "cut_sandstone";
		public const string BlockDisplayName = "Cut Sandstone";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 280;
		public const int BlockMinStateId = 280;
		public const int BlockMaxStateId = 280;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CutSandstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CutSandstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class NoteBlock : Block {
		public const int BlockId = 80;
		public const string BlockName = "note_block";
		public const string BlockDisplayName = "Note Block";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 282;
		public const int BlockMinStateId = 281;
		public const int BlockMaxStateId = 1080;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("instrument", BlockStateProperty.BlockStatePropertyType.Enum, 16, new string[] { "harp", "basedrum", "snare", "hat", "bass", "flute", "bell", "guitar", "chime", "xylophone", "iron_xylophone", "cow_bell", "didgeridoo", "bit", "banjo", "pling" }),new BlockStateProperty("note", BlockStateProperty.BlockStatePropertyType.Int, 25, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public NoteBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public NoteBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteBed : Block {
		public const int BlockId = 81;
		public const string BlockName = "white_bed";
		public const string BlockDisplayName = "White Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1084;
		public const int BlockMinStateId = 1081;
		public const int BlockMaxStateId = 1096;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public WhiteBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeBed : Block {
		public const int BlockId = 82;
		public const string BlockName = "orange_bed";
		public const string BlockDisplayName = "Orange Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1100;
		public const int BlockMinStateId = 1097;
		public const int BlockMaxStateId = 1112;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public OrangeBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaBed : Block {
		public const int BlockId = 83;
		public const string BlockName = "magenta_bed";
		public const string BlockDisplayName = "Magenta Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1116;
		public const int BlockMinStateId = 1113;
		public const int BlockMaxStateId = 1128;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public MagentaBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueBed : Block {
		public const int BlockId = 84;
		public const string BlockName = "light_blue_bed";
		public const string BlockDisplayName = "Light Blue Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1132;
		public const int BlockMinStateId = 1129;
		public const int BlockMaxStateId = 1144;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public LightBlueBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowBed : Block {
		public const int BlockId = 85;
		public const string BlockName = "yellow_bed";
		public const string BlockDisplayName = "Yellow Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1148;
		public const int BlockMinStateId = 1145;
		public const int BlockMaxStateId = 1160;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public YellowBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeBed : Block {
		public const int BlockId = 86;
		public const string BlockName = "lime_bed";
		public const string BlockDisplayName = "Lime Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1164;
		public const int BlockMinStateId = 1161;
		public const int BlockMaxStateId = 1176;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public LimeBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkBed : Block {
		public const int BlockId = 87;
		public const string BlockName = "pink_bed";
		public const string BlockDisplayName = "Pink Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1180;
		public const int BlockMinStateId = 1177;
		public const int BlockMaxStateId = 1192;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public PinkBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayBed : Block {
		public const int BlockId = 88;
		public const string BlockName = "gray_bed";
		public const string BlockDisplayName = "Gray Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1196;
		public const int BlockMinStateId = 1193;
		public const int BlockMaxStateId = 1208;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public GrayBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayBed : Block {
		public const int BlockId = 89;
		public const string BlockName = "light_gray_bed";
		public const string BlockDisplayName = "Light Gray Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1212;
		public const int BlockMinStateId = 1209;
		public const int BlockMaxStateId = 1224;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public LightGrayBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanBed : Block {
		public const int BlockId = 90;
		public const string BlockName = "cyan_bed";
		public const string BlockDisplayName = "Cyan Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1228;
		public const int BlockMinStateId = 1225;
		public const int BlockMaxStateId = 1240;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public CyanBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleBed : Block {
		public const int BlockId = 91;
		public const string BlockName = "purple_bed";
		public const string BlockDisplayName = "Purple Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1244;
		public const int BlockMinStateId = 1241;
		public const int BlockMaxStateId = 1256;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public PurpleBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueBed : Block {
		public const int BlockId = 92;
		public const string BlockName = "blue_bed";
		public const string BlockDisplayName = "Blue Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1260;
		public const int BlockMinStateId = 1257;
		public const int BlockMaxStateId = 1272;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public BlueBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownBed : Block {
		public const int BlockId = 93;
		public const string BlockName = "brown_bed";
		public const string BlockDisplayName = "Brown Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1276;
		public const int BlockMinStateId = 1273;
		public const int BlockMaxStateId = 1288;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public BrownBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenBed : Block {
		public const int BlockId = 94;
		public const string BlockName = "green_bed";
		public const string BlockDisplayName = "Green Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1292;
		public const int BlockMinStateId = 1289;
		public const int BlockMaxStateId = 1304;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public GreenBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedBed : Block {
		public const int BlockId = 95;
		public const string BlockName = "red_bed";
		public const string BlockDisplayName = "Red Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1308;
		public const int BlockMinStateId = 1305;
		public const int BlockMaxStateId = 1320;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public RedBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackBed : Block {
		public const int BlockId = 96;
		public const string BlockName = "black_bed";
		public const string BlockDisplayName = "Black Bed";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1324;
		public const int BlockMinStateId = 1321;
		public const int BlockMaxStateId = 1336;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("occupied", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("part", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "head", "foot" }), }, 3);	

		public BlackBed () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackBed (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PoweredRail : Block {
		public const int BlockId = 97;
		public const string BlockName = "powered_rail";
		public const string BlockDisplayName = "Powered Rail";

		public const float BlockHardness = 0.7F;
		public const float BlockResistance = 0.7F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 1350;
		public const int BlockMinStateId = 1337;
		public const int BlockMaxStateId = 1360;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north_south", "east_west", "ascending_east", "ascending_west", "ascending_north", "ascending_south" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 13);	

		public PoweredRail () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PoweredRail (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DetectorRail : Block {
		public const int BlockId = 98;
		public const string BlockName = "detector_rail";
		public const string BlockDisplayName = "Detector Rail";

		public const float BlockHardness = 0.7F;
		public const float BlockResistance = 0.7F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 1374;
		public const int BlockMinStateId = 1361;
		public const int BlockMaxStateId = 1384;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north_south", "east_west", "ascending_east", "ascending_west", "ascending_north", "ascending_south" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 13);	

		public DetectorRail () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DetectorRail (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StickyPiston : Block {
		public const int BlockId = 99;
		public const string BlockName = "sticky_piston";
		public const string BlockDisplayName = "Sticky Piston";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 1.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 1391;
		public const int BlockMinStateId = 1385;
		public const int BlockMaxStateId = 1396;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("extended", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 6);	

		public StickyPiston () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StickyPiston (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Cobweb : Block {
		public const int BlockId = 100;
		public const string BlockName = "cobweb";
		public const string BlockDisplayName = "Cobweb";

		public const float BlockHardness = 4F;
		public const float BlockResistance = 4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "coweb";
		public const int BlockDefaultState = 1397;
		public const int BlockMinStateId = 1397;
		public const int BlockMaxStateId = 1397;
				public static readonly int[]? BlockHarvestTools = new int[] { 699, 704, 709, 714, 719, 724, 848 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Cobweb () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Cobweb (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Grass : Block {
		public const int BlockId = 101;
		public const string BlockName = "grass";
		public const string BlockDisplayName = "Grass";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1398;
		public const int BlockMinStateId = 1398;
		public const int BlockMaxStateId = 1398;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Grass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Grass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Fern : Block {
		public const int BlockId = 102;
		public const string BlockName = "fern";
		public const string BlockDisplayName = "Fern";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1399;
		public const int BlockMinStateId = 1399;
		public const int BlockMaxStateId = 1399;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Fern () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Fern (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadBush : Block {
		public const int BlockId = 103;
		public const string BlockName = "dead_bush";
		public const string BlockDisplayName = "Dead Bush";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1400;
		public const int BlockMinStateId = 1400;
		public const int BlockMaxStateId = 1400;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeadBush () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadBush (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Seagrass : Block {
		public const int BlockId = 104;
		public const string BlockName = "seagrass";
		public const string BlockDisplayName = "Seagrass";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1401;
		public const int BlockMinStateId = 1401;
		public const int BlockMaxStateId = 1401;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Seagrass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Seagrass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class TallSeagrass : Block {
		public const int BlockId = 105;
		public const string BlockName = "tall_seagrass";
		public const string BlockDisplayName = "Tall Seagrass";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1403;
		public const int BlockMinStateId = 1402;
		public const int BlockMaxStateId = 1403;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }), }, 1);	

		public TallSeagrass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public TallSeagrass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Piston : Block {
		public const int BlockId = 106;
		public const string BlockName = "piston";
		public const string BlockDisplayName = "Piston";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 1.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 1410;
		public const int BlockMinStateId = 1404;
		public const int BlockMaxStateId = 1415;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("extended", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 6);	

		public Piston () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Piston (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PistonHead : Block {
		public const int BlockId = 107;
		public const string BlockName = "piston_head";
		public const string BlockDisplayName = "Piston Head";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 1.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 1418;
		public const int BlockMinStateId = 1416;
		public const int BlockMaxStateId = 1439;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }),new BlockStateProperty("short", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "normal", "sticky" }), }, 2);	

		public PistonHead () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PistonHead (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteWool : Block {
		public const int BlockId = 108;
		public const string BlockName = "white_wool";
		public const string BlockDisplayName = "White Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1440;
		public const int BlockMinStateId = 1440;
		public const int BlockMaxStateId = 1440;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WhiteWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeWool : Block {
		public const int BlockId = 109;
		public const string BlockName = "orange_wool";
		public const string BlockDisplayName = "Orange Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1441;
		public const int BlockMinStateId = 1441;
		public const int BlockMaxStateId = 1441;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public OrangeWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaWool : Block {
		public const int BlockId = 110;
		public const string BlockName = "magenta_wool";
		public const string BlockDisplayName = "Magenta Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1442;
		public const int BlockMinStateId = 1442;
		public const int BlockMaxStateId = 1442;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public MagentaWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueWool : Block {
		public const int BlockId = 111;
		public const string BlockName = "light_blue_wool";
		public const string BlockDisplayName = "Light Blue Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1443;
		public const int BlockMinStateId = 1443;
		public const int BlockMaxStateId = 1443;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LightBlueWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowWool : Block {
		public const int BlockId = 112;
		public const string BlockName = "yellow_wool";
		public const string BlockDisplayName = "Yellow Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1444;
		public const int BlockMinStateId = 1444;
		public const int BlockMaxStateId = 1444;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public YellowWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeWool : Block {
		public const int BlockId = 113;
		public const string BlockName = "lime_wool";
		public const string BlockDisplayName = "Lime Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1445;
		public const int BlockMinStateId = 1445;
		public const int BlockMaxStateId = 1445;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LimeWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkWool : Block {
		public const int BlockId = 114;
		public const string BlockName = "pink_wool";
		public const string BlockDisplayName = "Pink Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1446;
		public const int BlockMinStateId = 1446;
		public const int BlockMaxStateId = 1446;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PinkWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayWool : Block {
		public const int BlockId = 115;
		public const string BlockName = "gray_wool";
		public const string BlockDisplayName = "Gray Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1447;
		public const int BlockMinStateId = 1447;
		public const int BlockMaxStateId = 1447;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GrayWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayWool : Block {
		public const int BlockId = 116;
		public const string BlockName = "light_gray_wool";
		public const string BlockDisplayName = "Light Gray Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1448;
		public const int BlockMinStateId = 1448;
		public const int BlockMaxStateId = 1448;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LightGrayWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanWool : Block {
		public const int BlockId = 117;
		public const string BlockName = "cyan_wool";
		public const string BlockDisplayName = "Cyan Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1449;
		public const int BlockMinStateId = 1449;
		public const int BlockMaxStateId = 1449;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CyanWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleWool : Block {
		public const int BlockId = 118;
		public const string BlockName = "purple_wool";
		public const string BlockDisplayName = "Purple Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1450;
		public const int BlockMinStateId = 1450;
		public const int BlockMaxStateId = 1450;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PurpleWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueWool : Block {
		public const int BlockId = 119;
		public const string BlockName = "blue_wool";
		public const string BlockDisplayName = "Blue Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1451;
		public const int BlockMinStateId = 1451;
		public const int BlockMaxStateId = 1451;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlueWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownWool : Block {
		public const int BlockId = 120;
		public const string BlockName = "brown_wool";
		public const string BlockDisplayName = "Brown Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1452;
		public const int BlockMinStateId = 1452;
		public const int BlockMaxStateId = 1452;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BrownWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenWool : Block {
		public const int BlockId = 121;
		public const string BlockName = "green_wool";
		public const string BlockDisplayName = "Green Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1453;
		public const int BlockMinStateId = 1453;
		public const int BlockMaxStateId = 1453;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GreenWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedWool : Block {
		public const int BlockId = 122;
		public const string BlockName = "red_wool";
		public const string BlockDisplayName = "Red Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1454;
		public const int BlockMinStateId = 1454;
		public const int BlockMaxStateId = 1454;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RedWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackWool : Block {
		public const int BlockId = 123;
		public const string BlockName = "black_wool";
		public const string BlockDisplayName = "Black Wool";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "wool";
		public const int BlockDefaultState = 1455;
		public const int BlockMinStateId = 1455;
		public const int BlockMaxStateId = 1455;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlackWool () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackWool (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MovingPiston : Block {
		public const int BlockId = 124;
		public const string BlockName = "moving_piston";
		public const string BlockDisplayName = "Moving Piston";

		public const float BlockHardness = 3.4028235E+38F;
		public const float BlockResistance = -1F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1456;
		public const int BlockMinStateId = 1456;
		public const int BlockMaxStateId = 1467;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }),new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "normal", "sticky" }), }, 0);	

		public MovingPiston () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MovingPiston (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Dandelion : Block {
		public const int BlockId = 125;
		public const string BlockName = "dandelion";
		public const string BlockDisplayName = "Dandelion";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1468;
		public const int BlockMinStateId = 1468;
		public const int BlockMaxStateId = 1468;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Dandelion () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Dandelion (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Poppy : Block {
		public const int BlockId = 126;
		public const string BlockName = "poppy";
		public const string BlockDisplayName = "Poppy";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1469;
		public const int BlockMinStateId = 1469;
		public const int BlockMaxStateId = 1469;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Poppy () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Poppy (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueOrchid : Block {
		public const int BlockId = 127;
		public const string BlockName = "blue_orchid";
		public const string BlockDisplayName = "Blue Orchid";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1470;
		public const int BlockMinStateId = 1470;
		public const int BlockMaxStateId = 1470;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlueOrchid () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueOrchid (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Allium : Block {
		public const int BlockId = 128;
		public const string BlockName = "allium";
		public const string BlockDisplayName = "Allium";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1471;
		public const int BlockMinStateId = 1471;
		public const int BlockMaxStateId = 1471;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Allium () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Allium (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AzureBluet : Block {
		public const int BlockId = 129;
		public const string BlockName = "azure_bluet";
		public const string BlockDisplayName = "Azure Bluet";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1472;
		public const int BlockMinStateId = 1472;
		public const int BlockMaxStateId = 1472;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public AzureBluet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AzureBluet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedTulip : Block {
		public const int BlockId = 130;
		public const string BlockName = "red_tulip";
		public const string BlockDisplayName = "Red Tulip";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1473;
		public const int BlockMinStateId = 1473;
		public const int BlockMaxStateId = 1473;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RedTulip () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedTulip (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeTulip : Block {
		public const int BlockId = 131;
		public const string BlockName = "orange_tulip";
		public const string BlockDisplayName = "Orange Tulip";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1474;
		public const int BlockMinStateId = 1474;
		public const int BlockMaxStateId = 1474;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public OrangeTulip () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeTulip (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteTulip : Block {
		public const int BlockId = 132;
		public const string BlockName = "white_tulip";
		public const string BlockDisplayName = "White Tulip";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1475;
		public const int BlockMinStateId = 1475;
		public const int BlockMaxStateId = 1475;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WhiteTulip () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteTulip (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkTulip : Block {
		public const int BlockId = 133;
		public const string BlockName = "pink_tulip";
		public const string BlockDisplayName = "Pink Tulip";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1476;
		public const int BlockMinStateId = 1476;
		public const int BlockMaxStateId = 1476;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PinkTulip () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkTulip (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OxeyeDaisy : Block {
		public const int BlockId = 134;
		public const string BlockName = "oxeye_daisy";
		public const string BlockDisplayName = "Oxeye Daisy";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1477;
		public const int BlockMinStateId = 1477;
		public const int BlockMaxStateId = 1477;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public OxeyeDaisy () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OxeyeDaisy (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Cornflower : Block {
		public const int BlockId = 135;
		public const string BlockName = "cornflower";
		public const string BlockDisplayName = "Cornflower";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1478;
		public const int BlockMinStateId = 1478;
		public const int BlockMaxStateId = 1478;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Cornflower () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Cornflower (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WitherRose : Block {
		public const int BlockId = 136;
		public const string BlockName = "wither_rose";
		public const string BlockDisplayName = "Wither Rose";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1479;
		public const int BlockMinStateId = 1479;
		public const int BlockMaxStateId = 1479;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WitherRose () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WitherRose (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LilyOfTheValley : Block {
		public const int BlockId = 137;
		public const string BlockName = "lily_of_the_valley";
		public const string BlockDisplayName = "Lily of the Valley";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1480;
		public const int BlockMinStateId = 1480;
		public const int BlockMaxStateId = 1480;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LilyOfTheValley () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LilyOfTheValley (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownMushroom : Block {
		public const int BlockId = 138;
		public const string BlockName = "brown_mushroom";
		public const string BlockDisplayName = "Brown Mushroom";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 1;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1481;
		public const int BlockMinStateId = 1481;
		public const int BlockMaxStateId = 1481;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BrownMushroom () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownMushroom (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedMushroom : Block {
		public const int BlockId = 139;
		public const string BlockName = "red_mushroom";
		public const string BlockDisplayName = "Red Mushroom";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 1482;
		public const int BlockMinStateId = 1482;
		public const int BlockMaxStateId = 1482;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RedMushroom () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedMushroom (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GoldBlock : Block {
		public const int BlockId = 140;
		public const string BlockName = "gold_block";
		public const string BlockDisplayName = "Block of Gold";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 1483;
		public const int BlockMinStateId = 1483;
		public const int BlockMaxStateId = 1483;
				public static readonly int[]? BlockHarvestTools = new int[] { 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GoldBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GoldBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class IronBlock : Block {
		public const int BlockId = 141;
		public const string BlockName = "iron_block";
		public const string BlockDisplayName = "Block of Iron";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 1484;
		public const int BlockMinStateId = 1484;
		public const int BlockMaxStateId = 1484;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public IronBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public IronBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Bricks : Block {
		public const int BlockId = 142;
		public const string BlockName = "bricks";
		public const string BlockDisplayName = "Bricks";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 1485;
		public const int BlockMinStateId = 1485;
		public const int BlockMaxStateId = 1485;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Bricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Bricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Tnt : Block {
		public const int BlockId = 143;
		public const string BlockName = "tnt";
		public const string BlockDisplayName = "TNT";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1487;
		public const int BlockMinStateId = 1486;
		public const int BlockMaxStateId = 1487;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("unstable", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Tnt () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Tnt (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Bookshelf : Block {
		public const int BlockId = 144;
		public const string BlockName = "bookshelf";
		public const string BlockDisplayName = "Bookshelf";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 1.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 1488;
		public const int BlockMinStateId = 1488;
		public const int BlockMaxStateId = 1488;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Bookshelf () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Bookshelf (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MossyCobblestone : Block {
		public const int BlockId = 145;
		public const string BlockName = "mossy_cobblestone";
		public const string BlockDisplayName = "Mossy Cobblestone";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 1489;
		public const int BlockMinStateId = 1489;
		public const int BlockMaxStateId = 1489;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public MossyCobblestone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MossyCobblestone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Obsidian : Block {
		public const int BlockId = 146;
		public const string BlockName = "obsidian";
		public const string BlockDisplayName = "Obsidian";

		public const float BlockHardness = 50F;
		public const float BlockResistance = 1200F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 1490;
		public const int BlockMinStateId = 1490;
		public const int BlockMaxStateId = 1490;
				public static readonly int[]? BlockHarvestTools = new int[] { 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Obsidian () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Obsidian (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Torch : Block {
		public const int BlockId = 147;
		public const string BlockName = "torch";
		public const string BlockDisplayName = "Torch";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 14;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1491;
		public const int BlockMinStateId = 1491;
		public const int BlockMaxStateId = 1491;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Torch () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Torch (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WallTorch : Block {
		public const int BlockId = 148;
		public const string BlockName = "wall_torch";
		public const string BlockDisplayName = "Wall Torch";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 14;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1492;
		public const int BlockMinStateId = 1492;
		public const int BlockMaxStateId = 1495;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public WallTorch () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WallTorch (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Fire : Block {
		public const int BlockId = 149;
		public const string BlockName = "fire";
		public const string BlockDisplayName = "Fire";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 1527;
		public const int BlockMinStateId = 1496;
		public const int BlockMaxStateId = 2007;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 16, null),new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public Fire () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Fire (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SoulFire : Block {
		public const int BlockId = 150;
		public const string BlockName = "soul_fire";
		public const string BlockDisplayName = "Soul Fire";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 10;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 2008;
		public const int BlockMinStateId = 2008;
		public const int BlockMaxStateId = 2008;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SoulFire () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SoulFire (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Spawner : Block {
		public const int BlockId = 151;
		public const string BlockName = "spawner";
		public const string BlockDisplayName = "Spawner";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 2009;
		public const int BlockMinStateId = 2009;
		public const int BlockMaxStateId = 2009;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Spawner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Spawner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakStairs : Block {
		public const int BlockId = 152;
		public const string BlockName = "oak_stairs";
		public const string BlockDisplayName = "Oak Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 2021;
		public const int BlockMinStateId = 2010;
		public const int BlockMaxStateId = 2089;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public OakStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Chest : Block {
		public const int BlockId = 153;
		public const string BlockName = "chest";
		public const string BlockDisplayName = "Chest";

		public const float BlockHardness = 2.5F;
		public const float BlockResistance = 2.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 2091;
		public const int BlockMinStateId = 2090;
		public const int BlockMaxStateId = 2113;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "single", "left", "right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Chest () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Chest (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedstoneWire : Block {
		public const int BlockId = 154;
		public const string BlockName = "redstone_wire";
		public const string BlockDisplayName = "Redstone Wire";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 3274;
		public const int BlockMinStateId = 2114;
		public const int BlockMaxStateId = 3409;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "up", "side", "none" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "up", "side", "none" }),new BlockStateProperty("power", BlockStateProperty.BlockStatePropertyType.Int, 16, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "up", "side", "none" }),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "up", "side", "none" }), }, 1160);	

		public RedstoneWire () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedstoneWire (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DiamondOre : Block {
		public const int BlockId = 155;
		public const string BlockName = "diamond_ore";
		public const string BlockDisplayName = "Diamond Ore";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 3410;
		public const int BlockMinStateId = 3410;
		public const int BlockMaxStateId = 3410;
				public static readonly int[]? BlockHarvestTools = new int[] { 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DiamondOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DiamondOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateDiamondOre : Block {
		public const int BlockId = 156;
		public const string BlockName = "deepslate_diamond_ore";
		public const string BlockDisplayName = "Deepslate Diamond Ore";

		public const float BlockHardness = 4.5F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 3411;
		public const int BlockMinStateId = 3411;
		public const int BlockMaxStateId = 3411;
				public static readonly int[]? BlockHarvestTools = new int[] { 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeepslateDiamondOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateDiamondOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DiamondBlock : Block {
		public const int BlockId = 157;
		public const string BlockName = "diamond_block";
		public const string BlockDisplayName = "Block of Diamond";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 3412;
		public const int BlockMinStateId = 3412;
		public const int BlockMaxStateId = 3412;
				public static readonly int[]? BlockHarvestTools = new int[] { 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DiamondBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DiamondBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CraftingTable : Block {
		public const int BlockId = 158;
		public const string BlockName = "crafting_table";
		public const string BlockDisplayName = "Crafting Table";

		public const float BlockHardness = 2.5F;
		public const float BlockResistance = 2.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3413;
		public const int BlockMinStateId = 3413;
		public const int BlockMaxStateId = 3413;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CraftingTable () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CraftingTable (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Wheat : Block {
		public const int BlockId = 159;
		public const string BlockName = "wheat";
		public const string BlockDisplayName = "Wheat Crops";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 3414;
		public const int BlockMinStateId = 3414;
		public const int BlockMaxStateId = 3421;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 8, null), }, 0);	

		public Wheat () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Wheat (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Farmland : Block {
		public const int BlockId = 160;
		public const string BlockName = "farmland";
		public const string BlockDisplayName = "Farmland";

		public const float BlockHardness = 0.6F;
		public const float BlockResistance = 0.6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 3422;
		public const int BlockMinStateId = 3422;
		public const int BlockMaxStateId = 3429;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("moisture", BlockStateProperty.BlockStatePropertyType.Int, 8, null), }, 0);	

		public Farmland () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Farmland (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Furnace : Block {
		public const int BlockId = 161;
		public const string BlockName = "furnace";
		public const string BlockDisplayName = "Furnace";

		public const float BlockHardness = 3.5F;
		public const float BlockResistance = 3.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 3431;
		public const int BlockMinStateId = 3430;
		public const int BlockMaxStateId = 3437;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Furnace () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Furnace (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakSign : Block {
		public const int BlockId = 162;
		public const string BlockName = "oak_sign";
		public const string BlockDisplayName = "Oak Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3439;
		public const int BlockMinStateId = 3438;
		public const int BlockMaxStateId = 3469;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public OakSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SpruceSign : Block {
		public const int BlockId = 163;
		public const string BlockName = "spruce_sign";
		public const string BlockDisplayName = "Spruce Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3471;
		public const int BlockMinStateId = 3470;
		public const int BlockMaxStateId = 3501;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public SpruceSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SpruceSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchSign : Block {
		public const int BlockId = 164;
		public const string BlockName = "birch_sign";
		public const string BlockDisplayName = "Birch Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3503;
		public const int BlockMinStateId = 3502;
		public const int BlockMaxStateId = 3533;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public BirchSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaSign : Block {
		public const int BlockId = 165;
		public const string BlockName = "acacia_sign";
		public const string BlockDisplayName = "Acacia Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3535;
		public const int BlockMinStateId = 3534;
		public const int BlockMaxStateId = 3565;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public AcaciaSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JungleSign : Block {
		public const int BlockId = 166;
		public const string BlockName = "jungle_sign";
		public const string BlockDisplayName = "Jungle Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3567;
		public const int BlockMinStateId = 3566;
		public const int BlockMaxStateId = 3597;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public JungleSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JungleSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakSign : Block {
		public const int BlockId = 167;
		public const string BlockName = "dark_oak_sign";
		public const string BlockDisplayName = "Dark Oak Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3599;
		public const int BlockMinStateId = 3598;
		public const int BlockMaxStateId = 3629;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public DarkOakSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakDoor : Block {
		public const int BlockId = 168;
		public const string BlockName = "oak_door";
		public const string BlockDisplayName = "Oak Door";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3641;
		public const int BlockMinStateId = 3630;
		public const int BlockMaxStateId = 3693;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }),new BlockStateProperty("hinge", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "left", "right" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public OakDoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakDoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Ladder : Block {
		public const int BlockId = 169;
		public const string BlockName = "ladder";
		public const string BlockDisplayName = "Ladder";

		public const float BlockHardness = 0.4F;
		public const float BlockResistance = 0.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3695;
		public const int BlockMinStateId = 3694;
		public const int BlockMaxStateId = 3701;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Ladder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Ladder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Rail : Block {
		public const int BlockId = 170;
		public const string BlockName = "rail";
		public const string BlockDisplayName = "Rail";

		public const float BlockHardness = 0.7F;
		public const float BlockResistance = 0.7F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 3703;
		public const int BlockMinStateId = 3702;
		public const int BlockMaxStateId = 3721;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 10, new string[] { "north_south", "east_west", "ascending_east", "ascending_west", "ascending_north", "ascending_south", "south_east", "south_west", "north_west", "north_east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Rail () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Rail (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CobblestoneStairs : Block {
		public const int BlockId = 171;
		public const string BlockName = "cobblestone_stairs";
		public const string BlockDisplayName = "Cobblestone Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 3733;
		public const int BlockMinStateId = 3722;
		public const int BlockMaxStateId = 3801;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public CobblestoneStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CobblestoneStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakWallSign : Block {
		public const int BlockId = 172;
		public const string BlockName = "oak_wall_sign";
		public const string BlockDisplayName = "Oak Wall Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3803;
		public const int BlockMinStateId = 3802;
		public const int BlockMaxStateId = 3809;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public OakWallSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakWallSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SpruceWallSign : Block {
		public const int BlockId = 173;
		public const string BlockName = "spruce_wall_sign";
		public const string BlockDisplayName = "Spruce Wall Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3811;
		public const int BlockMinStateId = 3810;
		public const int BlockMaxStateId = 3817;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public SpruceWallSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SpruceWallSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchWallSign : Block {
		public const int BlockId = 174;
		public const string BlockName = "birch_wall_sign";
		public const string BlockDisplayName = "Birch Wall Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3819;
		public const int BlockMinStateId = 3818;
		public const int BlockMaxStateId = 3825;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public BirchWallSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchWallSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaWallSign : Block {
		public const int BlockId = 175;
		public const string BlockName = "acacia_wall_sign";
		public const string BlockDisplayName = "Acacia Wall Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3827;
		public const int BlockMinStateId = 3826;
		public const int BlockMaxStateId = 3833;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public AcaciaWallSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaWallSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JungleWallSign : Block {
		public const int BlockId = 176;
		public const string BlockName = "jungle_wall_sign";
		public const string BlockDisplayName = "Jungle Wall Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3835;
		public const int BlockMinStateId = 3834;
		public const int BlockMaxStateId = 3841;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public JungleWallSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JungleWallSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakWallSign : Block {
		public const int BlockId = 177;
		public const string BlockName = "dark_oak_wall_sign";
		public const string BlockDisplayName = "Dark Oak Wall Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3843;
		public const int BlockMinStateId = 3842;
		public const int BlockMaxStateId = 3849;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public DarkOakWallSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakWallSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Lever : Block {
		public const int BlockId = 178;
		public const string BlockName = "lever";
		public const string BlockDisplayName = "Lever";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 3859;
		public const int BlockMinStateId = 3850;
		public const int BlockMaxStateId = 3873;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("face", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "floor", "wall", "ceiling" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public Lever () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Lever (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StonePressurePlate : Block {
		public const int BlockId = 179;
		public const string BlockName = "stone_pressure_plate";
		public const string BlockDisplayName = "Stone Pressure Plate";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 3875;
		public const int BlockMinStateId = 3874;
		public const int BlockMaxStateId = 3875;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public StonePressurePlate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StonePressurePlate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class IronDoor : Block {
		public const int BlockId = 180;
		public const string BlockName = "iron_door";
		public const string BlockDisplayName = "Iron Door";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 3887;
		public const int BlockMinStateId = 3876;
		public const int BlockMaxStateId = 3939;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }),new BlockStateProperty("hinge", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "left", "right" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public IronDoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public IronDoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakPressurePlate : Block {
		public const int BlockId = 181;
		public const string BlockName = "oak_pressure_plate";
		public const string BlockDisplayName = "Oak Pressure Plate";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3941;
		public const int BlockMinStateId = 3940;
		public const int BlockMaxStateId = 3941;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public OakPressurePlate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakPressurePlate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SprucePressurePlate : Block {
		public const int BlockId = 182;
		public const string BlockName = "spruce_pressure_plate";
		public const string BlockDisplayName = "Spruce Pressure Plate";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3943;
		public const int BlockMinStateId = 3942;
		public const int BlockMaxStateId = 3943;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public SprucePressurePlate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SprucePressurePlate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchPressurePlate : Block {
		public const int BlockId = 183;
		public const string BlockName = "birch_pressure_plate";
		public const string BlockDisplayName = "Birch Pressure Plate";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3945;
		public const int BlockMinStateId = 3944;
		public const int BlockMaxStateId = 3945;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public BirchPressurePlate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchPressurePlate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JunglePressurePlate : Block {
		public const int BlockId = 184;
		public const string BlockName = "jungle_pressure_plate";
		public const string BlockDisplayName = "Jungle Pressure Plate";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3947;
		public const int BlockMinStateId = 3946;
		public const int BlockMaxStateId = 3947;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public JunglePressurePlate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JunglePressurePlate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaPressurePlate : Block {
		public const int BlockId = 185;
		public const string BlockName = "acacia_pressure_plate";
		public const string BlockDisplayName = "Acacia Pressure Plate";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3949;
		public const int BlockMinStateId = 3948;
		public const int BlockMaxStateId = 3949;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public AcaciaPressurePlate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaPressurePlate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakPressurePlate : Block {
		public const int BlockId = 186;
		public const string BlockName = "dark_oak_pressure_plate";
		public const string BlockDisplayName = "Dark Oak Pressure Plate";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 3951;
		public const int BlockMinStateId = 3950;
		public const int BlockMaxStateId = 3951;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public DarkOakPressurePlate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakPressurePlate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedstoneOre : Block {
		public const int BlockId = 187;
		public const string BlockName = "redstone_ore";
		public const string BlockDisplayName = "Redstone Ore";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 3953;
		public const int BlockMinStateId = 3952;
		public const int BlockMaxStateId = 3953;
				public static readonly int[]? BlockHarvestTools = new int[] { 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public RedstoneOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedstoneOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateRedstoneOre : Block {
		public const int BlockId = 188;
		public const string BlockName = "deepslate_redstone_ore";
		public const string BlockDisplayName = "Deepslate Redstone Ore";

		public const float BlockHardness = 4.5F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 3955;
		public const int BlockMinStateId = 3954;
		public const int BlockMaxStateId = 3955;
				public static readonly int[]? BlockHarvestTools = new int[] { 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public DeepslateRedstoneOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateRedstoneOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedstoneTorch : Block {
		public const int BlockId = 189;
		public const string BlockName = "redstone_torch";
		public const string BlockDisplayName = "Redstone Torch";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 7;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 3956;
		public const int BlockMinStateId = 3956;
		public const int BlockMaxStateId = 3957;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public RedstoneTorch () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedstoneTorch (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedstoneWallTorch : Block {
		public const int BlockId = 190;
		public const string BlockName = "redstone_wall_torch";
		public const string BlockDisplayName = "Redstone Wall Torch";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 7;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 3958;
		public const int BlockMinStateId = 3958;
		public const int BlockMaxStateId = 3965;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public RedstoneWallTorch () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedstoneWallTorch (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StoneButton : Block {
		public const int BlockId = 191;
		public const string BlockName = "stone_button";
		public const string BlockDisplayName = "Stone Button";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 3975;
		public const int BlockMinStateId = 3966;
		public const int BlockMaxStateId = 3989;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("face", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "floor", "wall", "ceiling" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public StoneButton () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StoneButton (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Snow : Block {
		public const int BlockId = 192;
		public const string BlockName = "snow";
		public const string BlockDisplayName = "Snow";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 3990;
		public const int BlockMinStateId = 3990;
		public const int BlockMaxStateId = 3997;
				public static readonly int[]? BlockHarvestTools = new int[] { 700, 705, 710, 715, 720, 725 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("layers", BlockStateProperty.BlockStatePropertyType.Enum, 8, new string[] { "1", "2", "3", "4", "5", "6", "7", "8" }), }, 0);	

		public Snow () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Snow (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Ice : Block {
		public const int BlockId = 193;
		public const string BlockName = "ice";
		public const string BlockDisplayName = "Ice";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 3998;
		public const int BlockMinStateId = 3998;
		public const int BlockMaxStateId = 3998;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Ice () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Ice (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SnowBlock : Block {
		public const int BlockId = 194;
		public const string BlockName = "snow_block";
		public const string BlockDisplayName = "Snow Block";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 3999;
		public const int BlockMinStateId = 3999;
		public const int BlockMaxStateId = 3999;
				public static readonly int[]? BlockHarvestTools = new int[] { 700, 705, 710, 715, 720, 725 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SnowBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SnowBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Cactus : Block {
		public const int BlockId = 195;
		public const string BlockName = "cactus";
		public const string BlockDisplayName = "Cactus";

		public const float BlockHardness = 0.4F;
		public const float BlockResistance = 0.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4000;
		public const int BlockMinStateId = 4000;
		public const int BlockMaxStateId = 4015;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public Cactus () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Cactus (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Clay : Block {
		public const int BlockId = 196;
		public const string BlockName = "clay";
		public const string BlockDisplayName = "Clay";

		public const float BlockHardness = 0.6F;
		public const float BlockResistance = 0.6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 4016;
		public const int BlockMinStateId = 4016;
		public const int BlockMaxStateId = 4016;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Clay () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Clay (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SugarCane : Block {
		public const int BlockId = 197;
		public const string BlockName = "sugar_cane";
		public const string BlockDisplayName = "Sugar Cane";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 4017;
		public const int BlockMinStateId = 4017;
		public const int BlockMaxStateId = 4032;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public SugarCane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SugarCane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Jukebox : Block {
		public const int BlockId = 198;
		public const string BlockName = "jukebox";
		public const string BlockDisplayName = "Jukebox";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 4034;
		public const int BlockMinStateId = 4033;
		public const int BlockMaxStateId = 4034;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("has_record", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Jukebox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Jukebox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakFence : Block {
		public const int BlockId = 199;
		public const string BlockName = "oak_fence";
		public const string BlockDisplayName = "Oak Fence";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 4066;
		public const int BlockMinStateId = 4035;
		public const int BlockMaxStateId = 4066;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public OakFence () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakFence (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Pumpkin : Block {
		public const int BlockId = 200;
		public const string BlockName = "pumpkin";
		public const string BlockDisplayName = "Pumpkin";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "gourd;mineable/axe";
		public const int BlockDefaultState = 4067;
		public const int BlockMinStateId = 4067;
		public const int BlockMaxStateId = 4067;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Pumpkin () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Pumpkin (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Netherrack : Block {
		public const int BlockId = 201;
		public const string BlockName = "netherrack";
		public const string BlockDisplayName = "Netherrack";

		public const float BlockHardness = 0.4F;
		public const float BlockResistance = 0.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4068;
		public const int BlockMinStateId = 4068;
		public const int BlockMaxStateId = 4068;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Netherrack () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Netherrack (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SoulSand : Block {
		public const int BlockId = 202;
		public const string BlockName = "soul_sand";
		public const string BlockDisplayName = "Soul Sand";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 4069;
		public const int BlockMinStateId = 4069;
		public const int BlockMaxStateId = 4069;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SoulSand () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SoulSand (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SoulSoil : Block {
		public const int BlockId = 203;
		public const string BlockName = "soul_soil";
		public const string BlockDisplayName = "Soul Soil";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 4070;
		public const int BlockMinStateId = 4070;
		public const int BlockMaxStateId = 4070;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SoulSoil () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SoulSoil (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Basalt : Block {
		public const int BlockId = 204;
		public const string BlockName = "basalt";
		public const string BlockDisplayName = "Basalt";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4072;
		public const int BlockMinStateId = 4071;
		public const int BlockMaxStateId = 4073;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public Basalt () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Basalt (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedBasalt : Block {
		public const int BlockId = 205;
		public const string BlockName = "polished_basalt";
		public const string BlockDisplayName = "Polished Basalt";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4075;
		public const int BlockMinStateId = 4074;
		public const int BlockMaxStateId = 4076;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public PolishedBasalt () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedBasalt (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SoulTorch : Block {
		public const int BlockId = 206;
		public const string BlockName = "soul_torch";
		public const string BlockDisplayName = "Soul Torch";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 10;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4077;
		public const int BlockMinStateId = 4077;
		public const int BlockMaxStateId = 4077;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SoulTorch () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SoulTorch (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SoulWallTorch : Block {
		public const int BlockId = 207;
		public const string BlockName = "soul_wall_torch";
		public const string BlockDisplayName = "Soul Wall Torch";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 10;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4078;
		public const int BlockMinStateId = 4078;
		public const int BlockMaxStateId = 4081;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public SoulWallTorch () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SoulWallTorch (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Glowstone : Block {
		public const int BlockId = 208;
		public const string BlockName = "glowstone";
		public const string BlockDisplayName = "Glowstone";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4082;
		public const int BlockMinStateId = 4082;
		public const int BlockMaxStateId = 4082;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Glowstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Glowstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class NetherPortal : Block {
		public const int BlockId = 209;
		public const string BlockName = "nether_portal";
		public const string BlockDisplayName = "Nether Portal";

		public const float BlockHardness = 3.4028235E+38F;
		public const float BlockResistance = -1F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 11;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4083;
		public const int BlockMinStateId = 4083;
		public const int BlockMaxStateId = 4084;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "x", "z" }), }, 0);	

		public NetherPortal () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public NetherPortal (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CarvedPumpkin : Block {
		public const int BlockId = 210;
		public const string BlockName = "carved_pumpkin";
		public const string BlockDisplayName = "Carved Pumpkin";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "gourd;mineable/axe";
		public const int BlockDefaultState = 4085;
		public const int BlockMinStateId = 4085;
		public const int BlockMaxStateId = 4088;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public CarvedPumpkin () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CarvedPumpkin (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JackOLantern : Block {
		public const int BlockId = 211;
		public const string BlockName = "jack_o_lantern";
		public const string BlockDisplayName = "Jack o'Lantern";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "gourd;mineable/axe";
		public const int BlockDefaultState = 4089;
		public const int BlockMinStateId = 4089;
		public const int BlockMaxStateId = 4092;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public JackOLantern () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JackOLantern (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Cake : Block {
		public const int BlockId = 212;
		public const string BlockName = "cake";
		public const string BlockDisplayName = "Cake";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4093;
		public const int BlockMinStateId = 4093;
		public const int BlockMaxStateId = 4099;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("bites", BlockStateProperty.BlockStatePropertyType.Int, 7, null), }, 0);	

		public Cake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Cake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Repeater : Block {
		public const int BlockId = 213;
		public const string BlockName = "repeater";
		public const string BlockDisplayName = "Redstone Repeater";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4103;
		public const int BlockMinStateId = 4100;
		public const int BlockMaxStateId = 4163;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("delay", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("locked", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public Repeater () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Repeater (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteStainedGlass : Block {
		public const int BlockId = 214;
		public const string BlockName = "white_stained_glass";
		public const string BlockDisplayName = "White Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4164;
		public const int BlockMinStateId = 4164;
		public const int BlockMaxStateId = 4164;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WhiteStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeStainedGlass : Block {
		public const int BlockId = 215;
		public const string BlockName = "orange_stained_glass";
		public const string BlockDisplayName = "Orange Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4165;
		public const int BlockMinStateId = 4165;
		public const int BlockMaxStateId = 4165;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public OrangeStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaStainedGlass : Block {
		public const int BlockId = 216;
		public const string BlockName = "magenta_stained_glass";
		public const string BlockDisplayName = "Magenta Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4166;
		public const int BlockMinStateId = 4166;
		public const int BlockMaxStateId = 4166;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public MagentaStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueStainedGlass : Block {
		public const int BlockId = 217;
		public const string BlockName = "light_blue_stained_glass";
		public const string BlockDisplayName = "Light Blue Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4167;
		public const int BlockMinStateId = 4167;
		public const int BlockMaxStateId = 4167;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LightBlueStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowStainedGlass : Block {
		public const int BlockId = 218;
		public const string BlockName = "yellow_stained_glass";
		public const string BlockDisplayName = "Yellow Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4168;
		public const int BlockMinStateId = 4168;
		public const int BlockMaxStateId = 4168;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public YellowStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeStainedGlass : Block {
		public const int BlockId = 219;
		public const string BlockName = "lime_stained_glass";
		public const string BlockDisplayName = "Lime Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4169;
		public const int BlockMinStateId = 4169;
		public const int BlockMaxStateId = 4169;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LimeStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkStainedGlass : Block {
		public const int BlockId = 220;
		public const string BlockName = "pink_stained_glass";
		public const string BlockDisplayName = "Pink Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4170;
		public const int BlockMinStateId = 4170;
		public const int BlockMaxStateId = 4170;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PinkStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayStainedGlass : Block {
		public const int BlockId = 221;
		public const string BlockName = "gray_stained_glass";
		public const string BlockDisplayName = "Gray Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4171;
		public const int BlockMinStateId = 4171;
		public const int BlockMaxStateId = 4171;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GrayStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayStainedGlass : Block {
		public const int BlockId = 222;
		public const string BlockName = "light_gray_stained_glass";
		public const string BlockDisplayName = "Light Gray Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4172;
		public const int BlockMinStateId = 4172;
		public const int BlockMaxStateId = 4172;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LightGrayStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanStainedGlass : Block {
		public const int BlockId = 223;
		public const string BlockName = "cyan_stained_glass";
		public const string BlockDisplayName = "Cyan Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4173;
		public const int BlockMinStateId = 4173;
		public const int BlockMaxStateId = 4173;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CyanStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleStainedGlass : Block {
		public const int BlockId = 224;
		public const string BlockName = "purple_stained_glass";
		public const string BlockDisplayName = "Purple Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4174;
		public const int BlockMinStateId = 4174;
		public const int BlockMaxStateId = 4174;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PurpleStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueStainedGlass : Block {
		public const int BlockId = 225;
		public const string BlockName = "blue_stained_glass";
		public const string BlockDisplayName = "Blue Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4175;
		public const int BlockMinStateId = 4175;
		public const int BlockMaxStateId = 4175;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlueStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownStainedGlass : Block {
		public const int BlockId = 226;
		public const string BlockName = "brown_stained_glass";
		public const string BlockDisplayName = "Brown Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4176;
		public const int BlockMinStateId = 4176;
		public const int BlockMaxStateId = 4176;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BrownStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenStainedGlass : Block {
		public const int BlockId = 227;
		public const string BlockName = "green_stained_glass";
		public const string BlockDisplayName = "Green Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4177;
		public const int BlockMinStateId = 4177;
		public const int BlockMaxStateId = 4177;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GreenStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedStainedGlass : Block {
		public const int BlockId = 228;
		public const string BlockName = "red_stained_glass";
		public const string BlockDisplayName = "Red Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4178;
		public const int BlockMinStateId = 4178;
		public const int BlockMaxStateId = 4178;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RedStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackStainedGlass : Block {
		public const int BlockId = 229;
		public const string BlockName = "black_stained_glass";
		public const string BlockDisplayName = "Black Stained Glass";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4179;
		public const int BlockMinStateId = 4179;
		public const int BlockMaxStateId = 4179;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlackStainedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackStainedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakTrapdoor : Block {
		public const int BlockId = 230;
		public const string BlockName = "oak_trapdoor";
		public const string BlockDisplayName = "Oak Trapdoor";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 4195;
		public const int BlockMinStateId = 4180;
		public const int BlockMaxStateId = 4243;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 15);	

		public OakTrapdoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakTrapdoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SpruceTrapdoor : Block {
		public const int BlockId = 231;
		public const string BlockName = "spruce_trapdoor";
		public const string BlockDisplayName = "Spruce Trapdoor";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 4259;
		public const int BlockMinStateId = 4244;
		public const int BlockMaxStateId = 4307;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 15);	

		public SpruceTrapdoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SpruceTrapdoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchTrapdoor : Block {
		public const int BlockId = 232;
		public const string BlockName = "birch_trapdoor";
		public const string BlockDisplayName = "Birch Trapdoor";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 4323;
		public const int BlockMinStateId = 4308;
		public const int BlockMaxStateId = 4371;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 15);	

		public BirchTrapdoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchTrapdoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JungleTrapdoor : Block {
		public const int BlockId = 233;
		public const string BlockName = "jungle_trapdoor";
		public const string BlockDisplayName = "Jungle Trapdoor";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 4387;
		public const int BlockMinStateId = 4372;
		public const int BlockMaxStateId = 4435;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 15);	

		public JungleTrapdoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JungleTrapdoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaTrapdoor : Block {
		public const int BlockId = 234;
		public const string BlockName = "acacia_trapdoor";
		public const string BlockDisplayName = "Acacia Trapdoor";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 4451;
		public const int BlockMinStateId = 4436;
		public const int BlockMaxStateId = 4499;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 15);	

		public AcaciaTrapdoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaTrapdoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakTrapdoor : Block {
		public const int BlockId = 235;
		public const string BlockName = "dark_oak_trapdoor";
		public const string BlockDisplayName = "Dark Oak Trapdoor";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 4515;
		public const int BlockMinStateId = 4500;
		public const int BlockMaxStateId = 4563;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 15);	

		public DarkOakTrapdoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakTrapdoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StoneBricks : Block {
		public const int BlockId = 236;
		public const string BlockName = "stone_bricks";
		public const string BlockDisplayName = "Stone Bricks";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4564;
		public const int BlockMinStateId = 4564;
		public const int BlockMaxStateId = 4564;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public StoneBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StoneBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MossyStoneBricks : Block {
		public const int BlockId = 237;
		public const string BlockName = "mossy_stone_bricks";
		public const string BlockDisplayName = "Mossy Stone Bricks";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4565;
		public const int BlockMinStateId = 4565;
		public const int BlockMaxStateId = 4565;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public MossyStoneBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MossyStoneBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrackedStoneBricks : Block {
		public const int BlockId = 238;
		public const string BlockName = "cracked_stone_bricks";
		public const string BlockDisplayName = "Cracked Stone Bricks";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4566;
		public const int BlockMinStateId = 4566;
		public const int BlockMaxStateId = 4566;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CrackedStoneBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrackedStoneBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ChiseledStoneBricks : Block {
		public const int BlockId = 239;
		public const string BlockName = "chiseled_stone_bricks";
		public const string BlockDisplayName = "Chiseled Stone Bricks";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4567;
		public const int BlockMinStateId = 4567;
		public const int BlockMaxStateId = 4567;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public ChiseledStoneBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ChiseledStoneBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class InfestedStone : Block {
		public const int BlockId = 240;
		public const string BlockName = "infested_stone";
		public const string BlockDisplayName = "Infested Stone";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4568;
		public const int BlockMinStateId = 4568;
		public const int BlockMaxStateId = 4568;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public InfestedStone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public InfestedStone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class InfestedCobblestone : Block {
		public const int BlockId = 241;
		public const string BlockName = "infested_cobblestone";
		public const string BlockDisplayName = "Infested Cobblestone";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4569;
		public const int BlockMinStateId = 4569;
		public const int BlockMaxStateId = 4569;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public InfestedCobblestone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public InfestedCobblestone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class InfestedStoneBricks : Block {
		public const int BlockId = 242;
		public const string BlockName = "infested_stone_bricks";
		public const string BlockDisplayName = "Infested Stone Bricks";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4570;
		public const int BlockMinStateId = 4570;
		public const int BlockMaxStateId = 4570;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public InfestedStoneBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public InfestedStoneBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class InfestedMossyStoneBricks : Block {
		public const int BlockId = 243;
		public const string BlockName = "infested_mossy_stone_bricks";
		public const string BlockDisplayName = "Infested Mossy Stone Bricks";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4571;
		public const int BlockMinStateId = 4571;
		public const int BlockMaxStateId = 4571;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public InfestedMossyStoneBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public InfestedMossyStoneBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class InfestedCrackedStoneBricks : Block {
		public const int BlockId = 244;
		public const string BlockName = "infested_cracked_stone_bricks";
		public const string BlockDisplayName = "Infested Cracked Stone Bricks";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4572;
		public const int BlockMinStateId = 4572;
		public const int BlockMaxStateId = 4572;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public InfestedCrackedStoneBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public InfestedCrackedStoneBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class InfestedChiseledStoneBricks : Block {
		public const int BlockId = 245;
		public const string BlockName = "infested_chiseled_stone_bricks";
		public const string BlockDisplayName = "Infested Chiseled Stone Bricks";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4573;
		public const int BlockMinStateId = 4573;
		public const int BlockMaxStateId = 4573;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public InfestedChiseledStoneBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public InfestedChiseledStoneBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownMushroomBlock : Block {
		public const int BlockId = 246;
		public const string BlockName = "brown_mushroom_block";
		public const string BlockDisplayName = "Brown Mushroom Block";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 4574;
		public const int BlockMinStateId = 4574;
		public const int BlockMaxStateId = 4637;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("down", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public BrownMushroomBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownMushroomBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedMushroomBlock : Block {
		public const int BlockId = 247;
		public const string BlockName = "red_mushroom_block";
		public const string BlockDisplayName = "Red Mushroom Block";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 4638;
		public const int BlockMinStateId = 4638;
		public const int BlockMaxStateId = 4701;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("down", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public RedMushroomBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedMushroomBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MushroomStem : Block {
		public const int BlockId = 248;
		public const string BlockName = "mushroom_stem";
		public const string BlockDisplayName = "Mushroom Stem";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 4702;
		public const int BlockMinStateId = 4702;
		public const int BlockMaxStateId = 4765;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("down", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public MushroomStem () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MushroomStem (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class IronBars : Block {
		public const int BlockId = 249;
		public const string BlockName = "iron_bars";
		public const string BlockDisplayName = "Iron Bars";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4797;
		public const int BlockMinStateId = 4766;
		public const int BlockMaxStateId = 4797;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public IronBars () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public IronBars (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Chain : Block {
		public const int BlockId = 250;
		public const string BlockName = "chain";
		public const string BlockDisplayName = "Chain";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 4801;
		public const int BlockMinStateId = 4798;
		public const int BlockMaxStateId = 4803;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public Chain () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Chain (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GlassPane : Block {
		public const int BlockId = 251;
		public const string BlockName = "glass_pane";
		public const string BlockDisplayName = "Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 4835;
		public const int BlockMinStateId = 4804;
		public const int BlockMaxStateId = 4835;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public GlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Melon : Block {
		public const int BlockId = 252;
		public const string BlockName = "melon";
		public const string BlockDisplayName = "Melon";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "gourd;mineable/axe";
		public const int BlockDefaultState = 4836;
		public const int BlockMinStateId = 4836;
		public const int BlockMaxStateId = 4836;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Melon () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Melon (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AttachedPumpkinStem : Block {
		public const int BlockId = 253;
		public const string BlockName = "attached_pumpkin_stem";
		public const string BlockDisplayName = "Attached Pumpkin Stem";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 4837;
		public const int BlockMinStateId = 4837;
		public const int BlockMaxStateId = 4840;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public AttachedPumpkinStem () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AttachedPumpkinStem (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AttachedMelonStem : Block {
		public const int BlockId = 254;
		public const string BlockName = "attached_melon_stem";
		public const string BlockDisplayName = "Attached Melon Stem";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 4841;
		public const int BlockMinStateId = 4841;
		public const int BlockMaxStateId = 4844;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public AttachedMelonStem () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AttachedMelonStem (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PumpkinStem : Block {
		public const int BlockId = 255;
		public const string BlockName = "pumpkin_stem";
		public const string BlockDisplayName = "Pumpkin Stem";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 4845;
		public const int BlockMinStateId = 4845;
		public const int BlockMaxStateId = 4852;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 8, null), }, 0);	

		public PumpkinStem () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PumpkinStem (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MelonStem : Block {
		public const int BlockId = 256;
		public const string BlockName = "melon_stem";
		public const string BlockDisplayName = "Melon Stem";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 4853;
		public const int BlockMinStateId = 4853;
		public const int BlockMaxStateId = 4860;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 8, null), }, 0);	

		public MelonStem () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MelonStem (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Vine : Block {
		public const int BlockId = 257;
		public const string BlockName = "vine";
		public const string BlockDisplayName = "Vines";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "vine_or_glow_lichen;plant;mineable/axe";
		public const int BlockDefaultState = 4892;
		public const int BlockMinStateId = 4861;
		public const int BlockMaxStateId = 4892;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public Vine () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Vine (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GlowLichen : Block {
		public const int BlockId = 258;
		public const string BlockName = "glow_lichen";
		public const string BlockDisplayName = "Glow Lichen";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "vine_or_glow_lichen;plant;mineable/axe";
		public const int BlockDefaultState = 5020;
		public const int BlockMinStateId = 4893;
		public const int BlockMaxStateId = 5020;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("down", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 127);	

		public GlowLichen () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GlowLichen (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakFenceGate : Block {
		public const int BlockId = 259;
		public const string BlockName = "oak_fence_gate";
		public const string BlockDisplayName = "Oak Fence Gate";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 5028;
		public const int BlockMinStateId = 5021;
		public const int BlockMaxStateId = 5052;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("in_wall", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 7);	

		public OakFenceGate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakFenceGate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrickStairs : Block {
		public const int BlockId = 260;
		public const string BlockName = "brick_stairs";
		public const string BlockDisplayName = "Brick Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5064;
		public const int BlockMinStateId = 5053;
		public const int BlockMaxStateId = 5132;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public BrickStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrickStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StoneBrickStairs : Block {
		public const int BlockId = 261;
		public const string BlockName = "stone_brick_stairs";
		public const string BlockDisplayName = "Stone Brick Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5144;
		public const int BlockMinStateId = 5133;
		public const int BlockMaxStateId = 5212;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public StoneBrickStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StoneBrickStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Mycelium : Block {
		public const int BlockId = 262;
		public const string BlockName = "mycelium";
		public const string BlockDisplayName = "Mycelium";

		public const float BlockHardness = 0.6F;
		public const float BlockResistance = 0.6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 5214;
		public const int BlockMinStateId = 5213;
		public const int BlockMaxStateId = 5214;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("snowy", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Mycelium () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Mycelium (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LilyPad : Block {
		public const int BlockId = 263;
		public const string BlockName = "lily_pad";
		public const string BlockDisplayName = "Lily Pad";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 5215;
		public const int BlockMinStateId = 5215;
		public const int BlockMaxStateId = 5215;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LilyPad () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LilyPad (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class NetherBricks : Block {
		public const int BlockId = 264;
		public const string BlockName = "nether_bricks";
		public const string BlockDisplayName = "Nether Bricks";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5216;
		public const int BlockMinStateId = 5216;
		public const int BlockMaxStateId = 5216;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public NetherBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public NetherBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class NetherBrickFence : Block {
		public const int BlockId = 265;
		public const string BlockName = "nether_brick_fence";
		public const string BlockDisplayName = "Nether Brick Fence";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5248;
		public const int BlockMinStateId = 5217;
		public const int BlockMaxStateId = 5248;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public NetherBrickFence () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public NetherBrickFence (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class NetherBrickStairs : Block {
		public const int BlockId = 266;
		public const string BlockName = "nether_brick_stairs";
		public const string BlockDisplayName = "Nether Brick Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5260;
		public const int BlockMinStateId = 5249;
		public const int BlockMaxStateId = 5328;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public NetherBrickStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public NetherBrickStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class NetherWart : Block {
		public const int BlockId = 267;
		public const string BlockName = "nether_wart";
		public const string BlockDisplayName = "Nether Wart";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 5329;
		public const int BlockMinStateId = 5329;
		public const int BlockMaxStateId = 5332;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 4, null), }, 0);	

		public NetherWart () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public NetherWart (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class EnchantingTable : Block {
		public const int BlockId = 268;
		public const string BlockName = "enchanting_table";
		public const string BlockDisplayName = "Enchanting Table";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 1200F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5333;
		public const int BlockMinStateId = 5333;
		public const int BlockMaxStateId = 5333;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public EnchantingTable () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public EnchantingTable (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrewingStand : Block {
		public const int BlockId = 269;
		public const string BlockName = "brewing_stand";
		public const string BlockDisplayName = "Brewing Stand";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 1;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5341;
		public const int BlockMinStateId = 5334;
		public const int BlockMaxStateId = 5341;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("has_bottle_0", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("has_bottle_1", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("has_bottle_2", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 7);	

		public BrewingStand () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrewingStand (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Cauldron : Block {
		public const int BlockId = 270;
		public const string BlockName = "cauldron";
		public const string BlockDisplayName = "Cauldron";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5342;
		public const int BlockMinStateId = 5342;
		public const int BlockMaxStateId = 5342;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Cauldron () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Cauldron (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaterCauldron : Block {
		public const int BlockId = 271;
		public const string BlockName = "water_cauldron";
		public const string BlockDisplayName = "Water Cauldron";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5343;
		public const int BlockMinStateId = 5343;
		public const int BlockMaxStateId = 5345;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("level", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "1", "2", "3" }), }, 0);	

		public WaterCauldron () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaterCauldron (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LavaCauldron : Block {
		public const int BlockId = 272;
		public const string BlockName = "lava_cauldron";
		public const string BlockDisplayName = "Lava Cauldron";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5346;
		public const int BlockMinStateId = 5346;
		public const int BlockMaxStateId = 5346;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LavaCauldron () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LavaCauldron (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PowderSnowCauldron : Block {
		public const int BlockId = 273;
		public const string BlockName = "powder_snow_cauldron";
		public const string BlockDisplayName = "Powder Snow Cauldron";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5347;
		public const int BlockMinStateId = 5347;
		public const int BlockMaxStateId = 5349;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("level", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "1", "2", "3" }), }, 0);	

		public PowderSnowCauldron () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PowderSnowCauldron (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class EndPortal : Block {
		public const int BlockId = 274;
		public const string BlockName = "end_portal";
		public const string BlockDisplayName = "End Portal";

		public const float BlockHardness = 3.4028235E+38F;
		public const float BlockResistance = 3600000F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 5350;
		public const int BlockMinStateId = 5350;
		public const int BlockMaxStateId = 5350;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public EndPortal () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public EndPortal (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class EndPortalFrame : Block {
		public const int BlockId = 275;
		public const string BlockName = "end_portal_frame";
		public const string BlockDisplayName = "End Portal Frame";

		public const float BlockHardness = 3.4028235E+38F;
		public const float BlockResistance = 3600000F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 1;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 5355;
		public const int BlockMinStateId = 5351;
		public const int BlockMaxStateId = 5358;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("eye", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 4);	

		public EndPortalFrame () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public EndPortalFrame (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class EndStone : Block {
		public const int BlockId = 276;
		public const string BlockName = "end_stone";
		public const string BlockDisplayName = "End Stone";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 9F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5359;
		public const int BlockMinStateId = 5359;
		public const int BlockMaxStateId = 5359;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public EndStone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public EndStone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DragonEgg : Block {
		public const int BlockId = 277;
		public const string BlockName = "dragon_egg";
		public const string BlockDisplayName = "Dragon Egg";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 9F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 1;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 5360;
		public const int BlockMinStateId = 5360;
		public const int BlockMaxStateId = 5360;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DragonEgg () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DragonEgg (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedstoneLamp : Block {
		public const int BlockId = 278;
		public const string BlockName = "redstone_lamp";
		public const string BlockDisplayName = "Redstone Lamp";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 5362;
		public const int BlockMinStateId = 5361;
		public const int BlockMaxStateId = 5362;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public RedstoneLamp () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedstoneLamp (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Cocoa : Block {
		public const int BlockId = 279;
		public const string BlockName = "cocoa";
		public const string BlockDisplayName = "Cocoa";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 5363;
		public const int BlockMinStateId = 5363;
		public const int BlockMaxStateId = 5374;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 3, null),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public Cocoa () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Cocoa (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SandstoneStairs : Block {
		public const int BlockId = 280;
		public const string BlockName = "sandstone_stairs";
		public const string BlockDisplayName = "Sandstone Stairs";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5386;
		public const int BlockMinStateId = 5375;
		public const int BlockMaxStateId = 5454;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public SandstoneStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SandstoneStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class EmeraldOre : Block {
		public const int BlockId = 281;
		public const string BlockName = "emerald_ore";
		public const string BlockDisplayName = "Emerald Ore";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5455;
		public const int BlockMinStateId = 5455;
		public const int BlockMaxStateId = 5455;
				public static readonly int[]? BlockHarvestTools = new int[] { 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public EmeraldOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public EmeraldOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateEmeraldOre : Block {
		public const int BlockId = 282;
		public const string BlockName = "deepslate_emerald_ore";
		public const string BlockDisplayName = "Deepslate Emerald Ore";

		public const float BlockHardness = 4.5F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5456;
		public const int BlockMinStateId = 5456;
		public const int BlockMaxStateId = 5456;
				public static readonly int[]? BlockHarvestTools = new int[] { 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeepslateEmeraldOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateEmeraldOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class EnderChest : Block {
		public const int BlockId = 283;
		public const string BlockName = "ender_chest";
		public const string BlockDisplayName = "Ender Chest";

		public const float BlockHardness = 22.5F;
		public const float BlockResistance = 600F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 7;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5458;
		public const int BlockMinStateId = 5457;
		public const int BlockMaxStateId = 5464;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public EnderChest () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public EnderChest (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class TripwireHook : Block {
		public const int BlockId = 284;
		public const string BlockName = "tripwire_hook";
		public const string BlockDisplayName = "Tripwire Hook";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 5474;
		public const int BlockMinStateId = 5465;
		public const int BlockMaxStateId = 5480;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("attached", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public TripwireHook () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public TripwireHook (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Tripwire : Block {
		public const int BlockId = 285;
		public const string BlockName = "tripwire";
		public const string BlockDisplayName = "Tripwire";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 5608;
		public const int BlockMinStateId = 5481;
		public const int BlockMaxStateId = 5608;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("attached", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("disarmed", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 127);	

		public Tripwire () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Tripwire (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class EmeraldBlock : Block {
		public const int BlockId = 286;
		public const string BlockName = "emerald_block";
		public const string BlockDisplayName = "Block of Emerald";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5609;
		public const int BlockMinStateId = 5609;
		public const int BlockMaxStateId = 5609;
				public static readonly int[]? BlockHarvestTools = new int[] { 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public EmeraldBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public EmeraldBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SpruceStairs : Block {
		public const int BlockId = 287;
		public const string BlockName = "spruce_stairs";
		public const string BlockDisplayName = "Spruce Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 5621;
		public const int BlockMinStateId = 5610;
		public const int BlockMaxStateId = 5689;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public SpruceStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SpruceStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchStairs : Block {
		public const int BlockId = 288;
		public const string BlockName = "birch_stairs";
		public const string BlockDisplayName = "Birch Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 5701;
		public const int BlockMinStateId = 5690;
		public const int BlockMaxStateId = 5769;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public BirchStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JungleStairs : Block {
		public const int BlockId = 289;
		public const string BlockName = "jungle_stairs";
		public const string BlockDisplayName = "Jungle Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 5781;
		public const int BlockMinStateId = 5770;
		public const int BlockMaxStateId = 5849;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public JungleStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JungleStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CommandBlock : Block {
		public const int BlockId = 290;
		public const string BlockName = "command_block";
		public const string BlockDisplayName = "Command Block";

		public const float BlockHardness = 3.4028235E+38F;
		public const float BlockResistance = 3600000F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 5856;
		public const int BlockMinStateId = 5850;
		public const int BlockMaxStateId = 5861;
				public static readonly int[]? BlockHarvestTools = new int[] {  };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("conditional", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 6);	

		public CommandBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CommandBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Beacon : Block {
		public const int BlockId = 291;
		public const string BlockName = "beacon";
		public const string BlockDisplayName = "Beacon";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 5862;
		public const int BlockMinStateId = 5862;
		public const int BlockMaxStateId = 5862;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Beacon () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Beacon (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CobblestoneWall : Block {
		public const int BlockId = 292;
		public const string BlockName = "cobblestone_wall";
		public const string BlockDisplayName = "Cobblestone Wall";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 5866;
		public const int BlockMinStateId = 5863;
		public const int BlockMaxStateId = 6186;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public CobblestoneWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CobblestoneWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MossyCobblestoneWall : Block {
		public const int BlockId = 293;
		public const string BlockName = "mossy_cobblestone_wall";
		public const string BlockDisplayName = "Mossy Cobblestone Wall";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6190;
		public const int BlockMinStateId = 6187;
		public const int BlockMaxStateId = 6510;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public MossyCobblestoneWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MossyCobblestoneWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class FlowerPot : Block {
		public const int BlockId = 294;
		public const string BlockName = "flower_pot";
		public const string BlockDisplayName = "Flower Pot";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6511;
		public const int BlockMinStateId = 6511;
		public const int BlockMaxStateId = 6511;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public FlowerPot () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public FlowerPot (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedOakSapling : Block {
		public const int BlockId = 295;
		public const string BlockName = "potted_oak_sapling";
		public const string BlockDisplayName = "Potted Oak Sapling";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6512;
		public const int BlockMinStateId = 6512;
		public const int BlockMaxStateId = 6512;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedOakSapling () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedOakSapling (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedSpruceSapling : Block {
		public const int BlockId = 296;
		public const string BlockName = "potted_spruce_sapling";
		public const string BlockDisplayName = "Potted Spruce Sapling";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6513;
		public const int BlockMinStateId = 6513;
		public const int BlockMaxStateId = 6513;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedSpruceSapling () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedSpruceSapling (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedBirchSapling : Block {
		public const int BlockId = 297;
		public const string BlockName = "potted_birch_sapling";
		public const string BlockDisplayName = "Potted Birch Sapling";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6514;
		public const int BlockMinStateId = 6514;
		public const int BlockMaxStateId = 6514;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedBirchSapling () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedBirchSapling (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedJungleSapling : Block {
		public const int BlockId = 298;
		public const string BlockName = "potted_jungle_sapling";
		public const string BlockDisplayName = "Potted Jungle Sapling";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6515;
		public const int BlockMinStateId = 6515;
		public const int BlockMaxStateId = 6515;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedJungleSapling () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedJungleSapling (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedAcaciaSapling : Block {
		public const int BlockId = 299;
		public const string BlockName = "potted_acacia_sapling";
		public const string BlockDisplayName = "Potted Acacia Sapling";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6516;
		public const int BlockMinStateId = 6516;
		public const int BlockMaxStateId = 6516;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedAcaciaSapling () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedAcaciaSapling (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedDarkOakSapling : Block {
		public const int BlockId = 300;
		public const string BlockName = "potted_dark_oak_sapling";
		public const string BlockDisplayName = "Potted Dark Oak Sapling";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6517;
		public const int BlockMinStateId = 6517;
		public const int BlockMaxStateId = 6517;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedDarkOakSapling () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedDarkOakSapling (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedFern : Block {
		public const int BlockId = 301;
		public const string BlockName = "potted_fern";
		public const string BlockDisplayName = "Potted Fern";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6518;
		public const int BlockMinStateId = 6518;
		public const int BlockMaxStateId = 6518;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedFern () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedFern (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedDandelion : Block {
		public const int BlockId = 302;
		public const string BlockName = "potted_dandelion";
		public const string BlockDisplayName = "Potted Dandelion";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6519;
		public const int BlockMinStateId = 6519;
		public const int BlockMaxStateId = 6519;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedDandelion () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedDandelion (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedPoppy : Block {
		public const int BlockId = 303;
		public const string BlockName = "potted_poppy";
		public const string BlockDisplayName = "Potted Poppy";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6520;
		public const int BlockMinStateId = 6520;
		public const int BlockMaxStateId = 6520;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedPoppy () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedPoppy (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedBlueOrchid : Block {
		public const int BlockId = 304;
		public const string BlockName = "potted_blue_orchid";
		public const string BlockDisplayName = "Potted Blue Orchid";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6521;
		public const int BlockMinStateId = 6521;
		public const int BlockMaxStateId = 6521;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedBlueOrchid () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedBlueOrchid (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedAllium : Block {
		public const int BlockId = 305;
		public const string BlockName = "potted_allium";
		public const string BlockDisplayName = "Potted Allium";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6522;
		public const int BlockMinStateId = 6522;
		public const int BlockMaxStateId = 6522;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedAllium () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedAllium (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedAzureBluet : Block {
		public const int BlockId = 306;
		public const string BlockName = "potted_azure_bluet";
		public const string BlockDisplayName = "Potted Azure Bluet";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6523;
		public const int BlockMinStateId = 6523;
		public const int BlockMaxStateId = 6523;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedAzureBluet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedAzureBluet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedRedTulip : Block {
		public const int BlockId = 307;
		public const string BlockName = "potted_red_tulip";
		public const string BlockDisplayName = "Potted Red Tulip";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6524;
		public const int BlockMinStateId = 6524;
		public const int BlockMaxStateId = 6524;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedRedTulip () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedRedTulip (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedOrangeTulip : Block {
		public const int BlockId = 308;
		public const string BlockName = "potted_orange_tulip";
		public const string BlockDisplayName = "Potted Orange Tulip";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6525;
		public const int BlockMinStateId = 6525;
		public const int BlockMaxStateId = 6525;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedOrangeTulip () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedOrangeTulip (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedWhiteTulip : Block {
		public const int BlockId = 309;
		public const string BlockName = "potted_white_tulip";
		public const string BlockDisplayName = "Potted White Tulip";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6526;
		public const int BlockMinStateId = 6526;
		public const int BlockMaxStateId = 6526;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedWhiteTulip () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedWhiteTulip (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedPinkTulip : Block {
		public const int BlockId = 310;
		public const string BlockName = "potted_pink_tulip";
		public const string BlockDisplayName = "Potted Pink Tulip";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6527;
		public const int BlockMinStateId = 6527;
		public const int BlockMaxStateId = 6527;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedPinkTulip () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedPinkTulip (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedOxeyeDaisy : Block {
		public const int BlockId = 311;
		public const string BlockName = "potted_oxeye_daisy";
		public const string BlockDisplayName = "Potted Oxeye Daisy";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6528;
		public const int BlockMinStateId = 6528;
		public const int BlockMaxStateId = 6528;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedOxeyeDaisy () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedOxeyeDaisy (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedCornflower : Block {
		public const int BlockId = 312;
		public const string BlockName = "potted_cornflower";
		public const string BlockDisplayName = "Potted Cornflower";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6529;
		public const int BlockMinStateId = 6529;
		public const int BlockMaxStateId = 6529;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedCornflower () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedCornflower (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedLilyOfTheValley : Block {
		public const int BlockId = 313;
		public const string BlockName = "potted_lily_of_the_valley";
		public const string BlockDisplayName = "Potted Lily of the Valley";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6530;
		public const int BlockMinStateId = 6530;
		public const int BlockMaxStateId = 6530;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedLilyOfTheValley () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedLilyOfTheValley (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedWitherRose : Block {
		public const int BlockId = 314;
		public const string BlockName = "potted_wither_rose";
		public const string BlockDisplayName = "Potted Wither Rose";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6531;
		public const int BlockMinStateId = 6531;
		public const int BlockMaxStateId = 6531;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedWitherRose () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedWitherRose (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedRedMushroom : Block {
		public const int BlockId = 315;
		public const string BlockName = "potted_red_mushroom";
		public const string BlockDisplayName = "Potted Red Mushroom";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6532;
		public const int BlockMinStateId = 6532;
		public const int BlockMaxStateId = 6532;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedRedMushroom () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedRedMushroom (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedBrownMushroom : Block {
		public const int BlockId = 316;
		public const string BlockName = "potted_brown_mushroom";
		public const string BlockDisplayName = "Potted Brown Mushroom";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6533;
		public const int BlockMinStateId = 6533;
		public const int BlockMaxStateId = 6533;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedBrownMushroom () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedBrownMushroom (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedDeadBush : Block {
		public const int BlockId = 317;
		public const string BlockName = "potted_dead_bush";
		public const string BlockDisplayName = "Potted Dead Bush";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6534;
		public const int BlockMinStateId = 6534;
		public const int BlockMaxStateId = 6534;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedDeadBush () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedDeadBush (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedCactus : Block {
		public const int BlockId = 318;
		public const string BlockName = "potted_cactus";
		public const string BlockDisplayName = "Potted Cactus";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6535;
		public const int BlockMinStateId = 6535;
		public const int BlockMaxStateId = 6535;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedCactus () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedCactus (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Carrots : Block {
		public const int BlockId = 319;
		public const string BlockName = "carrots";
		public const string BlockDisplayName = "Carrots";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 6536;
		public const int BlockMinStateId = 6536;
		public const int BlockMaxStateId = 6543;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 8, null), }, 0);	

		public Carrots () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Carrots (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Potatoes : Block {
		public const int BlockId = 320;
		public const string BlockName = "potatoes";
		public const string BlockDisplayName = "Potatoes";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 6544;
		public const int BlockMinStateId = 6544;
		public const int BlockMaxStateId = 6551;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 8, null), }, 0);	

		public Potatoes () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Potatoes (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakButton : Block {
		public const int BlockId = 321;
		public const string BlockName = "oak_button";
		public const string BlockDisplayName = "Oak Button";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 6561;
		public const int BlockMinStateId = 6552;
		public const int BlockMaxStateId = 6575;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("face", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "floor", "wall", "ceiling" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public OakButton () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakButton (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SpruceButton : Block {
		public const int BlockId = 322;
		public const string BlockName = "spruce_button";
		public const string BlockDisplayName = "Spruce Button";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 6585;
		public const int BlockMinStateId = 6576;
		public const int BlockMaxStateId = 6599;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("face", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "floor", "wall", "ceiling" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public SpruceButton () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SpruceButton (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchButton : Block {
		public const int BlockId = 323;
		public const string BlockName = "birch_button";
		public const string BlockDisplayName = "Birch Button";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 6609;
		public const int BlockMinStateId = 6600;
		public const int BlockMaxStateId = 6623;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("face", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "floor", "wall", "ceiling" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public BirchButton () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchButton (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JungleButton : Block {
		public const int BlockId = 324;
		public const string BlockName = "jungle_button";
		public const string BlockDisplayName = "Jungle Button";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 6633;
		public const int BlockMinStateId = 6624;
		public const int BlockMaxStateId = 6647;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("face", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "floor", "wall", "ceiling" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public JungleButton () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JungleButton (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaButton : Block {
		public const int BlockId = 325;
		public const string BlockName = "acacia_button";
		public const string BlockDisplayName = "Acacia Button";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 6657;
		public const int BlockMinStateId = 6648;
		public const int BlockMaxStateId = 6671;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("face", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "floor", "wall", "ceiling" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public AcaciaButton () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaButton (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakButton : Block {
		public const int BlockId = 326;
		public const string BlockName = "dark_oak_button";
		public const string BlockDisplayName = "Dark Oak Button";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 6681;
		public const int BlockMinStateId = 6672;
		public const int BlockMaxStateId = 6695;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("face", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "floor", "wall", "ceiling" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public DarkOakButton () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakButton (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SkeletonSkull : Block {
		public const int BlockId = 327;
		public const string BlockName = "skeleton_skull";
		public const string BlockDisplayName = "Skeleton Skull";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6696;
		public const int BlockMinStateId = 6696;
		public const int BlockMaxStateId = 6711;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public SkeletonSkull () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SkeletonSkull (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SkeletonWallSkull : Block {
		public const int BlockId = 328;
		public const string BlockName = "skeleton_wall_skull";
		public const string BlockDisplayName = "Skeleton Wall Skull";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6712;
		public const int BlockMinStateId = 6712;
		public const int BlockMaxStateId = 6715;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public SkeletonWallSkull () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SkeletonWallSkull (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WitherSkeletonSkull : Block {
		public const int BlockId = 329;
		public const string BlockName = "wither_skeleton_skull";
		public const string BlockDisplayName = "Wither Skeleton Skull";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6716;
		public const int BlockMinStateId = 6716;
		public const int BlockMaxStateId = 6731;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public WitherSkeletonSkull () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WitherSkeletonSkull (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WitherSkeletonWallSkull : Block {
		public const int BlockId = 330;
		public const string BlockName = "wither_skeleton_wall_skull";
		public const string BlockDisplayName = "Wither Skeleton Wall Skull";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6732;
		public const int BlockMinStateId = 6732;
		public const int BlockMaxStateId = 6735;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public WitherSkeletonWallSkull () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WitherSkeletonWallSkull (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ZombieHead : Block {
		public const int BlockId = 331;
		public const string BlockName = "zombie_head";
		public const string BlockDisplayName = "Zombie Head";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6736;
		public const int BlockMinStateId = 6736;
		public const int BlockMaxStateId = 6751;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public ZombieHead () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ZombieHead (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ZombieWallHead : Block {
		public const int BlockId = 332;
		public const string BlockName = "zombie_wall_head";
		public const string BlockDisplayName = "Zombie Wall Head";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6752;
		public const int BlockMinStateId = 6752;
		public const int BlockMaxStateId = 6755;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public ZombieWallHead () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ZombieWallHead (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PlayerHead : Block {
		public const int BlockId = 333;
		public const string BlockName = "player_head";
		public const string BlockDisplayName = "Player Head";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6756;
		public const int BlockMinStateId = 6756;
		public const int BlockMaxStateId = 6771;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public PlayerHead () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PlayerHead (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PlayerWallHead : Block {
		public const int BlockId = 334;
		public const string BlockName = "player_wall_head";
		public const string BlockDisplayName = "Player Wall Head";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6772;
		public const int BlockMinStateId = 6772;
		public const int BlockMaxStateId = 6775;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public PlayerWallHead () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PlayerWallHead (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CreeperHead : Block {
		public const int BlockId = 335;
		public const string BlockName = "creeper_head";
		public const string BlockDisplayName = "Creeper Head";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6776;
		public const int BlockMinStateId = 6776;
		public const int BlockMaxStateId = 6791;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public CreeperHead () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CreeperHead (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CreeperWallHead : Block {
		public const int BlockId = 336;
		public const string BlockName = "creeper_wall_head";
		public const string BlockDisplayName = "Creeper Wall Head";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6792;
		public const int BlockMinStateId = 6792;
		public const int BlockMaxStateId = 6795;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public CreeperWallHead () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CreeperWallHead (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DragonHead : Block {
		public const int BlockId = 337;
		public const string BlockName = "dragon_head";
		public const string BlockDisplayName = "Dragon Head";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6796;
		public const int BlockMinStateId = 6796;
		public const int BlockMaxStateId = 6811;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public DragonHead () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DragonHead (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DragonWallHead : Block {
		public const int BlockId = 338;
		public const string BlockName = "dragon_wall_head";
		public const string BlockDisplayName = "Dragon Wall Head";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6812;
		public const int BlockMinStateId = 6812;
		public const int BlockMaxStateId = 6815;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public DragonWallHead () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DragonWallHead (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Anvil : Block {
		public const int BlockId = 339;
		public const string BlockName = "anvil";
		public const string BlockDisplayName = "Anvil";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 1200F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6816;
		public const int BlockMinStateId = 6816;
		public const int BlockMaxStateId = 6819;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public Anvil () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Anvil (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ChippedAnvil : Block {
		public const int BlockId = 340;
		public const string BlockName = "chipped_anvil";
		public const string BlockDisplayName = "Chipped Anvil";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 1200F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6820;
		public const int BlockMinStateId = 6820;
		public const int BlockMaxStateId = 6823;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public ChippedAnvil () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ChippedAnvil (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DamagedAnvil : Block {
		public const int BlockId = 341;
		public const string BlockName = "damaged_anvil";
		public const string BlockDisplayName = "Damaged Anvil";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 1200F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6824;
		public const int BlockMinStateId = 6824;
		public const int BlockMaxStateId = 6827;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public DamagedAnvil () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DamagedAnvil (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class TrappedChest : Block {
		public const int BlockId = 342;
		public const string BlockName = "trapped_chest";
		public const string BlockDisplayName = "Trapped Chest";

		public const float BlockHardness = 2.5F;
		public const float BlockResistance = 2.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 6829;
		public const int BlockMinStateId = 6828;
		public const int BlockMaxStateId = 6851;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "single", "left", "right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public TrappedChest () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public TrappedChest (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightWeightedPressurePlate : Block {
		public const int BlockId = 343;
		public const string BlockName = "light_weighted_pressure_plate";
		public const string BlockDisplayName = "Light Weighted Pressure Plate";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6852;
		public const int BlockMinStateId = 6852;
		public const int BlockMaxStateId = 6867;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("power", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public LightWeightedPressurePlate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightWeightedPressurePlate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class HeavyWeightedPressurePlate : Block {
		public const int BlockId = 344;
		public const string BlockName = "heavy_weighted_pressure_plate";
		public const string BlockDisplayName = "Heavy Weighted Pressure Plate";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6868;
		public const int BlockMinStateId = 6868;
		public const int BlockMaxStateId = 6883;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("power", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public HeavyWeightedPressurePlate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public HeavyWeightedPressurePlate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Comparator : Block {
		public const int BlockId = 345;
		public const string BlockName = "comparator";
		public const string BlockDisplayName = "Redstone Comparator";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 6885;
		public const int BlockMinStateId = 6884;
		public const int BlockMaxStateId = 6899;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("mode", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "compare", "subtract" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Comparator () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Comparator (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DaylightDetector : Block {
		public const int BlockId = 346;
		public const string BlockName = "daylight_detector";
		public const string BlockDisplayName = "Daylight Detector";

		public const float BlockHardness = 0.2F;
		public const float BlockResistance = 0.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 6916;
		public const int BlockMinStateId = 6900;
		public const int BlockMaxStateId = 6931;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("inverted", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("power", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 16);	

		public DaylightDetector () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DaylightDetector (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedstoneBlock : Block {
		public const int BlockId = 347;
		public const string BlockName = "redstone_block";
		public const string BlockDisplayName = "Block of Redstone";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6932;
		public const int BlockMinStateId = 6932;
		public const int BlockMaxStateId = 6932;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RedstoneBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedstoneBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class NetherQuartzOre : Block {
		public const int BlockId = 348;
		public const string BlockName = "nether_quartz_ore";
		public const string BlockDisplayName = "Nether Quartz Ore";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6933;
		public const int BlockMinStateId = 6933;
		public const int BlockMaxStateId = 6933;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public NetherQuartzOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public NetherQuartzOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Hopper : Block {
		public const int BlockId = 349;
		public const string BlockName = "hopper";
		public const string BlockDisplayName = "Hopper";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 4.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6934;
		public const int BlockMinStateId = 6934;
		public const int BlockMaxStateId = 6943;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("enabled", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "down", "north", "south", "west", "east" }), }, 0);	

		public Hopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Hopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class QuartzBlock : Block {
		public const int BlockId = 350;
		public const string BlockName = "quartz_block";
		public const string BlockDisplayName = "Block of Quartz";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6944;
		public const int BlockMinStateId = 6944;
		public const int BlockMaxStateId = 6944;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public QuartzBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public QuartzBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ChiseledQuartzBlock : Block {
		public const int BlockId = 351;
		public const string BlockName = "chiseled_quartz_block";
		public const string BlockDisplayName = "Chiseled Quartz Block";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6945;
		public const int BlockMinStateId = 6945;
		public const int BlockMaxStateId = 6945;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public ChiseledQuartzBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ChiseledQuartzBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class QuartzPillar : Block {
		public const int BlockId = 352;
		public const string BlockName = "quartz_pillar";
		public const string BlockDisplayName = "Quartz Pillar";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6947;
		public const int BlockMinStateId = 6946;
		public const int BlockMaxStateId = 6948;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public QuartzPillar () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public QuartzPillar (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class QuartzStairs : Block {
		public const int BlockId = 353;
		public const string BlockName = "quartz_stairs";
		public const string BlockDisplayName = "Quartz Stairs";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 6960;
		public const int BlockMinStateId = 6949;
		public const int BlockMaxStateId = 7028;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public QuartzStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public QuartzStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ActivatorRail : Block {
		public const int BlockId = 354;
		public const string BlockName = "activator_rail";
		public const string BlockDisplayName = "Activator Rail";

		public const float BlockHardness = 0.7F;
		public const float BlockResistance = 0.7F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7042;
		public const int BlockMinStateId = 7029;
		public const int BlockMaxStateId = 7052;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north_south", "east_west", "ascending_east", "ascending_west", "ascending_north", "ascending_south" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 13);	

		public ActivatorRail () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ActivatorRail (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Dropper : Block {
		public const int BlockId = 355;
		public const string BlockName = "dropper";
		public const string BlockDisplayName = "Dropper";

		public const float BlockHardness = 3.5F;
		public const float BlockResistance = 3.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7054;
		public const int BlockMinStateId = 7053;
		public const int BlockMaxStateId = 7064;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }),new BlockStateProperty("triggered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Dropper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Dropper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteTerracotta : Block {
		public const int BlockId = 356;
		public const string BlockName = "white_terracotta";
		public const string BlockDisplayName = "White Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7065;
		public const int BlockMinStateId = 7065;
		public const int BlockMaxStateId = 7065;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WhiteTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeTerracotta : Block {
		public const int BlockId = 357;
		public const string BlockName = "orange_terracotta";
		public const string BlockDisplayName = "Orange Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7066;
		public const int BlockMinStateId = 7066;
		public const int BlockMaxStateId = 7066;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public OrangeTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaTerracotta : Block {
		public const int BlockId = 358;
		public const string BlockName = "magenta_terracotta";
		public const string BlockDisplayName = "Magenta Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7067;
		public const int BlockMinStateId = 7067;
		public const int BlockMaxStateId = 7067;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public MagentaTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueTerracotta : Block {
		public const int BlockId = 359;
		public const string BlockName = "light_blue_terracotta";
		public const string BlockDisplayName = "Light Blue Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7068;
		public const int BlockMinStateId = 7068;
		public const int BlockMaxStateId = 7068;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LightBlueTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowTerracotta : Block {
		public const int BlockId = 360;
		public const string BlockName = "yellow_terracotta";
		public const string BlockDisplayName = "Yellow Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7069;
		public const int BlockMinStateId = 7069;
		public const int BlockMaxStateId = 7069;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public YellowTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeTerracotta : Block {
		public const int BlockId = 361;
		public const string BlockName = "lime_terracotta";
		public const string BlockDisplayName = "Lime Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7070;
		public const int BlockMinStateId = 7070;
		public const int BlockMaxStateId = 7070;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LimeTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkTerracotta : Block {
		public const int BlockId = 362;
		public const string BlockName = "pink_terracotta";
		public const string BlockDisplayName = "Pink Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7071;
		public const int BlockMinStateId = 7071;
		public const int BlockMaxStateId = 7071;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PinkTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayTerracotta : Block {
		public const int BlockId = 363;
		public const string BlockName = "gray_terracotta";
		public const string BlockDisplayName = "Gray Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7072;
		public const int BlockMinStateId = 7072;
		public const int BlockMaxStateId = 7072;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GrayTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayTerracotta : Block {
		public const int BlockId = 364;
		public const string BlockName = "light_gray_terracotta";
		public const string BlockDisplayName = "Light Gray Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7073;
		public const int BlockMinStateId = 7073;
		public const int BlockMaxStateId = 7073;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LightGrayTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanTerracotta : Block {
		public const int BlockId = 365;
		public const string BlockName = "cyan_terracotta";
		public const string BlockDisplayName = "Cyan Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7074;
		public const int BlockMinStateId = 7074;
		public const int BlockMaxStateId = 7074;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CyanTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleTerracotta : Block {
		public const int BlockId = 366;
		public const string BlockName = "purple_terracotta";
		public const string BlockDisplayName = "Purple Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7075;
		public const int BlockMinStateId = 7075;
		public const int BlockMaxStateId = 7075;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PurpleTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueTerracotta : Block {
		public const int BlockId = 367;
		public const string BlockName = "blue_terracotta";
		public const string BlockDisplayName = "Blue Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7076;
		public const int BlockMinStateId = 7076;
		public const int BlockMaxStateId = 7076;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlueTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownTerracotta : Block {
		public const int BlockId = 368;
		public const string BlockName = "brown_terracotta";
		public const string BlockDisplayName = "Brown Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7077;
		public const int BlockMinStateId = 7077;
		public const int BlockMaxStateId = 7077;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BrownTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenTerracotta : Block {
		public const int BlockId = 369;
		public const string BlockName = "green_terracotta";
		public const string BlockDisplayName = "Green Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7078;
		public const int BlockMinStateId = 7078;
		public const int BlockMaxStateId = 7078;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GreenTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedTerracotta : Block {
		public const int BlockId = 370;
		public const string BlockName = "red_terracotta";
		public const string BlockDisplayName = "Red Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7079;
		public const int BlockMinStateId = 7079;
		public const int BlockMaxStateId = 7079;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackTerracotta : Block {
		public const int BlockId = 371;
		public const string BlockName = "black_terracotta";
		public const string BlockDisplayName = "Black Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7080;
		public const int BlockMinStateId = 7080;
		public const int BlockMaxStateId = 7080;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlackTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteStainedGlassPane : Block {
		public const int BlockId = 372;
		public const string BlockName = "white_stained_glass_pane";
		public const string BlockDisplayName = "White Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7112;
		public const int BlockMinStateId = 7081;
		public const int BlockMaxStateId = 7112;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public WhiteStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeStainedGlassPane : Block {
		public const int BlockId = 373;
		public const string BlockName = "orange_stained_glass_pane";
		public const string BlockDisplayName = "Orange Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7144;
		public const int BlockMinStateId = 7113;
		public const int BlockMaxStateId = 7144;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public OrangeStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaStainedGlassPane : Block {
		public const int BlockId = 374;
		public const string BlockName = "magenta_stained_glass_pane";
		public const string BlockDisplayName = "Magenta Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7176;
		public const int BlockMinStateId = 7145;
		public const int BlockMaxStateId = 7176;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public MagentaStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueStainedGlassPane : Block {
		public const int BlockId = 375;
		public const string BlockName = "light_blue_stained_glass_pane";
		public const string BlockDisplayName = "Light Blue Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7208;
		public const int BlockMinStateId = 7177;
		public const int BlockMaxStateId = 7208;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public LightBlueStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowStainedGlassPane : Block {
		public const int BlockId = 376;
		public const string BlockName = "yellow_stained_glass_pane";
		public const string BlockDisplayName = "Yellow Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7240;
		public const int BlockMinStateId = 7209;
		public const int BlockMaxStateId = 7240;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public YellowStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeStainedGlassPane : Block {
		public const int BlockId = 377;
		public const string BlockName = "lime_stained_glass_pane";
		public const string BlockDisplayName = "Lime Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7272;
		public const int BlockMinStateId = 7241;
		public const int BlockMaxStateId = 7272;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public LimeStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkStainedGlassPane : Block {
		public const int BlockId = 378;
		public const string BlockName = "pink_stained_glass_pane";
		public const string BlockDisplayName = "Pink Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7304;
		public const int BlockMinStateId = 7273;
		public const int BlockMaxStateId = 7304;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public PinkStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayStainedGlassPane : Block {
		public const int BlockId = 379;
		public const string BlockName = "gray_stained_glass_pane";
		public const string BlockDisplayName = "Gray Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7336;
		public const int BlockMinStateId = 7305;
		public const int BlockMaxStateId = 7336;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public GrayStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayStainedGlassPane : Block {
		public const int BlockId = 380;
		public const string BlockName = "light_gray_stained_glass_pane";
		public const string BlockDisplayName = "Light Gray Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7368;
		public const int BlockMinStateId = 7337;
		public const int BlockMaxStateId = 7368;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public LightGrayStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanStainedGlassPane : Block {
		public const int BlockId = 381;
		public const string BlockName = "cyan_stained_glass_pane";
		public const string BlockDisplayName = "Cyan Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7400;
		public const int BlockMinStateId = 7369;
		public const int BlockMaxStateId = 7400;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public CyanStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleStainedGlassPane : Block {
		public const int BlockId = 382;
		public const string BlockName = "purple_stained_glass_pane";
		public const string BlockDisplayName = "Purple Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7432;
		public const int BlockMinStateId = 7401;
		public const int BlockMaxStateId = 7432;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public PurpleStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueStainedGlassPane : Block {
		public const int BlockId = 383;
		public const string BlockName = "blue_stained_glass_pane";
		public const string BlockDisplayName = "Blue Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7464;
		public const int BlockMinStateId = 7433;
		public const int BlockMaxStateId = 7464;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public BlueStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownStainedGlassPane : Block {
		public const int BlockId = 384;
		public const string BlockName = "brown_stained_glass_pane";
		public const string BlockDisplayName = "Brown Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7496;
		public const int BlockMinStateId = 7465;
		public const int BlockMaxStateId = 7496;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public BrownStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenStainedGlassPane : Block {
		public const int BlockId = 385;
		public const string BlockName = "green_stained_glass_pane";
		public const string BlockDisplayName = "Green Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7528;
		public const int BlockMinStateId = 7497;
		public const int BlockMaxStateId = 7528;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public GreenStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedStainedGlassPane : Block {
		public const int BlockId = 386;
		public const string BlockName = "red_stained_glass_pane";
		public const string BlockDisplayName = "Red Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7560;
		public const int BlockMinStateId = 7529;
		public const int BlockMaxStateId = 7560;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public RedStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackStainedGlassPane : Block {
		public const int BlockId = 387;
		public const string BlockName = "black_stained_glass_pane";
		public const string BlockDisplayName = "Black Stained Glass Pane";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7592;
		public const int BlockMinStateId = 7561;
		public const int BlockMaxStateId = 7592;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public BlackStainedGlassPane () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackStainedGlassPane (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaStairs : Block {
		public const int BlockId = 388;
		public const string BlockName = "acacia_stairs";
		public const string BlockDisplayName = "Acacia Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 7604;
		public const int BlockMinStateId = 7593;
		public const int BlockMaxStateId = 7672;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public AcaciaStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakStairs : Block {
		public const int BlockId = 389;
		public const string BlockName = "dark_oak_stairs";
		public const string BlockDisplayName = "Dark Oak Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 7684;
		public const int BlockMinStateId = 7673;
		public const int BlockMaxStateId = 7752;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public DarkOakStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SlimeBlock : Block {
		public const int BlockId = 390;
		public const string BlockName = "slime_block";
		public const string BlockDisplayName = "Slime Block";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7753;
		public const int BlockMinStateId = 7753;
		public const int BlockMaxStateId = 7753;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SlimeBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SlimeBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Barrier : Block {
		public const int BlockId = 391;
		public const string BlockName = "barrier";
		public const string BlockDisplayName = "Barrier";

		public const float BlockHardness = 3.4028235E+38F;
		public const float BlockResistance = 3600000.8F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7754;
		public const int BlockMinStateId = 7754;
		public const int BlockMaxStateId = 7754;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Barrier () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Barrier (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Light : Block {
		public const int BlockId = 392;
		public const string BlockName = "light";
		public const string BlockDisplayName = "Light";

		public const float BlockHardness = 3.4028235E+38F;
		public const float BlockResistance = 3600000.8F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 7786;
		public const int BlockMinStateId = 7755;
		public const int BlockMaxStateId = 7786;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("level", BlockStateProperty.BlockStatePropertyType.Int, 16, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public Light () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Light (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class IronTrapdoor : Block {
		public const int BlockId = 393;
		public const string BlockName = "iron_trapdoor";
		public const string BlockDisplayName = "Iron Trapdoor";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7802;
		public const int BlockMinStateId = 7787;
		public const int BlockMaxStateId = 7850;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 15);	

		public IronTrapdoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public IronTrapdoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Prismarine : Block {
		public const int BlockId = 394;
		public const string BlockName = "prismarine";
		public const string BlockDisplayName = "Prismarine";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7851;
		public const int BlockMinStateId = 7851;
		public const int BlockMaxStateId = 7851;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Prismarine () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Prismarine (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PrismarineBricks : Block {
		public const int BlockId = 395;
		public const string BlockName = "prismarine_bricks";
		public const string BlockDisplayName = "Prismarine Bricks";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7852;
		public const int BlockMinStateId = 7852;
		public const int BlockMaxStateId = 7852;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PrismarineBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PrismarineBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkPrismarine : Block {
		public const int BlockId = 396;
		public const string BlockName = "dark_prismarine";
		public const string BlockDisplayName = "Dark Prismarine";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7853;
		public const int BlockMinStateId = 7853;
		public const int BlockMaxStateId = 7853;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DarkPrismarine () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkPrismarine (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PrismarineStairs : Block {
		public const int BlockId = 397;
		public const string BlockName = "prismarine_stairs";
		public const string BlockDisplayName = "Prismarine Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7865;
		public const int BlockMinStateId = 7854;
		public const int BlockMaxStateId = 7933;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public PrismarineStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PrismarineStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PrismarineBrickStairs : Block {
		public const int BlockId = 398;
		public const string BlockName = "prismarine_brick_stairs";
		public const string BlockDisplayName = "Prismarine Brick Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 7945;
		public const int BlockMinStateId = 7934;
		public const int BlockMaxStateId = 8013;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public PrismarineBrickStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PrismarineBrickStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkPrismarineStairs : Block {
		public const int BlockId = 399;
		public const string BlockName = "dark_prismarine_stairs";
		public const string BlockDisplayName = "Dark Prismarine Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8025;
		public const int BlockMinStateId = 8014;
		public const int BlockMaxStateId = 8093;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public DarkPrismarineStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkPrismarineStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PrismarineSlab : Block {
		public const int BlockId = 400;
		public const string BlockName = "prismarine_slab";
		public const string BlockDisplayName = "Prismarine Slab";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8097;
		public const int BlockMinStateId = 8094;
		public const int BlockMaxStateId = 8099;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public PrismarineSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PrismarineSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PrismarineBrickSlab : Block {
		public const int BlockId = 401;
		public const string BlockName = "prismarine_brick_slab";
		public const string BlockDisplayName = "Prismarine Brick Slab";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8103;
		public const int BlockMinStateId = 8100;
		public const int BlockMaxStateId = 8105;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public PrismarineBrickSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PrismarineBrickSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkPrismarineSlab : Block {
		public const int BlockId = 402;
		public const string BlockName = "dark_prismarine_slab";
		public const string BlockDisplayName = "Dark Prismarine Slab";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8109;
		public const int BlockMinStateId = 8106;
		public const int BlockMaxStateId = 8111;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public DarkPrismarineSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkPrismarineSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SeaLantern : Block {
		public const int BlockId = 403;
		public const string BlockName = "sea_lantern";
		public const string BlockDisplayName = "Sea Lantern";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8112;
		public const int BlockMinStateId = 8112;
		public const int BlockMaxStateId = 8112;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SeaLantern () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SeaLantern (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class HayBlock : Block {
		public const int BlockId = 404;
		public const string BlockName = "hay_block";
		public const string BlockDisplayName = "Hay Bale";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/hoe";
		public const int BlockDefaultState = 8114;
		public const int BlockMinStateId = 8113;
		public const int BlockMaxStateId = 8115;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public HayBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public HayBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteCarpet : Block {
		public const int BlockId = 405;
		public const string BlockName = "white_carpet";
		public const string BlockDisplayName = "White Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8116;
		public const int BlockMinStateId = 8116;
		public const int BlockMaxStateId = 8116;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WhiteCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeCarpet : Block {
		public const int BlockId = 406;
		public const string BlockName = "orange_carpet";
		public const string BlockDisplayName = "Orange Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8117;
		public const int BlockMinStateId = 8117;
		public const int BlockMaxStateId = 8117;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public OrangeCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaCarpet : Block {
		public const int BlockId = 407;
		public const string BlockName = "magenta_carpet";
		public const string BlockDisplayName = "Magenta Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8118;
		public const int BlockMinStateId = 8118;
		public const int BlockMaxStateId = 8118;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public MagentaCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueCarpet : Block {
		public const int BlockId = 408;
		public const string BlockName = "light_blue_carpet";
		public const string BlockDisplayName = "Light Blue Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8119;
		public const int BlockMinStateId = 8119;
		public const int BlockMaxStateId = 8119;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LightBlueCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowCarpet : Block {
		public const int BlockId = 409;
		public const string BlockName = "yellow_carpet";
		public const string BlockDisplayName = "Yellow Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8120;
		public const int BlockMinStateId = 8120;
		public const int BlockMaxStateId = 8120;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public YellowCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeCarpet : Block {
		public const int BlockId = 410;
		public const string BlockName = "lime_carpet";
		public const string BlockDisplayName = "Lime Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8121;
		public const int BlockMinStateId = 8121;
		public const int BlockMaxStateId = 8121;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LimeCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkCarpet : Block {
		public const int BlockId = 411;
		public const string BlockName = "pink_carpet";
		public const string BlockDisplayName = "Pink Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8122;
		public const int BlockMinStateId = 8122;
		public const int BlockMaxStateId = 8122;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PinkCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayCarpet : Block {
		public const int BlockId = 412;
		public const string BlockName = "gray_carpet";
		public const string BlockDisplayName = "Gray Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8123;
		public const int BlockMinStateId = 8123;
		public const int BlockMaxStateId = 8123;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GrayCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayCarpet : Block {
		public const int BlockId = 413;
		public const string BlockName = "light_gray_carpet";
		public const string BlockDisplayName = "Light Gray Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8124;
		public const int BlockMinStateId = 8124;
		public const int BlockMaxStateId = 8124;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LightGrayCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanCarpet : Block {
		public const int BlockId = 414;
		public const string BlockName = "cyan_carpet";
		public const string BlockDisplayName = "Cyan Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8125;
		public const int BlockMinStateId = 8125;
		public const int BlockMaxStateId = 8125;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CyanCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleCarpet : Block {
		public const int BlockId = 415;
		public const string BlockName = "purple_carpet";
		public const string BlockDisplayName = "Purple Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8126;
		public const int BlockMinStateId = 8126;
		public const int BlockMaxStateId = 8126;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PurpleCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueCarpet : Block {
		public const int BlockId = 416;
		public const string BlockName = "blue_carpet";
		public const string BlockDisplayName = "Blue Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8127;
		public const int BlockMinStateId = 8127;
		public const int BlockMaxStateId = 8127;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlueCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownCarpet : Block {
		public const int BlockId = 417;
		public const string BlockName = "brown_carpet";
		public const string BlockDisplayName = "Brown Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8128;
		public const int BlockMinStateId = 8128;
		public const int BlockMaxStateId = 8128;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BrownCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenCarpet : Block {
		public const int BlockId = 418;
		public const string BlockName = "green_carpet";
		public const string BlockDisplayName = "Green Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8129;
		public const int BlockMinStateId = 8129;
		public const int BlockMaxStateId = 8129;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GreenCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedCarpet : Block {
		public const int BlockId = 419;
		public const string BlockName = "red_carpet";
		public const string BlockDisplayName = "Red Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8130;
		public const int BlockMinStateId = 8130;
		public const int BlockMaxStateId = 8130;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RedCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackCarpet : Block {
		public const int BlockId = 420;
		public const string BlockName = "black_carpet";
		public const string BlockDisplayName = "Black Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 8131;
		public const int BlockMinStateId = 8131;
		public const int BlockMaxStateId = 8131;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlackCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Terracotta : Block {
		public const int BlockId = 421;
		public const string BlockName = "terracotta";
		public const string BlockDisplayName = "Terracotta";

		public const float BlockHardness = 1.25F;
		public const float BlockResistance = 4.2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8132;
		public const int BlockMinStateId = 8132;
		public const int BlockMaxStateId = 8132;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Terracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Terracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CoalBlock : Block {
		public const int BlockId = 422;
		public const string BlockName = "coal_block";
		public const string BlockDisplayName = "Block of Coal";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8133;
		public const int BlockMinStateId = 8133;
		public const int BlockMaxStateId = 8133;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CoalBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CoalBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PackedIce : Block {
		public const int BlockId = 423;
		public const string BlockName = "packed_ice";
		public const string BlockDisplayName = "Packed Ice";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8134;
		public const int BlockMinStateId = 8134;
		public const int BlockMaxStateId = 8134;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PackedIce () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PackedIce (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Sunflower : Block {
		public const int BlockId = 424;
		public const string BlockName = "sunflower";
		public const string BlockDisplayName = "Sunflower";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 8136;
		public const int BlockMinStateId = 8135;
		public const int BlockMaxStateId = 8136;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }), }, 1);	

		public Sunflower () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Sunflower (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Lilac : Block {
		public const int BlockId = 425;
		public const string BlockName = "lilac";
		public const string BlockDisplayName = "Lilac";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 8138;
		public const int BlockMinStateId = 8137;
		public const int BlockMaxStateId = 8138;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }), }, 1);	

		public Lilac () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Lilac (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RoseBush : Block {
		public const int BlockId = 426;
		public const string BlockName = "rose_bush";
		public const string BlockDisplayName = "Rose Bush";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 8140;
		public const int BlockMinStateId = 8139;
		public const int BlockMaxStateId = 8140;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }), }, 1);	

		public RoseBush () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RoseBush (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Peony : Block {
		public const int BlockId = 427;
		public const string BlockName = "peony";
		public const string BlockDisplayName = "Peony";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 8142;
		public const int BlockMinStateId = 8141;
		public const int BlockMaxStateId = 8142;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }), }, 1);	

		public Peony () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Peony (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class TallGrass : Block {
		public const int BlockId = 428;
		public const string BlockName = "tall_grass";
		public const string BlockDisplayName = "Tall Grass";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 8144;
		public const int BlockMinStateId = 8143;
		public const int BlockMaxStateId = 8144;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }), }, 1);	

		public TallGrass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public TallGrass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LargeFern : Block {
		public const int BlockId = 429;
		public const string BlockName = "large_fern";
		public const string BlockDisplayName = "Large Fern";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 8146;
		public const int BlockMinStateId = 8145;
		public const int BlockMaxStateId = 8146;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }), }, 1);	

		public LargeFern () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LargeFern (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteBanner : Block {
		public const int BlockId = 430;
		public const string BlockName = "white_banner";
		public const string BlockDisplayName = "White Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8147;
		public const int BlockMinStateId = 8147;
		public const int BlockMaxStateId = 8162;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public WhiteBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeBanner : Block {
		public const int BlockId = 431;
		public const string BlockName = "orange_banner";
		public const string BlockDisplayName = "Orange Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8163;
		public const int BlockMinStateId = 8163;
		public const int BlockMaxStateId = 8178;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public OrangeBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaBanner : Block {
		public const int BlockId = 432;
		public const string BlockName = "magenta_banner";
		public const string BlockDisplayName = "Magenta Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8179;
		public const int BlockMinStateId = 8179;
		public const int BlockMaxStateId = 8194;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public MagentaBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueBanner : Block {
		public const int BlockId = 433;
		public const string BlockName = "light_blue_banner";
		public const string BlockDisplayName = "Light Blue Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8195;
		public const int BlockMinStateId = 8195;
		public const int BlockMaxStateId = 8210;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public LightBlueBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowBanner : Block {
		public const int BlockId = 434;
		public const string BlockName = "yellow_banner";
		public const string BlockDisplayName = "Yellow Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8211;
		public const int BlockMinStateId = 8211;
		public const int BlockMaxStateId = 8226;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public YellowBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeBanner : Block {
		public const int BlockId = 435;
		public const string BlockName = "lime_banner";
		public const string BlockDisplayName = "Lime Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8227;
		public const int BlockMinStateId = 8227;
		public const int BlockMaxStateId = 8242;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public LimeBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkBanner : Block {
		public const int BlockId = 436;
		public const string BlockName = "pink_banner";
		public const string BlockDisplayName = "Pink Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8243;
		public const int BlockMinStateId = 8243;
		public const int BlockMaxStateId = 8258;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public PinkBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayBanner : Block {
		public const int BlockId = 437;
		public const string BlockName = "gray_banner";
		public const string BlockDisplayName = "Gray Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8259;
		public const int BlockMinStateId = 8259;
		public const int BlockMaxStateId = 8274;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public GrayBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayBanner : Block {
		public const int BlockId = 438;
		public const string BlockName = "light_gray_banner";
		public const string BlockDisplayName = "Light Gray Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8275;
		public const int BlockMinStateId = 8275;
		public const int BlockMaxStateId = 8290;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public LightGrayBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanBanner : Block {
		public const int BlockId = 439;
		public const string BlockName = "cyan_banner";
		public const string BlockDisplayName = "Cyan Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8291;
		public const int BlockMinStateId = 8291;
		public const int BlockMaxStateId = 8306;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public CyanBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleBanner : Block {
		public const int BlockId = 440;
		public const string BlockName = "purple_banner";
		public const string BlockDisplayName = "Purple Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8307;
		public const int BlockMinStateId = 8307;
		public const int BlockMaxStateId = 8322;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public PurpleBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueBanner : Block {
		public const int BlockId = 441;
		public const string BlockName = "blue_banner";
		public const string BlockDisplayName = "Blue Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8323;
		public const int BlockMinStateId = 8323;
		public const int BlockMaxStateId = 8338;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public BlueBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownBanner : Block {
		public const int BlockId = 442;
		public const string BlockName = "brown_banner";
		public const string BlockDisplayName = "Brown Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8339;
		public const int BlockMinStateId = 8339;
		public const int BlockMaxStateId = 8354;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public BrownBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenBanner : Block {
		public const int BlockId = 443;
		public const string BlockName = "green_banner";
		public const string BlockDisplayName = "Green Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8355;
		public const int BlockMinStateId = 8355;
		public const int BlockMaxStateId = 8370;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public GreenBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedBanner : Block {
		public const int BlockId = 444;
		public const string BlockName = "red_banner";
		public const string BlockDisplayName = "Red Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8371;
		public const int BlockMinStateId = 8371;
		public const int BlockMaxStateId = 8386;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public RedBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackBanner : Block {
		public const int BlockId = 445;
		public const string BlockName = "black_banner";
		public const string BlockDisplayName = "Black Banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8387;
		public const int BlockMinStateId = 8387;
		public const int BlockMaxStateId = 8402;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public BlackBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteWallBanner : Block {
		public const int BlockId = 446;
		public const string BlockName = "white_wall_banner";
		public const string BlockDisplayName = "White wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8403;
		public const int BlockMinStateId = 8403;
		public const int BlockMaxStateId = 8406;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public WhiteWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeWallBanner : Block {
		public const int BlockId = 447;
		public const string BlockName = "orange_wall_banner";
		public const string BlockDisplayName = "Orange wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8407;
		public const int BlockMinStateId = 8407;
		public const int BlockMaxStateId = 8410;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public OrangeWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaWallBanner : Block {
		public const int BlockId = 448;
		public const string BlockName = "magenta_wall_banner";
		public const string BlockDisplayName = "Magenta wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8411;
		public const int BlockMinStateId = 8411;
		public const int BlockMaxStateId = 8414;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public MagentaWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueWallBanner : Block {
		public const int BlockId = 449;
		public const string BlockName = "light_blue_wall_banner";
		public const string BlockDisplayName = "Light blue wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8415;
		public const int BlockMinStateId = 8415;
		public const int BlockMaxStateId = 8418;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public LightBlueWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowWallBanner : Block {
		public const int BlockId = 450;
		public const string BlockName = "yellow_wall_banner";
		public const string BlockDisplayName = "Yellow wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8419;
		public const int BlockMinStateId = 8419;
		public const int BlockMaxStateId = 8422;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public YellowWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeWallBanner : Block {
		public const int BlockId = 451;
		public const string BlockName = "lime_wall_banner";
		public const string BlockDisplayName = "Lime wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8423;
		public const int BlockMinStateId = 8423;
		public const int BlockMaxStateId = 8426;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public LimeWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkWallBanner : Block {
		public const int BlockId = 452;
		public const string BlockName = "pink_wall_banner";
		public const string BlockDisplayName = "Pink wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8427;
		public const int BlockMinStateId = 8427;
		public const int BlockMaxStateId = 8430;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public PinkWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayWallBanner : Block {
		public const int BlockId = 453;
		public const string BlockName = "gray_wall_banner";
		public const string BlockDisplayName = "Gray wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8431;
		public const int BlockMinStateId = 8431;
		public const int BlockMaxStateId = 8434;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public GrayWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayWallBanner : Block {
		public const int BlockId = 454;
		public const string BlockName = "light_gray_wall_banner";
		public const string BlockDisplayName = "Light gray wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8435;
		public const int BlockMinStateId = 8435;
		public const int BlockMaxStateId = 8438;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public LightGrayWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanWallBanner : Block {
		public const int BlockId = 455;
		public const string BlockName = "cyan_wall_banner";
		public const string BlockDisplayName = "Cyan wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8439;
		public const int BlockMinStateId = 8439;
		public const int BlockMaxStateId = 8442;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public CyanWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleWallBanner : Block {
		public const int BlockId = 456;
		public const string BlockName = "purple_wall_banner";
		public const string BlockDisplayName = "Purple wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8443;
		public const int BlockMinStateId = 8443;
		public const int BlockMaxStateId = 8446;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public PurpleWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueWallBanner : Block {
		public const int BlockId = 457;
		public const string BlockName = "blue_wall_banner";
		public const string BlockDisplayName = "Blue wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8447;
		public const int BlockMinStateId = 8447;
		public const int BlockMaxStateId = 8450;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public BlueWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownWallBanner : Block {
		public const int BlockId = 458;
		public const string BlockName = "brown_wall_banner";
		public const string BlockDisplayName = "Brown wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8451;
		public const int BlockMinStateId = 8451;
		public const int BlockMaxStateId = 8454;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public BrownWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenWallBanner : Block {
		public const int BlockId = 459;
		public const string BlockName = "green_wall_banner";
		public const string BlockDisplayName = "Green wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8455;
		public const int BlockMinStateId = 8455;
		public const int BlockMaxStateId = 8458;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public GreenWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedWallBanner : Block {
		public const int BlockId = 460;
		public const string BlockName = "red_wall_banner";
		public const string BlockDisplayName = "Red wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8459;
		public const int BlockMinStateId = 8459;
		public const int BlockMaxStateId = 8462;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public RedWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackWallBanner : Block {
		public const int BlockId = 461;
		public const string BlockName = "black_wall_banner";
		public const string BlockDisplayName = "Black wall banner";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8463;
		public const int BlockMinStateId = 8463;
		public const int BlockMaxStateId = 8466;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public BlackWallBanner () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackWallBanner (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedSandstone : Block {
		public const int BlockId = 462;
		public const string BlockName = "red_sandstone";
		public const string BlockDisplayName = "Red Sandstone";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8467;
		public const int BlockMinStateId = 8467;
		public const int BlockMaxStateId = 8467;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RedSandstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedSandstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ChiseledRedSandstone : Block {
		public const int BlockId = 463;
		public const string BlockName = "chiseled_red_sandstone";
		public const string BlockDisplayName = "Chiseled Red Sandstone";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8468;
		public const int BlockMinStateId = 8468;
		public const int BlockMaxStateId = 8468;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public ChiseledRedSandstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ChiseledRedSandstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CutRedSandstone : Block {
		public const int BlockId = 464;
		public const string BlockName = "cut_red_sandstone";
		public const string BlockDisplayName = "Cut Red Sandstone";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8469;
		public const int BlockMinStateId = 8469;
		public const int BlockMaxStateId = 8469;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CutRedSandstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CutRedSandstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedSandstoneStairs : Block {
		public const int BlockId = 465;
		public const string BlockName = "red_sandstone_stairs";
		public const string BlockDisplayName = "Red Sandstone Stairs";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8481;
		public const int BlockMinStateId = 8470;
		public const int BlockMaxStateId = 8549;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public RedSandstoneStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedSandstoneStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OakSlab : Block {
		public const int BlockId = 466;
		public const string BlockName = "oak_slab";
		public const string BlockDisplayName = "Oak Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8553;
		public const int BlockMinStateId = 8550;
		public const int BlockMaxStateId = 8555;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public OakSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OakSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SpruceSlab : Block {
		public const int BlockId = 467;
		public const string BlockName = "spruce_slab";
		public const string BlockDisplayName = "Spruce Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8559;
		public const int BlockMinStateId = 8556;
		public const int BlockMaxStateId = 8561;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public SpruceSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SpruceSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchSlab : Block {
		public const int BlockId = 468;
		public const string BlockName = "birch_slab";
		public const string BlockDisplayName = "Birch Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8565;
		public const int BlockMinStateId = 8562;
		public const int BlockMaxStateId = 8567;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public BirchSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JungleSlab : Block {
		public const int BlockId = 469;
		public const string BlockName = "jungle_slab";
		public const string BlockDisplayName = "Jungle Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8571;
		public const int BlockMinStateId = 8568;
		public const int BlockMaxStateId = 8573;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public JungleSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JungleSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaSlab : Block {
		public const int BlockId = 470;
		public const string BlockName = "acacia_slab";
		public const string BlockDisplayName = "Acacia Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8577;
		public const int BlockMinStateId = 8574;
		public const int BlockMaxStateId = 8579;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public AcaciaSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakSlab : Block {
		public const int BlockId = 471;
		public const string BlockName = "dark_oak_slab";
		public const string BlockDisplayName = "Dark Oak Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8583;
		public const int BlockMinStateId = 8580;
		public const int BlockMaxStateId = 8585;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public DarkOakSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StoneSlab : Block {
		public const int BlockId = 472;
		public const string BlockName = "stone_slab";
		public const string BlockDisplayName = "Stone Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8589;
		public const int BlockMinStateId = 8586;
		public const int BlockMaxStateId = 8591;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public StoneSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StoneSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmoothStoneSlab : Block {
		public const int BlockId = 473;
		public const string BlockName = "smooth_stone_slab";
		public const string BlockDisplayName = "Smooth Stone Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8595;
		public const int BlockMinStateId = 8592;
		public const int BlockMaxStateId = 8597;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public SmoothStoneSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmoothStoneSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SandstoneSlab : Block {
		public const int BlockId = 474;
		public const string BlockName = "sandstone_slab";
		public const string BlockDisplayName = "Sandstone Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8601;
		public const int BlockMinStateId = 8598;
		public const int BlockMaxStateId = 8603;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public SandstoneSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SandstoneSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CutSandstoneSlab : Block {
		public const int BlockId = 475;
		public const string BlockName = "cut_sandstone_slab";
		public const string BlockDisplayName = "Cut Sandstone Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8607;
		public const int BlockMinStateId = 8604;
		public const int BlockMaxStateId = 8609;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public CutSandstoneSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CutSandstoneSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PetrifiedOakSlab : Block {
		public const int BlockId = 476;
		public const string BlockName = "petrified_oak_slab";
		public const string BlockDisplayName = "Petrified Oak Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8613;
		public const int BlockMinStateId = 8610;
		public const int BlockMaxStateId = 8615;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public PetrifiedOakSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PetrifiedOakSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CobblestoneSlab : Block {
		public const int BlockId = 477;
		public const string BlockName = "cobblestone_slab";
		public const string BlockDisplayName = "Cobblestone Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8619;
		public const int BlockMinStateId = 8616;
		public const int BlockMaxStateId = 8621;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public CobblestoneSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CobblestoneSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrickSlab : Block {
		public const int BlockId = 478;
		public const string BlockName = "brick_slab";
		public const string BlockDisplayName = "Brick Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8625;
		public const int BlockMinStateId = 8622;
		public const int BlockMaxStateId = 8627;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public BrickSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrickSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StoneBrickSlab : Block {
		public const int BlockId = 479;
		public const string BlockName = "stone_brick_slab";
		public const string BlockDisplayName = "Stone Brick Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8631;
		public const int BlockMinStateId = 8628;
		public const int BlockMaxStateId = 8633;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public StoneBrickSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StoneBrickSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class NetherBrickSlab : Block {
		public const int BlockId = 480;
		public const string BlockName = "nether_brick_slab";
		public const string BlockDisplayName = "Nether Brick Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8637;
		public const int BlockMinStateId = 8634;
		public const int BlockMaxStateId = 8639;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public NetherBrickSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public NetherBrickSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class QuartzSlab : Block {
		public const int BlockId = 481;
		public const string BlockName = "quartz_slab";
		public const string BlockDisplayName = "Quartz Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8643;
		public const int BlockMinStateId = 8640;
		public const int BlockMaxStateId = 8645;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public QuartzSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public QuartzSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedSandstoneSlab : Block {
		public const int BlockId = 482;
		public const string BlockName = "red_sandstone_slab";
		public const string BlockDisplayName = "Red Sandstone Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8649;
		public const int BlockMinStateId = 8646;
		public const int BlockMaxStateId = 8651;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public RedSandstoneSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedSandstoneSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CutRedSandstoneSlab : Block {
		public const int BlockId = 483;
		public const string BlockName = "cut_red_sandstone_slab";
		public const string BlockDisplayName = "Cut Red Sandstone Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8655;
		public const int BlockMinStateId = 8652;
		public const int BlockMaxStateId = 8657;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public CutRedSandstoneSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CutRedSandstoneSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpurSlab : Block {
		public const int BlockId = 484;
		public const string BlockName = "purpur_slab";
		public const string BlockDisplayName = "Purpur Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8661;
		public const int BlockMinStateId = 8658;
		public const int BlockMaxStateId = 8663;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public PurpurSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpurSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmoothStone : Block {
		public const int BlockId = 485;
		public const string BlockName = "smooth_stone";
		public const string BlockDisplayName = "Smooth Stone";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8664;
		public const int BlockMinStateId = 8664;
		public const int BlockMaxStateId = 8664;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SmoothStone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmoothStone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmoothSandstone : Block {
		public const int BlockId = 486;
		public const string BlockName = "smooth_sandstone";
		public const string BlockDisplayName = "Smooth Sandstone";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8665;
		public const int BlockMinStateId = 8665;
		public const int BlockMaxStateId = 8665;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SmoothSandstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmoothSandstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmoothQuartz : Block {
		public const int BlockId = 487;
		public const string BlockName = "smooth_quartz";
		public const string BlockDisplayName = "Smooth Quartz Block";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8666;
		public const int BlockMinStateId = 8666;
		public const int BlockMaxStateId = 8666;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SmoothQuartz () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmoothQuartz (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmoothRedSandstone : Block {
		public const int BlockId = 488;
		public const string BlockName = "smooth_red_sandstone";
		public const string BlockDisplayName = "Smooth Red Sandstone";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 8667;
		public const int BlockMinStateId = 8667;
		public const int BlockMaxStateId = 8667;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SmoothRedSandstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmoothRedSandstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SpruceFenceGate : Block {
		public const int BlockId = 489;
		public const string BlockName = "spruce_fence_gate";
		public const string BlockDisplayName = "Spruce Fence Gate";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8675;
		public const int BlockMinStateId = 8668;
		public const int BlockMaxStateId = 8699;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("in_wall", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 7);	

		public SpruceFenceGate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SpruceFenceGate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchFenceGate : Block {
		public const int BlockId = 490;
		public const string BlockName = "birch_fence_gate";
		public const string BlockDisplayName = "Birch Fence Gate";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8707;
		public const int BlockMinStateId = 8700;
		public const int BlockMaxStateId = 8731;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("in_wall", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 7);	

		public BirchFenceGate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchFenceGate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JungleFenceGate : Block {
		public const int BlockId = 491;
		public const string BlockName = "jungle_fence_gate";
		public const string BlockDisplayName = "Jungle Fence Gate";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8739;
		public const int BlockMinStateId = 8732;
		public const int BlockMaxStateId = 8763;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("in_wall", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 7);	

		public JungleFenceGate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JungleFenceGate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaFenceGate : Block {
		public const int BlockId = 492;
		public const string BlockName = "acacia_fence_gate";
		public const string BlockDisplayName = "Acacia Fence Gate";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8771;
		public const int BlockMinStateId = 8764;
		public const int BlockMaxStateId = 8795;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("in_wall", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 7);	

		public AcaciaFenceGate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaFenceGate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakFenceGate : Block {
		public const int BlockId = 493;
		public const string BlockName = "dark_oak_fence_gate";
		public const string BlockDisplayName = "Dark Oak Fence Gate";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8803;
		public const int BlockMinStateId = 8796;
		public const int BlockMaxStateId = 8827;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("in_wall", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 7);	

		public DarkOakFenceGate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakFenceGate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SpruceFence : Block {
		public const int BlockId = 494;
		public const string BlockName = "spruce_fence";
		public const string BlockDisplayName = "Spruce Fence";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8859;
		public const int BlockMinStateId = 8828;
		public const int BlockMaxStateId = 8859;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public SpruceFence () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SpruceFence (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchFence : Block {
		public const int BlockId = 495;
		public const string BlockName = "birch_fence";
		public const string BlockDisplayName = "Birch Fence";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8891;
		public const int BlockMinStateId = 8860;
		public const int BlockMaxStateId = 8891;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public BirchFence () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchFence (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JungleFence : Block {
		public const int BlockId = 496;
		public const string BlockName = "jungle_fence";
		public const string BlockDisplayName = "Jungle Fence";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8923;
		public const int BlockMinStateId = 8892;
		public const int BlockMaxStateId = 8923;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public JungleFence () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JungleFence (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaFence : Block {
		public const int BlockId = 497;
		public const string BlockName = "acacia_fence";
		public const string BlockDisplayName = "Acacia Fence";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8955;
		public const int BlockMinStateId = 8924;
		public const int BlockMaxStateId = 8955;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public AcaciaFence () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaFence (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakFence : Block {
		public const int BlockId = 498;
		public const string BlockName = "dark_oak_fence";
		public const string BlockDisplayName = "Dark Oak Fence";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8987;
		public const int BlockMinStateId = 8956;
		public const int BlockMaxStateId = 8987;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public DarkOakFence () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakFence (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SpruceDoor : Block {
		public const int BlockId = 499;
		public const string BlockName = "spruce_door";
		public const string BlockDisplayName = "Spruce Door";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 8999;
		public const int BlockMinStateId = 8988;
		public const int BlockMaxStateId = 9051;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }),new BlockStateProperty("hinge", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "left", "right" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public SpruceDoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SpruceDoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BirchDoor : Block {
		public const int BlockId = 500;
		public const string BlockName = "birch_door";
		public const string BlockDisplayName = "Birch Door";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 9063;
		public const int BlockMinStateId = 9052;
		public const int BlockMaxStateId = 9115;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }),new BlockStateProperty("hinge", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "left", "right" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public BirchDoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BirchDoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class JungleDoor : Block {
		public const int BlockId = 501;
		public const string BlockName = "jungle_door";
		public const string BlockDisplayName = "Jungle Door";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 9127;
		public const int BlockMinStateId = 9116;
		public const int BlockMaxStateId = 9179;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }),new BlockStateProperty("hinge", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "left", "right" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public JungleDoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public JungleDoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AcaciaDoor : Block {
		public const int BlockId = 502;
		public const string BlockName = "acacia_door";
		public const string BlockDisplayName = "Acacia Door";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 9191;
		public const int BlockMinStateId = 9180;
		public const int BlockMaxStateId = 9243;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }),new BlockStateProperty("hinge", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "left", "right" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public AcaciaDoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AcaciaDoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DarkOakDoor : Block {
		public const int BlockId = 503;
		public const string BlockName = "dark_oak_door";
		public const string BlockDisplayName = "Dark Oak Door";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 9255;
		public const int BlockMinStateId = 9244;
		public const int BlockMaxStateId = 9307;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }),new BlockStateProperty("hinge", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "left", "right" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public DarkOakDoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DarkOakDoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class EndRod : Block {
		public const int BlockId = 504;
		public const string BlockName = "end_rod";
		public const string BlockDisplayName = "End Rod";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 14;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9312;
		public const int BlockMinStateId = 9308;
		public const int BlockMaxStateId = 9313;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public EndRod () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public EndRod (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ChorusPlant : Block {
		public const int BlockId = 505;
		public const string BlockName = "chorus_plant";
		public const string BlockDisplayName = "Chorus Plant";

		public const float BlockHardness = 0.4F;
		public const float BlockResistance = 0.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 9377;
		public const int BlockMinStateId = 9314;
		public const int BlockMaxStateId = 9377;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("down", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 63);	

		public ChorusPlant () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ChorusPlant (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ChorusFlower : Block {
		public const int BlockId = 506;
		public const string BlockName = "chorus_flower";
		public const string BlockDisplayName = "Chorus Flower";

		public const float BlockHardness = 0.4F;
		public const float BlockResistance = 0.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 9378;
		public const int BlockMinStateId = 9378;
		public const int BlockMaxStateId = 9383;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 6, null), }, 0);	

		public ChorusFlower () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ChorusFlower (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpurBlock : Block {
		public const int BlockId = 507;
		public const string BlockName = "purpur_block";
		public const string BlockDisplayName = "Purpur Block";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9384;
		public const int BlockMinStateId = 9384;
		public const int BlockMaxStateId = 9384;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PurpurBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpurBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpurPillar : Block {
		public const int BlockId = 508;
		public const string BlockName = "purpur_pillar";
		public const string BlockDisplayName = "Purpur Pillar";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9386;
		public const int BlockMinStateId = 9385;
		public const int BlockMaxStateId = 9387;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public PurpurPillar () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpurPillar (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpurStairs : Block {
		public const int BlockId = 509;
		public const string BlockName = "purpur_stairs";
		public const string BlockDisplayName = "Purpur Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9399;
		public const int BlockMinStateId = 9388;
		public const int BlockMaxStateId = 9467;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public PurpurStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpurStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class EndStoneBricks : Block {
		public const int BlockId = 510;
		public const string BlockName = "end_stone_bricks";
		public const string BlockDisplayName = "End Stone Bricks";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 9F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9468;
		public const int BlockMinStateId = 9468;
		public const int BlockMaxStateId = 9468;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public EndStoneBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public EndStoneBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Beetroots : Block {
		public const int BlockId = 511;
		public const string BlockName = "beetroots";
		public const string BlockDisplayName = "Beetroots";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 9469;
		public const int BlockMinStateId = 9469;
		public const int BlockMaxStateId = 9472;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 4, null), }, 0);	

		public Beetroots () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Beetroots (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DirtPath : Block {
		public const int BlockId = 512;
		public const string BlockName = "dirt_path";
		public const string BlockDisplayName = "Dirt Path";

		public const float BlockHardness = 0.65F;
		public const float BlockResistance = 0.65F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9473;
		public const int BlockMinStateId = 9473;
		public const int BlockMaxStateId = 9473;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DirtPath () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DirtPath (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class EndGateway : Block {
		public const int BlockId = 513;
		public const string BlockName = "end_gateway";
		public const string BlockDisplayName = "End Gateway";

		public const float BlockHardness = 3.4028235E+38F;
		public const float BlockResistance = 3600000F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9474;
		public const int BlockMinStateId = 9474;
		public const int BlockMaxStateId = 9474;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public EndGateway () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public EndGateway (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RepeatingCommandBlock : Block {
		public const int BlockId = 514;
		public const string BlockName = "repeating_command_block";
		public const string BlockDisplayName = "Repeating Command Block";

		public const float BlockHardness = 3.4028235E+38F;
		public const float BlockResistance = 3600000F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9481;
		public const int BlockMinStateId = 9475;
		public const int BlockMaxStateId = 9486;
				public static readonly int[]? BlockHarvestTools = new int[] {  };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("conditional", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 6);	

		public RepeatingCommandBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RepeatingCommandBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ChainCommandBlock : Block {
		public const int BlockId = 515;
		public const string BlockName = "chain_command_block";
		public const string BlockDisplayName = "Chain Command Block";

		public const float BlockHardness = 3.4028235E+38F;
		public const float BlockResistance = 3600000F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9493;
		public const int BlockMinStateId = 9487;
		public const int BlockMaxStateId = 9498;
				public static readonly int[]? BlockHarvestTools = new int[] {  };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("conditional", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 6);	

		public ChainCommandBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ChainCommandBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class FrostedIce : Block {
		public const int BlockId = 516;
		public const string BlockName = "frosted_ice";
		public const string BlockDisplayName = "Frosted Ice";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9499;
		public const int BlockMinStateId = 9499;
		public const int BlockMaxStateId = 9502;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 4, null), }, 0);	

		public FrostedIce () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public FrostedIce (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagmaBlock : Block {
		public const int BlockId = 517;
		public const string BlockName = "magma_block";
		public const string BlockDisplayName = "Magma Block";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 3;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9503;
		public const int BlockMinStateId = 9503;
		public const int BlockMaxStateId = 9503;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public MagmaBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagmaBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class NetherWartBlock : Block {
		public const int BlockId = 518;
		public const string BlockName = "nether_wart_block";
		public const string BlockDisplayName = "Nether Wart Block";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/hoe";
		public const int BlockDefaultState = 9504;
		public const int BlockMinStateId = 9504;
		public const int BlockMaxStateId = 9504;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public NetherWartBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public NetherWartBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedNetherBricks : Block {
		public const int BlockId = 519;
		public const string BlockName = "red_nether_bricks";
		public const string BlockDisplayName = "Red Nether Bricks";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9505;
		public const int BlockMinStateId = 9505;
		public const int BlockMaxStateId = 9505;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RedNetherBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedNetherBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BoneBlock : Block {
		public const int BlockId = 520;
		public const string BlockName = "bone_block";
		public const string BlockDisplayName = "Bone Block";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9507;
		public const int BlockMinStateId = 9506;
		public const int BlockMaxStateId = 9508;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public BoneBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BoneBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StructureVoid : Block {
		public const int BlockId = 521;
		public const string BlockName = "structure_void";
		public const string BlockDisplayName = "Structure Void";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9509;
		public const int BlockMinStateId = 9509;
		public const int BlockMaxStateId = 9509;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public StructureVoid () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StructureVoid (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Observer : Block {
		public const int BlockId = 522;
		public const string BlockName = "observer";
		public const string BlockDisplayName = "Observer";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9515;
		public const int BlockMinStateId = 9510;
		public const int BlockMaxStateId = 9521;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 5);	

		public Observer () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Observer (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ShulkerBox : Block {
		public const int BlockId = 523;
		public const string BlockName = "shulker_box";
		public const string BlockDisplayName = "Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9526;
		public const int BlockMinStateId = 9522;
		public const int BlockMaxStateId = 9527;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public ShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteShulkerBox : Block {
		public const int BlockId = 524;
		public const string BlockName = "white_shulker_box";
		public const string BlockDisplayName = "White Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9532;
		public const int BlockMinStateId = 9528;
		public const int BlockMaxStateId = 9533;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public WhiteShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeShulkerBox : Block {
		public const int BlockId = 525;
		public const string BlockName = "orange_shulker_box";
		public const string BlockDisplayName = "Orange Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9538;
		public const int BlockMinStateId = 9534;
		public const int BlockMaxStateId = 9539;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public OrangeShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaShulkerBox : Block {
		public const int BlockId = 526;
		public const string BlockName = "magenta_shulker_box";
		public const string BlockDisplayName = "Magenta Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9544;
		public const int BlockMinStateId = 9540;
		public const int BlockMaxStateId = 9545;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public MagentaShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueShulkerBox : Block {
		public const int BlockId = 527;
		public const string BlockName = "light_blue_shulker_box";
		public const string BlockDisplayName = "Light Blue Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9550;
		public const int BlockMinStateId = 9546;
		public const int BlockMaxStateId = 9551;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public LightBlueShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowShulkerBox : Block {
		public const int BlockId = 528;
		public const string BlockName = "yellow_shulker_box";
		public const string BlockDisplayName = "Yellow Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9556;
		public const int BlockMinStateId = 9552;
		public const int BlockMaxStateId = 9557;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public YellowShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeShulkerBox : Block {
		public const int BlockId = 529;
		public const string BlockName = "lime_shulker_box";
		public const string BlockDisplayName = "Lime Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9562;
		public const int BlockMinStateId = 9558;
		public const int BlockMaxStateId = 9563;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public LimeShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkShulkerBox : Block {
		public const int BlockId = 530;
		public const string BlockName = "pink_shulker_box";
		public const string BlockDisplayName = "Pink Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9568;
		public const int BlockMinStateId = 9564;
		public const int BlockMaxStateId = 9569;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public PinkShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayShulkerBox : Block {
		public const int BlockId = 531;
		public const string BlockName = "gray_shulker_box";
		public const string BlockDisplayName = "Gray Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9574;
		public const int BlockMinStateId = 9570;
		public const int BlockMaxStateId = 9575;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public GrayShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayShulkerBox : Block {
		public const int BlockId = 532;
		public const string BlockName = "light_gray_shulker_box";
		public const string BlockDisplayName = "Light Gray Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9580;
		public const int BlockMinStateId = 9576;
		public const int BlockMaxStateId = 9581;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public LightGrayShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanShulkerBox : Block {
		public const int BlockId = 533;
		public const string BlockName = "cyan_shulker_box";
		public const string BlockDisplayName = "Cyan Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9586;
		public const int BlockMinStateId = 9582;
		public const int BlockMaxStateId = 9587;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public CyanShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleShulkerBox : Block {
		public const int BlockId = 534;
		public const string BlockName = "purple_shulker_box";
		public const string BlockDisplayName = "Purple Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9592;
		public const int BlockMinStateId = 9588;
		public const int BlockMaxStateId = 9593;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public PurpleShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueShulkerBox : Block {
		public const int BlockId = 535;
		public const string BlockName = "blue_shulker_box";
		public const string BlockDisplayName = "Blue Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9598;
		public const int BlockMinStateId = 9594;
		public const int BlockMaxStateId = 9599;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public BlueShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownShulkerBox : Block {
		public const int BlockId = 536;
		public const string BlockName = "brown_shulker_box";
		public const string BlockDisplayName = "Brown Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9604;
		public const int BlockMinStateId = 9600;
		public const int BlockMaxStateId = 9605;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public BrownShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenShulkerBox : Block {
		public const int BlockId = 537;
		public const string BlockName = "green_shulker_box";
		public const string BlockDisplayName = "Green Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9610;
		public const int BlockMinStateId = 9606;
		public const int BlockMaxStateId = 9611;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public GreenShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedShulkerBox : Block {
		public const int BlockId = 538;
		public const string BlockName = "red_shulker_box";
		public const string BlockDisplayName = "Red Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9616;
		public const int BlockMinStateId = 9612;
		public const int BlockMaxStateId = 9617;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public RedShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackShulkerBox : Block {
		public const int BlockId = 539;
		public const string BlockName = "black_shulker_box";
		public const string BlockDisplayName = "Black Shulker Box";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9622;
		public const int BlockMinStateId = 9618;
		public const int BlockMaxStateId = 9623;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }), }, 4);	

		public BlackShulkerBox () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackShulkerBox (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteGlazedTerracotta : Block {
		public const int BlockId = 540;
		public const string BlockName = "white_glazed_terracotta";
		public const string BlockDisplayName = "White Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9624;
		public const int BlockMinStateId = 9624;
		public const int BlockMaxStateId = 9627;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public WhiteGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeGlazedTerracotta : Block {
		public const int BlockId = 541;
		public const string BlockName = "orange_glazed_terracotta";
		public const string BlockDisplayName = "Orange Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9628;
		public const int BlockMinStateId = 9628;
		public const int BlockMaxStateId = 9631;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public OrangeGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaGlazedTerracotta : Block {
		public const int BlockId = 542;
		public const string BlockName = "magenta_glazed_terracotta";
		public const string BlockDisplayName = "Magenta Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9632;
		public const int BlockMinStateId = 9632;
		public const int BlockMaxStateId = 9635;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public MagentaGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueGlazedTerracotta : Block {
		public const int BlockId = 543;
		public const string BlockName = "light_blue_glazed_terracotta";
		public const string BlockDisplayName = "Light Blue Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9636;
		public const int BlockMinStateId = 9636;
		public const int BlockMaxStateId = 9639;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public LightBlueGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowGlazedTerracotta : Block {
		public const int BlockId = 544;
		public const string BlockName = "yellow_glazed_terracotta";
		public const string BlockDisplayName = "Yellow Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9640;
		public const int BlockMinStateId = 9640;
		public const int BlockMaxStateId = 9643;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public YellowGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeGlazedTerracotta : Block {
		public const int BlockId = 545;
		public const string BlockName = "lime_glazed_terracotta";
		public const string BlockDisplayName = "Lime Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9644;
		public const int BlockMinStateId = 9644;
		public const int BlockMaxStateId = 9647;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public LimeGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkGlazedTerracotta : Block {
		public const int BlockId = 546;
		public const string BlockName = "pink_glazed_terracotta";
		public const string BlockDisplayName = "Pink Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9648;
		public const int BlockMinStateId = 9648;
		public const int BlockMaxStateId = 9651;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public PinkGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayGlazedTerracotta : Block {
		public const int BlockId = 547;
		public const string BlockName = "gray_glazed_terracotta";
		public const string BlockDisplayName = "Gray Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9652;
		public const int BlockMinStateId = 9652;
		public const int BlockMaxStateId = 9655;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public GrayGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayGlazedTerracotta : Block {
		public const int BlockId = 548;
		public const string BlockName = "light_gray_glazed_terracotta";
		public const string BlockDisplayName = "Light Gray Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9656;
		public const int BlockMinStateId = 9656;
		public const int BlockMaxStateId = 9659;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public LightGrayGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanGlazedTerracotta : Block {
		public const int BlockId = 549;
		public const string BlockName = "cyan_glazed_terracotta";
		public const string BlockDisplayName = "Cyan Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9660;
		public const int BlockMinStateId = 9660;
		public const int BlockMaxStateId = 9663;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public CyanGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleGlazedTerracotta : Block {
		public const int BlockId = 550;
		public const string BlockName = "purple_glazed_terracotta";
		public const string BlockDisplayName = "Purple Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9664;
		public const int BlockMinStateId = 9664;
		public const int BlockMaxStateId = 9667;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public PurpleGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueGlazedTerracotta : Block {
		public const int BlockId = 551;
		public const string BlockName = "blue_glazed_terracotta";
		public const string BlockDisplayName = "Blue Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9668;
		public const int BlockMinStateId = 9668;
		public const int BlockMaxStateId = 9671;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public BlueGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownGlazedTerracotta : Block {
		public const int BlockId = 552;
		public const string BlockName = "brown_glazed_terracotta";
		public const string BlockDisplayName = "Brown Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9672;
		public const int BlockMinStateId = 9672;
		public const int BlockMaxStateId = 9675;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public BrownGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenGlazedTerracotta : Block {
		public const int BlockId = 553;
		public const string BlockName = "green_glazed_terracotta";
		public const string BlockDisplayName = "Green Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9676;
		public const int BlockMinStateId = 9676;
		public const int BlockMaxStateId = 9679;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public GreenGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedGlazedTerracotta : Block {
		public const int BlockId = 554;
		public const string BlockName = "red_glazed_terracotta";
		public const string BlockDisplayName = "Red Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9680;
		public const int BlockMinStateId = 9680;
		public const int BlockMaxStateId = 9683;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public RedGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackGlazedTerracotta : Block {
		public const int BlockId = 555;
		public const string BlockName = "black_glazed_terracotta";
		public const string BlockDisplayName = "Black Glazed Terracotta";

		public const float BlockHardness = 1.4F;
		public const float BlockResistance = 1.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9684;
		public const int BlockMinStateId = 9684;
		public const int BlockMaxStateId = 9687;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public BlackGlazedTerracotta () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackGlazedTerracotta (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteConcrete : Block {
		public const int BlockId = 556;
		public const string BlockName = "white_concrete";
		public const string BlockDisplayName = "White Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9688;
		public const int BlockMinStateId = 9688;
		public const int BlockMaxStateId = 9688;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WhiteConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeConcrete : Block {
		public const int BlockId = 557;
		public const string BlockName = "orange_concrete";
		public const string BlockDisplayName = "Orange Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9689;
		public const int BlockMinStateId = 9689;
		public const int BlockMaxStateId = 9689;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public OrangeConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaConcrete : Block {
		public const int BlockId = 558;
		public const string BlockName = "magenta_concrete";
		public const string BlockDisplayName = "Magenta Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9690;
		public const int BlockMinStateId = 9690;
		public const int BlockMaxStateId = 9690;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public MagentaConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueConcrete : Block {
		public const int BlockId = 559;
		public const string BlockName = "light_blue_concrete";
		public const string BlockDisplayName = "Light Blue Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9691;
		public const int BlockMinStateId = 9691;
		public const int BlockMaxStateId = 9691;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LightBlueConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowConcrete : Block {
		public const int BlockId = 560;
		public const string BlockName = "yellow_concrete";
		public const string BlockDisplayName = "Yellow Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9692;
		public const int BlockMinStateId = 9692;
		public const int BlockMaxStateId = 9692;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public YellowConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeConcrete : Block {
		public const int BlockId = 561;
		public const string BlockName = "lime_concrete";
		public const string BlockDisplayName = "Lime Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9693;
		public const int BlockMinStateId = 9693;
		public const int BlockMaxStateId = 9693;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LimeConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkConcrete : Block {
		public const int BlockId = 562;
		public const string BlockName = "pink_concrete";
		public const string BlockDisplayName = "Pink Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9694;
		public const int BlockMinStateId = 9694;
		public const int BlockMaxStateId = 9694;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PinkConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayConcrete : Block {
		public const int BlockId = 563;
		public const string BlockName = "gray_concrete";
		public const string BlockDisplayName = "Gray Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9695;
		public const int BlockMinStateId = 9695;
		public const int BlockMaxStateId = 9695;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GrayConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayConcrete : Block {
		public const int BlockId = 564;
		public const string BlockName = "light_gray_concrete";
		public const string BlockDisplayName = "Light Gray Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9696;
		public const int BlockMinStateId = 9696;
		public const int BlockMaxStateId = 9696;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LightGrayConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanConcrete : Block {
		public const int BlockId = 565;
		public const string BlockName = "cyan_concrete";
		public const string BlockDisplayName = "Cyan Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9697;
		public const int BlockMinStateId = 9697;
		public const int BlockMaxStateId = 9697;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CyanConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleConcrete : Block {
		public const int BlockId = 566;
		public const string BlockName = "purple_concrete";
		public const string BlockDisplayName = "Purple Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9698;
		public const int BlockMinStateId = 9698;
		public const int BlockMaxStateId = 9698;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PurpleConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueConcrete : Block {
		public const int BlockId = 567;
		public const string BlockName = "blue_concrete";
		public const string BlockDisplayName = "Blue Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9699;
		public const int BlockMinStateId = 9699;
		public const int BlockMaxStateId = 9699;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlueConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownConcrete : Block {
		public const int BlockId = 568;
		public const string BlockName = "brown_concrete";
		public const string BlockDisplayName = "Brown Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9700;
		public const int BlockMinStateId = 9700;
		public const int BlockMaxStateId = 9700;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BrownConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenConcrete : Block {
		public const int BlockId = 569;
		public const string BlockName = "green_concrete";
		public const string BlockDisplayName = "Green Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9701;
		public const int BlockMinStateId = 9701;
		public const int BlockMaxStateId = 9701;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GreenConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedConcrete : Block {
		public const int BlockId = 570;
		public const string BlockName = "red_concrete";
		public const string BlockDisplayName = "Red Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9702;
		public const int BlockMinStateId = 9702;
		public const int BlockMaxStateId = 9702;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RedConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackConcrete : Block {
		public const int BlockId = 571;
		public const string BlockName = "black_concrete";
		public const string BlockDisplayName = "Black Concrete";

		public const float BlockHardness = 1.8F;
		public const float BlockResistance = 1.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9703;
		public const int BlockMinStateId = 9703;
		public const int BlockMaxStateId = 9703;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlackConcrete () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackConcrete (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteConcretePowder : Block {
		public const int BlockId = 572;
		public const string BlockName = "white_concrete_powder";
		public const string BlockDisplayName = "White Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9704;
		public const int BlockMinStateId = 9704;
		public const int BlockMaxStateId = 9704;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WhiteConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeConcretePowder : Block {
		public const int BlockId = 573;
		public const string BlockName = "orange_concrete_powder";
		public const string BlockDisplayName = "Orange Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9705;
		public const int BlockMinStateId = 9705;
		public const int BlockMaxStateId = 9705;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public OrangeConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaConcretePowder : Block {
		public const int BlockId = 574;
		public const string BlockName = "magenta_concrete_powder";
		public const string BlockDisplayName = "Magenta Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9706;
		public const int BlockMinStateId = 9706;
		public const int BlockMaxStateId = 9706;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public MagentaConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueConcretePowder : Block {
		public const int BlockId = 575;
		public const string BlockName = "light_blue_concrete_powder";
		public const string BlockDisplayName = "Light Blue Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9707;
		public const int BlockMinStateId = 9707;
		public const int BlockMaxStateId = 9707;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LightBlueConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowConcretePowder : Block {
		public const int BlockId = 576;
		public const string BlockName = "yellow_concrete_powder";
		public const string BlockDisplayName = "Yellow Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9708;
		public const int BlockMinStateId = 9708;
		public const int BlockMaxStateId = 9708;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public YellowConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeConcretePowder : Block {
		public const int BlockId = 577;
		public const string BlockName = "lime_concrete_powder";
		public const string BlockDisplayName = "Lime Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9709;
		public const int BlockMinStateId = 9709;
		public const int BlockMaxStateId = 9709;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LimeConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkConcretePowder : Block {
		public const int BlockId = 578;
		public const string BlockName = "pink_concrete_powder";
		public const string BlockDisplayName = "Pink Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9710;
		public const int BlockMinStateId = 9710;
		public const int BlockMaxStateId = 9710;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PinkConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayConcretePowder : Block {
		public const int BlockId = 579;
		public const string BlockName = "gray_concrete_powder";
		public const string BlockDisplayName = "Gray Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9711;
		public const int BlockMinStateId = 9711;
		public const int BlockMaxStateId = 9711;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GrayConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayConcretePowder : Block {
		public const int BlockId = 580;
		public const string BlockName = "light_gray_concrete_powder";
		public const string BlockDisplayName = "Light Gray Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9712;
		public const int BlockMinStateId = 9712;
		public const int BlockMaxStateId = 9712;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public LightGrayConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanConcretePowder : Block {
		public const int BlockId = 581;
		public const string BlockName = "cyan_concrete_powder";
		public const string BlockDisplayName = "Cyan Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9713;
		public const int BlockMinStateId = 9713;
		public const int BlockMaxStateId = 9713;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CyanConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleConcretePowder : Block {
		public const int BlockId = 582;
		public const string BlockName = "purple_concrete_powder";
		public const string BlockDisplayName = "Purple Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9714;
		public const int BlockMinStateId = 9714;
		public const int BlockMaxStateId = 9714;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PurpleConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueConcretePowder : Block {
		public const int BlockId = 583;
		public const string BlockName = "blue_concrete_powder";
		public const string BlockDisplayName = "Blue Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9715;
		public const int BlockMinStateId = 9715;
		public const int BlockMaxStateId = 9715;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlueConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownConcretePowder : Block {
		public const int BlockId = 584;
		public const string BlockName = "brown_concrete_powder";
		public const string BlockDisplayName = "Brown Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9716;
		public const int BlockMinStateId = 9716;
		public const int BlockMaxStateId = 9716;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BrownConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenConcretePowder : Block {
		public const int BlockId = 585;
		public const string BlockName = "green_concrete_powder";
		public const string BlockDisplayName = "Green Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9717;
		public const int BlockMinStateId = 9717;
		public const int BlockMaxStateId = 9717;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GreenConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedConcretePowder : Block {
		public const int BlockId = 586;
		public const string BlockName = "red_concrete_powder";
		public const string BlockDisplayName = "Red Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9718;
		public const int BlockMinStateId = 9718;
		public const int BlockMaxStateId = 9718;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RedConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackConcretePowder : Block {
		public const int BlockId = 587;
		public const string BlockName = "black_concrete_powder";
		public const string BlockDisplayName = "Black Concrete Powder";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 9719;
		public const int BlockMinStateId = 9719;
		public const int BlockMaxStateId = 9719;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlackConcretePowder () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackConcretePowder (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Kelp : Block {
		public const int BlockId = 588;
		public const string BlockName = "kelp";
		public const string BlockDisplayName = "Kelp";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9720;
		public const int BlockMinStateId = 9720;
		public const int BlockMaxStateId = 9745;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 26, null), }, 0);	

		public Kelp () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Kelp (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class KelpPlant : Block {
		public const int BlockId = 589;
		public const string BlockName = "kelp_plant";
		public const string BlockDisplayName = "Kelp Plant";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9746;
		public const int BlockMinStateId = 9746;
		public const int BlockMaxStateId = 9746;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public KelpPlant () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public KelpPlant (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DriedKelpBlock : Block {
		public const int BlockId = 590;
		public const string BlockName = "dried_kelp_block";
		public const string BlockDisplayName = "Dried Kelp Block";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 2.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/hoe";
		public const int BlockDefaultState = 9747;
		public const int BlockMinStateId = 9747;
		public const int BlockMaxStateId = 9747;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DriedKelpBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DriedKelpBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class TurtleEgg : Block {
		public const int BlockId = 591;
		public const string BlockName = "turtle_egg";
		public const string BlockDisplayName = "Turtle Egg";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9748;
		public const int BlockMinStateId = 9748;
		public const int BlockMaxStateId = 9759;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("eggs", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("hatch", BlockStateProperty.BlockStatePropertyType.Int, 3, null), }, 0);	

		public TurtleEgg () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public TurtleEgg (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadTubeCoralBlock : Block {
		public const int BlockId = 592;
		public const string BlockName = "dead_tube_coral_block";
		public const string BlockDisplayName = "Dead Tube Coral Block";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9760;
		public const int BlockMinStateId = 9760;
		public const int BlockMaxStateId = 9760;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeadTubeCoralBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadTubeCoralBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadBrainCoralBlock : Block {
		public const int BlockId = 593;
		public const string BlockName = "dead_brain_coral_block";
		public const string BlockDisplayName = "Dead Brain Coral Block";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9761;
		public const int BlockMinStateId = 9761;
		public const int BlockMaxStateId = 9761;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeadBrainCoralBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadBrainCoralBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadBubbleCoralBlock : Block {
		public const int BlockId = 594;
		public const string BlockName = "dead_bubble_coral_block";
		public const string BlockDisplayName = "Dead Bubble Coral Block";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9762;
		public const int BlockMinStateId = 9762;
		public const int BlockMaxStateId = 9762;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeadBubbleCoralBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadBubbleCoralBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadFireCoralBlock : Block {
		public const int BlockId = 595;
		public const string BlockName = "dead_fire_coral_block";
		public const string BlockDisplayName = "Dead Fire Coral Block";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9763;
		public const int BlockMinStateId = 9763;
		public const int BlockMaxStateId = 9763;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeadFireCoralBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadFireCoralBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadHornCoralBlock : Block {
		public const int BlockId = 596;
		public const string BlockName = "dead_horn_coral_block";
		public const string BlockDisplayName = "Dead Horn Coral Block";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9764;
		public const int BlockMinStateId = 9764;
		public const int BlockMaxStateId = 9764;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeadHornCoralBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadHornCoralBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class TubeCoralBlock : Block {
		public const int BlockId = 597;
		public const string BlockName = "tube_coral_block";
		public const string BlockDisplayName = "Tube Coral Block";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9765;
		public const int BlockMinStateId = 9765;
		public const int BlockMaxStateId = 9765;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public TubeCoralBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public TubeCoralBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrainCoralBlock : Block {
		public const int BlockId = 598;
		public const string BlockName = "brain_coral_block";
		public const string BlockDisplayName = "Brain Coral Block";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9766;
		public const int BlockMinStateId = 9766;
		public const int BlockMaxStateId = 9766;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BrainCoralBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrainCoralBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BubbleCoralBlock : Block {
		public const int BlockId = 599;
		public const string BlockName = "bubble_coral_block";
		public const string BlockDisplayName = "Bubble Coral Block";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9767;
		public const int BlockMinStateId = 9767;
		public const int BlockMaxStateId = 9767;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BubbleCoralBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BubbleCoralBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class FireCoralBlock : Block {
		public const int BlockId = 600;
		public const string BlockName = "fire_coral_block";
		public const string BlockDisplayName = "Fire Coral Block";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9768;
		public const int BlockMinStateId = 9768;
		public const int BlockMaxStateId = 9768;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public FireCoralBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public FireCoralBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class HornCoralBlock : Block {
		public const int BlockId = 601;
		public const string BlockName = "horn_coral_block";
		public const string BlockDisplayName = "Horn Coral Block";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9769;
		public const int BlockMinStateId = 9769;
		public const int BlockMaxStateId = 9769;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public HornCoralBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public HornCoralBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadTubeCoral : Block {
		public const int BlockId = 602;
		public const string BlockName = "dead_tube_coral";
		public const string BlockDisplayName = "Dead Tube Coral";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9770;
		public const int BlockMinStateId = 9770;
		public const int BlockMaxStateId = 9771;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadTubeCoral () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadTubeCoral (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadBrainCoral : Block {
		public const int BlockId = 603;
		public const string BlockName = "dead_brain_coral";
		public const string BlockDisplayName = "Dead Brain Coral";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9772;
		public const int BlockMinStateId = 9772;
		public const int BlockMaxStateId = 9773;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadBrainCoral () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadBrainCoral (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadBubbleCoral : Block {
		public const int BlockId = 604;
		public const string BlockName = "dead_bubble_coral";
		public const string BlockDisplayName = "Dead Bubble Coral";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9774;
		public const int BlockMinStateId = 9774;
		public const int BlockMaxStateId = 9775;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadBubbleCoral () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadBubbleCoral (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadFireCoral : Block {
		public const int BlockId = 605;
		public const string BlockName = "dead_fire_coral";
		public const string BlockDisplayName = "Dead Fire Coral";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9776;
		public const int BlockMinStateId = 9776;
		public const int BlockMaxStateId = 9777;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadFireCoral () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadFireCoral (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadHornCoral : Block {
		public const int BlockId = 606;
		public const string BlockName = "dead_horn_coral";
		public const string BlockDisplayName = "Dead Horn Coral";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9778;
		public const int BlockMinStateId = 9778;
		public const int BlockMaxStateId = 9779;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadHornCoral () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadHornCoral (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class TubeCoral : Block {
		public const int BlockId = 607;
		public const string BlockName = "tube_coral";
		public const string BlockDisplayName = "Tube Coral";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9780;
		public const int BlockMinStateId = 9780;
		public const int BlockMaxStateId = 9781;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public TubeCoral () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public TubeCoral (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrainCoral : Block {
		public const int BlockId = 608;
		public const string BlockName = "brain_coral";
		public const string BlockDisplayName = "Brain Coral";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9782;
		public const int BlockMinStateId = 9782;
		public const int BlockMaxStateId = 9783;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public BrainCoral () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrainCoral (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BubbleCoral : Block {
		public const int BlockId = 609;
		public const string BlockName = "bubble_coral";
		public const string BlockDisplayName = "Bubble Coral";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9784;
		public const int BlockMinStateId = 9784;
		public const int BlockMaxStateId = 9785;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public BubbleCoral () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BubbleCoral (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class FireCoral : Block {
		public const int BlockId = 610;
		public const string BlockName = "fire_coral";
		public const string BlockDisplayName = "Fire Coral";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9786;
		public const int BlockMinStateId = 9786;
		public const int BlockMaxStateId = 9787;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public FireCoral () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public FireCoral (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class HornCoral : Block {
		public const int BlockId = 611;
		public const string BlockName = "horn_coral";
		public const string BlockDisplayName = "Horn Coral";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9788;
		public const int BlockMinStateId = 9788;
		public const int BlockMaxStateId = 9789;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public HornCoral () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public HornCoral (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadTubeCoralFan : Block {
		public const int BlockId = 612;
		public const string BlockName = "dead_tube_coral_fan";
		public const string BlockDisplayName = "Dead Tube Coral Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9790;
		public const int BlockMinStateId = 9790;
		public const int BlockMaxStateId = 9791;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadTubeCoralFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadTubeCoralFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadBrainCoralFan : Block {
		public const int BlockId = 613;
		public const string BlockName = "dead_brain_coral_fan";
		public const string BlockDisplayName = "Dead Brain Coral Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9792;
		public const int BlockMinStateId = 9792;
		public const int BlockMaxStateId = 9793;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadBrainCoralFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadBrainCoralFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadBubbleCoralFan : Block {
		public const int BlockId = 614;
		public const string BlockName = "dead_bubble_coral_fan";
		public const string BlockDisplayName = "Dead Bubble Coral Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9794;
		public const int BlockMinStateId = 9794;
		public const int BlockMaxStateId = 9795;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadBubbleCoralFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadBubbleCoralFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadFireCoralFan : Block {
		public const int BlockId = 615;
		public const string BlockName = "dead_fire_coral_fan";
		public const string BlockDisplayName = "Dead Fire Coral Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9796;
		public const int BlockMinStateId = 9796;
		public const int BlockMaxStateId = 9797;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadFireCoralFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadFireCoralFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadHornCoralFan : Block {
		public const int BlockId = 616;
		public const string BlockName = "dead_horn_coral_fan";
		public const string BlockDisplayName = "Dead Horn Coral Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9798;
		public const int BlockMinStateId = 9798;
		public const int BlockMaxStateId = 9799;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadHornCoralFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadHornCoralFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class TubeCoralFan : Block {
		public const int BlockId = 617;
		public const string BlockName = "tube_coral_fan";
		public const string BlockDisplayName = "Tube Coral Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9800;
		public const int BlockMinStateId = 9800;
		public const int BlockMaxStateId = 9801;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public TubeCoralFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public TubeCoralFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrainCoralFan : Block {
		public const int BlockId = 618;
		public const string BlockName = "brain_coral_fan";
		public const string BlockDisplayName = "Brain Coral Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9802;
		public const int BlockMinStateId = 9802;
		public const int BlockMaxStateId = 9803;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public BrainCoralFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrainCoralFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BubbleCoralFan : Block {
		public const int BlockId = 619;
		public const string BlockName = "bubble_coral_fan";
		public const string BlockDisplayName = "Bubble Coral Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9804;
		public const int BlockMinStateId = 9804;
		public const int BlockMaxStateId = 9805;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public BubbleCoralFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BubbleCoralFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class FireCoralFan : Block {
		public const int BlockId = 620;
		public const string BlockName = "fire_coral_fan";
		public const string BlockDisplayName = "Fire Coral Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9806;
		public const int BlockMinStateId = 9806;
		public const int BlockMaxStateId = 9807;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public FireCoralFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public FireCoralFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class HornCoralFan : Block {
		public const int BlockId = 621;
		public const string BlockName = "horn_coral_fan";
		public const string BlockDisplayName = "Horn Coral Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9808;
		public const int BlockMinStateId = 9808;
		public const int BlockMaxStateId = 9809;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public HornCoralFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public HornCoralFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadTubeCoralWallFan : Block {
		public const int BlockId = 622;
		public const string BlockName = "dead_tube_coral_wall_fan";
		public const string BlockDisplayName = "Dead Tube Coral Wall Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9810;
		public const int BlockMinStateId = 9810;
		public const int BlockMaxStateId = 9817;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadTubeCoralWallFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadTubeCoralWallFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadBrainCoralWallFan : Block {
		public const int BlockId = 623;
		public const string BlockName = "dead_brain_coral_wall_fan";
		public const string BlockDisplayName = "Dead Brain Coral Wall Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9818;
		public const int BlockMinStateId = 9818;
		public const int BlockMaxStateId = 9825;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadBrainCoralWallFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadBrainCoralWallFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadBubbleCoralWallFan : Block {
		public const int BlockId = 624;
		public const string BlockName = "dead_bubble_coral_wall_fan";
		public const string BlockDisplayName = "Dead Bubble Coral Wall Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9826;
		public const int BlockMinStateId = 9826;
		public const int BlockMaxStateId = 9833;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadBubbleCoralWallFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadBubbleCoralWallFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadFireCoralWallFan : Block {
		public const int BlockId = 625;
		public const string BlockName = "dead_fire_coral_wall_fan";
		public const string BlockDisplayName = "Dead Fire Coral Wall Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9834;
		public const int BlockMinStateId = 9834;
		public const int BlockMaxStateId = 9841;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadFireCoralWallFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadFireCoralWallFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeadHornCoralWallFan : Block {
		public const int BlockId = 626;
		public const string BlockName = "dead_horn_coral_wall_fan";
		public const string BlockDisplayName = "Dead Horn Coral Wall Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9842;
		public const int BlockMinStateId = 9842;
		public const int BlockMaxStateId = 9849;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public DeadHornCoralWallFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeadHornCoralWallFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class TubeCoralWallFan : Block {
		public const int BlockId = 627;
		public const string BlockName = "tube_coral_wall_fan";
		public const string BlockDisplayName = "Tube Coral Wall Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9850;
		public const int BlockMinStateId = 9850;
		public const int BlockMaxStateId = 9857;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public TubeCoralWallFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public TubeCoralWallFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrainCoralWallFan : Block {
		public const int BlockId = 628;
		public const string BlockName = "brain_coral_wall_fan";
		public const string BlockDisplayName = "Brain Coral Wall Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9858;
		public const int BlockMinStateId = 9858;
		public const int BlockMaxStateId = 9865;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public BrainCoralWallFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrainCoralWallFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BubbleCoralWallFan : Block {
		public const int BlockId = 629;
		public const string BlockName = "bubble_coral_wall_fan";
		public const string BlockDisplayName = "Bubble Coral Wall Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9866;
		public const int BlockMinStateId = 9866;
		public const int BlockMaxStateId = 9873;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public BubbleCoralWallFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BubbleCoralWallFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class FireCoralWallFan : Block {
		public const int BlockId = 630;
		public const string BlockName = "fire_coral_wall_fan";
		public const string BlockDisplayName = "Fire Coral Wall Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9874;
		public const int BlockMinStateId = 9874;
		public const int BlockMaxStateId = 9881;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public FireCoralWallFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public FireCoralWallFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class HornCoralWallFan : Block {
		public const int BlockId = 631;
		public const string BlockName = "horn_coral_wall_fan";
		public const string BlockDisplayName = "Horn Coral Wall Fan";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9882;
		public const int BlockMinStateId = 9882;
		public const int BlockMaxStateId = 9889;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public HornCoralWallFan () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public HornCoralWallFan (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SeaPickle : Block {
		public const int BlockId = 632;
		public const string BlockName = "sea_pickle";
		public const string BlockDisplayName = "Sea Pickle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 6;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9890;
		public const int BlockMinStateId = 9890;
		public const int BlockMaxStateId = 9897;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("pickles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public SeaPickle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SeaPickle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueIce : Block {
		public const int BlockId = 633;
		public const string BlockName = "blue_ice";
		public const string BlockDisplayName = "Blue Ice";

		public const float BlockHardness = 2.8F;
		public const float BlockResistance = 2.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9898;
		public const int BlockMinStateId = 9898;
		public const int BlockMaxStateId = 9898;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BlueIce () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueIce (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Conduit : Block {
		public const int BlockId = 634;
		public const string BlockName = "conduit";
		public const string BlockDisplayName = "Conduit";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9899;
		public const int BlockMinStateId = 9899;
		public const int BlockMaxStateId = 9900;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public Conduit () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Conduit (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BambooSapling : Block {
		public const int BlockId = 635;
		public const string BlockName = "bamboo_sapling";
		public const string BlockDisplayName = "Bamboo Shoot";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9901;
		public const int BlockMinStateId = 9901;
		public const int BlockMaxStateId = 9901;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BambooSapling () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BambooSapling (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Bamboo : Block {
		public const int BlockId = 636;
		public const string BlockName = "bamboo";
		public const string BlockDisplayName = "Bamboo";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 9902;
		public const int BlockMinStateId = 9902;
		public const int BlockMaxStateId = 9913;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 2, null),new BlockStateProperty("leaves", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "small", "large" }),new BlockStateProperty("stage", BlockStateProperty.BlockStatePropertyType.Int, 2, null), }, 0);	

		public Bamboo () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Bamboo (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedBamboo : Block {
		public const int BlockId = 637;
		public const string BlockName = "potted_bamboo";
		public const string BlockDisplayName = "Potted Bamboo";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9914;
		public const int BlockMinStateId = 9914;
		public const int BlockMaxStateId = 9914;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedBamboo () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedBamboo (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class VoidAir : Block {
		public const int BlockId = 638;
		public const string BlockName = "void_air";
		public const string BlockDisplayName = "Void Air";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9915;
		public const int BlockMinStateId = 9915;
		public const int BlockMaxStateId = 9915;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public VoidAir () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public VoidAir (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CaveAir : Block {
		public const int BlockId = 639;
		public const string BlockName = "cave_air";
		public const string BlockDisplayName = "Cave Air";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9916;
		public const int BlockMinStateId = 9916;
		public const int BlockMaxStateId = 9916;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CaveAir () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CaveAir (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BubbleColumn : Block {
		public const int BlockId = 640;
		public const string BlockName = "bubble_column";
		public const string BlockDisplayName = "Bubble Column";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 9917;
		public const int BlockMinStateId = 9917;
		public const int BlockMaxStateId = 9918;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("drag", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 0);	

		public BubbleColumn () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BubbleColumn (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedGraniteStairs : Block {
		public const int BlockId = 641;
		public const string BlockName = "polished_granite_stairs";
		public const string BlockDisplayName = "Polished Granite Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 9930;
		public const int BlockMinStateId = 9919;
		public const int BlockMaxStateId = 9998;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public PolishedGraniteStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedGraniteStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmoothRedSandstoneStairs : Block {
		public const int BlockId = 642;
		public const string BlockName = "smooth_red_sandstone_stairs";
		public const string BlockDisplayName = "Smooth Red Sandstone Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 10010;
		public const int BlockMinStateId = 9999;
		public const int BlockMaxStateId = 10078;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public SmoothRedSandstoneStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmoothRedSandstoneStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MossyStoneBrickStairs : Block {
		public const int BlockId = 643;
		public const string BlockName = "mossy_stone_brick_stairs";
		public const string BlockDisplayName = "Mossy Stone Brick Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 10090;
		public const int BlockMinStateId = 10079;
		public const int BlockMaxStateId = 10158;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public MossyStoneBrickStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MossyStoneBrickStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedDioriteStairs : Block {
		public const int BlockId = 644;
		public const string BlockName = "polished_diorite_stairs";
		public const string BlockDisplayName = "Polished Diorite Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 10170;
		public const int BlockMinStateId = 10159;
		public const int BlockMaxStateId = 10238;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public PolishedDioriteStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedDioriteStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MossyCobblestoneStairs : Block {
		public const int BlockId = 645;
		public const string BlockName = "mossy_cobblestone_stairs";
		public const string BlockDisplayName = "Mossy Cobblestone Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 10250;
		public const int BlockMinStateId = 10239;
		public const int BlockMaxStateId = 10318;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public MossyCobblestoneStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MossyCobblestoneStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class EndStoneBrickStairs : Block {
		public const int BlockId = 646;
		public const string BlockName = "end_stone_brick_stairs";
		public const string BlockDisplayName = "End Stone Brick Stairs";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 9F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 10330;
		public const int BlockMinStateId = 10319;
		public const int BlockMaxStateId = 10398;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public EndStoneBrickStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public EndStoneBrickStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StoneStairs : Block {
		public const int BlockId = 647;
		public const string BlockName = "stone_stairs";
		public const string BlockDisplayName = "Stone Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 10410;
		public const int BlockMinStateId = 10399;
		public const int BlockMaxStateId = 10478;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public StoneStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StoneStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmoothSandstoneStairs : Block {
		public const int BlockId = 648;
		public const string BlockName = "smooth_sandstone_stairs";
		public const string BlockDisplayName = "Smooth Sandstone Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 10490;
		public const int BlockMinStateId = 10479;
		public const int BlockMaxStateId = 10558;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public SmoothSandstoneStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmoothSandstoneStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmoothQuartzStairs : Block {
		public const int BlockId = 649;
		public const string BlockName = "smooth_quartz_stairs";
		public const string BlockDisplayName = "Smooth Quartz Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 10570;
		public const int BlockMinStateId = 10559;
		public const int BlockMaxStateId = 10638;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public SmoothQuartzStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmoothQuartzStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GraniteStairs : Block {
		public const int BlockId = 650;
		public const string BlockName = "granite_stairs";
		public const string BlockDisplayName = "Granite Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 10650;
		public const int BlockMinStateId = 10639;
		public const int BlockMaxStateId = 10718;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public GraniteStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GraniteStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AndesiteStairs : Block {
		public const int BlockId = 651;
		public const string BlockName = "andesite_stairs";
		public const string BlockDisplayName = "Andesite Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 10730;
		public const int BlockMinStateId = 10719;
		public const int BlockMaxStateId = 10798;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public AndesiteStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AndesiteStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedNetherBrickStairs : Block {
		public const int BlockId = 652;
		public const string BlockName = "red_nether_brick_stairs";
		public const string BlockDisplayName = "Red Nether Brick Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 10810;
		public const int BlockMinStateId = 10799;
		public const int BlockMaxStateId = 10878;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public RedNetherBrickStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedNetherBrickStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedAndesiteStairs : Block {
		public const int BlockId = 653;
		public const string BlockName = "polished_andesite_stairs";
		public const string BlockDisplayName = "Polished Andesite Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 10890;
		public const int BlockMinStateId = 10879;
		public const int BlockMaxStateId = 10958;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public PolishedAndesiteStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedAndesiteStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DioriteStairs : Block {
		public const int BlockId = 654;
		public const string BlockName = "diorite_stairs";
		public const string BlockDisplayName = "Diorite Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 10970;
		public const int BlockMinStateId = 10959;
		public const int BlockMaxStateId = 11038;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public DioriteStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DioriteStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedGraniteSlab : Block {
		public const int BlockId = 655;
		public const string BlockName = "polished_granite_slab";
		public const string BlockDisplayName = "Polished Granite Slab";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11042;
		public const int BlockMinStateId = 11039;
		public const int BlockMaxStateId = 11044;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public PolishedGraniteSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedGraniteSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmoothRedSandstoneSlab : Block {
		public const int BlockId = 656;
		public const string BlockName = "smooth_red_sandstone_slab";
		public const string BlockDisplayName = "Smooth Red Sandstone Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11048;
		public const int BlockMinStateId = 11045;
		public const int BlockMaxStateId = 11050;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public SmoothRedSandstoneSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmoothRedSandstoneSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MossyStoneBrickSlab : Block {
		public const int BlockId = 657;
		public const string BlockName = "mossy_stone_brick_slab";
		public const string BlockDisplayName = "Mossy Stone Brick Slab";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11054;
		public const int BlockMinStateId = 11051;
		public const int BlockMaxStateId = 11056;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public MossyStoneBrickSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MossyStoneBrickSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedDioriteSlab : Block {
		public const int BlockId = 658;
		public const string BlockName = "polished_diorite_slab";
		public const string BlockDisplayName = "Polished Diorite Slab";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11060;
		public const int BlockMinStateId = 11057;
		public const int BlockMaxStateId = 11062;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public PolishedDioriteSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedDioriteSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MossyCobblestoneSlab : Block {
		public const int BlockId = 659;
		public const string BlockName = "mossy_cobblestone_slab";
		public const string BlockDisplayName = "Mossy Cobblestone Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11066;
		public const int BlockMinStateId = 11063;
		public const int BlockMaxStateId = 11068;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public MossyCobblestoneSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MossyCobblestoneSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class EndStoneBrickSlab : Block {
		public const int BlockId = 660;
		public const string BlockName = "end_stone_brick_slab";
		public const string BlockDisplayName = "End Stone Brick Slab";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 9F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11072;
		public const int BlockMinStateId = 11069;
		public const int BlockMaxStateId = 11074;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public EndStoneBrickSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public EndStoneBrickSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmoothSandstoneSlab : Block {
		public const int BlockId = 661;
		public const string BlockName = "smooth_sandstone_slab";
		public const string BlockDisplayName = "Smooth Sandstone Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11078;
		public const int BlockMinStateId = 11075;
		public const int BlockMaxStateId = 11080;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public SmoothSandstoneSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmoothSandstoneSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmoothQuartzSlab : Block {
		public const int BlockId = 662;
		public const string BlockName = "smooth_quartz_slab";
		public const string BlockDisplayName = "Smooth Quartz Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11084;
		public const int BlockMinStateId = 11081;
		public const int BlockMaxStateId = 11086;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public SmoothQuartzSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmoothQuartzSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GraniteSlab : Block {
		public const int BlockId = 663;
		public const string BlockName = "granite_slab";
		public const string BlockDisplayName = "Granite Slab";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11090;
		public const int BlockMinStateId = 11087;
		public const int BlockMaxStateId = 11092;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public GraniteSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GraniteSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AndesiteSlab : Block {
		public const int BlockId = 664;
		public const string BlockName = "andesite_slab";
		public const string BlockDisplayName = "Andesite Slab";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11096;
		public const int BlockMinStateId = 11093;
		public const int BlockMaxStateId = 11098;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public AndesiteSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AndesiteSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedNetherBrickSlab : Block {
		public const int BlockId = 665;
		public const string BlockName = "red_nether_brick_slab";
		public const string BlockDisplayName = "Red Nether Brick Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11102;
		public const int BlockMinStateId = 11099;
		public const int BlockMaxStateId = 11104;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public RedNetherBrickSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedNetherBrickSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedAndesiteSlab : Block {
		public const int BlockId = 666;
		public const string BlockName = "polished_andesite_slab";
		public const string BlockDisplayName = "Polished Andesite Slab";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11108;
		public const int BlockMinStateId = 11105;
		public const int BlockMaxStateId = 11110;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public PolishedAndesiteSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedAndesiteSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DioriteSlab : Block {
		public const int BlockId = 667;
		public const string BlockName = "diorite_slab";
		public const string BlockDisplayName = "Diorite Slab";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11114;
		public const int BlockMinStateId = 11111;
		public const int BlockMaxStateId = 11116;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public DioriteSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DioriteSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrickWall : Block {
		public const int BlockId = 668;
		public const string BlockName = "brick_wall";
		public const string BlockDisplayName = "Brick Wall";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11120;
		public const int BlockMinStateId = 11117;
		public const int BlockMaxStateId = 11440;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public BrickWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrickWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PrismarineWall : Block {
		public const int BlockId = 669;
		public const string BlockName = "prismarine_wall";
		public const string BlockDisplayName = "Prismarine Wall";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11444;
		public const int BlockMinStateId = 11441;
		public const int BlockMaxStateId = 11764;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public PrismarineWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PrismarineWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedSandstoneWall : Block {
		public const int BlockId = 670;
		public const string BlockName = "red_sandstone_wall";
		public const string BlockDisplayName = "Red Sandstone Wall";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 11768;
		public const int BlockMinStateId = 11765;
		public const int BlockMaxStateId = 12088;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public RedSandstoneWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedSandstoneWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MossyStoneBrickWall : Block {
		public const int BlockId = 671;
		public const string BlockName = "mossy_stone_brick_wall";
		public const string BlockDisplayName = "Mossy Stone Brick Wall";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 12092;
		public const int BlockMinStateId = 12089;
		public const int BlockMaxStateId = 12412;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public MossyStoneBrickWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MossyStoneBrickWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GraniteWall : Block {
		public const int BlockId = 672;
		public const string BlockName = "granite_wall";
		public const string BlockDisplayName = "Granite Wall";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 12416;
		public const int BlockMinStateId = 12413;
		public const int BlockMaxStateId = 12736;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public GraniteWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GraniteWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StoneBrickWall : Block {
		public const int BlockId = 673;
		public const string BlockName = "stone_brick_wall";
		public const string BlockDisplayName = "Stone Brick Wall";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 12740;
		public const int BlockMinStateId = 12737;
		public const int BlockMaxStateId = 13060;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public StoneBrickWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StoneBrickWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class NetherBrickWall : Block {
		public const int BlockId = 674;
		public const string BlockName = "nether_brick_wall";
		public const string BlockDisplayName = "Nether Brick Wall";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 13064;
		public const int BlockMinStateId = 13061;
		public const int BlockMaxStateId = 13384;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public NetherBrickWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public NetherBrickWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AndesiteWall : Block {
		public const int BlockId = 675;
		public const string BlockName = "andesite_wall";
		public const string BlockDisplayName = "Andesite Wall";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 13388;
		public const int BlockMinStateId = 13385;
		public const int BlockMaxStateId = 13708;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public AndesiteWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AndesiteWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedNetherBrickWall : Block {
		public const int BlockId = 676;
		public const string BlockName = "red_nether_brick_wall";
		public const string BlockDisplayName = "Red Nether Brick Wall";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 13712;
		public const int BlockMinStateId = 13709;
		public const int BlockMaxStateId = 14032;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public RedNetherBrickWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedNetherBrickWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SandstoneWall : Block {
		public const int BlockId = 677;
		public const string BlockName = "sandstone_wall";
		public const string BlockDisplayName = "Sandstone Wall";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 14036;
		public const int BlockMinStateId = 14033;
		public const int BlockMaxStateId = 14356;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public SandstoneWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SandstoneWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class EndStoneBrickWall : Block {
		public const int BlockId = 678;
		public const string BlockName = "end_stone_brick_wall";
		public const string BlockDisplayName = "End Stone Brick Wall";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 9F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 14360;
		public const int BlockMinStateId = 14357;
		public const int BlockMaxStateId = 14680;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public EndStoneBrickWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public EndStoneBrickWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DioriteWall : Block {
		public const int BlockId = 679;
		public const string BlockName = "diorite_wall";
		public const string BlockDisplayName = "Diorite Wall";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 14684;
		public const int BlockMinStateId = 14681;
		public const int BlockMaxStateId = 15004;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public DioriteWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DioriteWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Scaffolding : Block {
		public const int BlockId = 680;
		public const string BlockName = "scaffolding";
		public const string BlockDisplayName = "Scaffolding";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15036;
		public const int BlockMinStateId = 15005;
		public const int BlockMaxStateId = 15036;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("bottom", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("distance", BlockStateProperty.BlockStatePropertyType.Int, 8, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public Scaffolding () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Scaffolding (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Loom : Block {
		public const int BlockId = 681;
		public const string BlockName = "loom";
		public const string BlockDisplayName = "Loom";

		public const float BlockHardness = 2.5F;
		public const float BlockResistance = 2.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15037;
		public const int BlockMinStateId = 15037;
		public const int BlockMaxStateId = 15040;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public Loom () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Loom (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Barrel : Block {
		public const int BlockId = 682;
		public const string BlockName = "barrel";
		public const string BlockDisplayName = "Barrel";

		public const float BlockHardness = 2.5F;
		public const float BlockResistance = 2.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15042;
		public const int BlockMinStateId = 15041;
		public const int BlockMaxStateId = 15052;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Barrel () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Barrel (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Smoker : Block {
		public const int BlockId = 683;
		public const string BlockName = "smoker";
		public const string BlockDisplayName = "Smoker";

		public const float BlockHardness = 3.5F;
		public const float BlockResistance = 3.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 15054;
		public const int BlockMinStateId = 15053;
		public const int BlockMaxStateId = 15060;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Smoker () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Smoker (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlastFurnace : Block {
		public const int BlockId = 684;
		public const string BlockName = "blast_furnace";
		public const string BlockDisplayName = "Blast Furnace";

		public const float BlockHardness = 3.5F;
		public const float BlockResistance = 3.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 15062;
		public const int BlockMinStateId = 15061;
		public const int BlockMaxStateId = 15068;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public BlastFurnace () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlastFurnace (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CartographyTable : Block {
		public const int BlockId = 685;
		public const string BlockName = "cartography_table";
		public const string BlockDisplayName = "Cartography Table";

		public const float BlockHardness = 2.5F;
		public const float BlockResistance = 2.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15069;
		public const int BlockMinStateId = 15069;
		public const int BlockMaxStateId = 15069;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CartographyTable () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CartographyTable (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class FletchingTable : Block {
		public const int BlockId = 686;
		public const string BlockName = "fletching_table";
		public const string BlockDisplayName = "Fletching Table";

		public const float BlockHardness = 2.5F;
		public const float BlockResistance = 2.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15070;
		public const int BlockMinStateId = 15070;
		public const int BlockMaxStateId = 15070;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public FletchingTable () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public FletchingTable (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Grindstone : Block {
		public const int BlockId = 687;
		public const string BlockName = "grindstone";
		public const string BlockDisplayName = "Grindstone";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 15075;
		public const int BlockMinStateId = 15071;
		public const int BlockMaxStateId = 15082;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("face", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "floor", "wall", "ceiling" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 4);	

		public Grindstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Grindstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Lectern : Block {
		public const int BlockId = 688;
		public const string BlockName = "lectern";
		public const string BlockDisplayName = "Lectern";

		public const float BlockHardness = 2.5F;
		public const float BlockResistance = 2.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15086;
		public const int BlockMinStateId = 15083;
		public const int BlockMaxStateId = 15098;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("has_book", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public Lectern () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Lectern (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmithingTable : Block {
		public const int BlockId = 689;
		public const string BlockName = "smithing_table";
		public const string BlockDisplayName = "Smithing Table";

		public const float BlockHardness = 2.5F;
		public const float BlockResistance = 2.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15099;
		public const int BlockMinStateId = 15099;
		public const int BlockMaxStateId = 15099;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SmithingTable () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmithingTable (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Stonecutter : Block {
		public const int BlockId = 690;
		public const string BlockName = "stonecutter";
		public const string BlockDisplayName = "Stonecutter";

		public const float BlockHardness = 3.5F;
		public const float BlockResistance = 3.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 15100;
		public const int BlockMinStateId = 15100;
		public const int BlockMaxStateId = 15103;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }), }, 0);	

		public Stonecutter () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Stonecutter (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Bell : Block {
		public const int BlockId = 691;
		public const string BlockName = "bell";
		public const string BlockDisplayName = "Bell";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 15105;
		public const int BlockMinStateId = 15104;
		public const int BlockMaxStateId = 15135;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("attachment", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "floor", "ceiling", "single_wall", "double_wall" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public Bell () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Bell (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Lantern : Block {
		public const int BlockId = 692;
		public const string BlockName = "lantern";
		public const string BlockDisplayName = "Lantern";

		public const float BlockHardness = 3.5F;
		public const float BlockResistance = 3.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 15139;
		public const int BlockMinStateId = 15136;
		public const int BlockMaxStateId = 15139;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("hanging", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public Lantern () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Lantern (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SoulLantern : Block {
		public const int BlockId = 693;
		public const string BlockName = "soul_lantern";
		public const string BlockDisplayName = "Soul Lantern";

		public const float BlockHardness = 3.5F;
		public const float BlockResistance = 3.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 10;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 15143;
		public const int BlockMinStateId = 15140;
		public const int BlockMaxStateId = 15143;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("hanging", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public SoulLantern () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SoulLantern (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Campfire : Block {
		public const int BlockId = 694;
		public const string BlockName = "campfire";
		public const string BlockDisplayName = "Campfire";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15147;
		public const int BlockMinStateId = 15144;
		public const int BlockMaxStateId = 15175;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("signal_fire", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public Campfire () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Campfire (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SoulCampfire : Block {
		public const int BlockId = 695;
		public const string BlockName = "soul_campfire";
		public const string BlockDisplayName = "Soul Campfire";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 10;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15179;
		public const int BlockMinStateId = 15176;
		public const int BlockMaxStateId = 15207;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("signal_fire", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public SoulCampfire () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SoulCampfire (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SweetBerryBush : Block {
		public const int BlockId = 696;
		public const string BlockName = "sweet_berry_bush";
		public const string BlockDisplayName = "Sweet Berry Bush";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 15208;
		public const int BlockMinStateId = 15208;
		public const int BlockMaxStateId = 15211;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 4, null), }, 0);	

		public SweetBerryBush () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SweetBerryBush (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedStem : Block {
		public const int BlockId = 697;
		public const string BlockName = "warped_stem";
		public const string BlockDisplayName = "Warped Stem";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15213;
		public const int BlockMinStateId = 15212;
		public const int BlockMaxStateId = 15214;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public WarpedStem () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedStem (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedWarpedStem : Block {
		public const int BlockId = 698;
		public const string BlockName = "stripped_warped_stem";
		public const string BlockDisplayName = "Stripped Warped Stem";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15216;
		public const int BlockMinStateId = 15215;
		public const int BlockMaxStateId = 15217;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedWarpedStem () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedWarpedStem (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedHyphae : Block {
		public const int BlockId = 699;
		public const string BlockName = "warped_hyphae";
		public const string BlockDisplayName = "Warped Hyphae";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15219;
		public const int BlockMinStateId = 15218;
		public const int BlockMaxStateId = 15220;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public WarpedHyphae () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedHyphae (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedWarpedHyphae : Block {
		public const int BlockId = 700;
		public const string BlockName = "stripped_warped_hyphae";
		public const string BlockDisplayName = "Stripped Warped Hyphae";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15222;
		public const int BlockMinStateId = 15221;
		public const int BlockMaxStateId = 15223;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedWarpedHyphae () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedWarpedHyphae (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedNylium : Block {
		public const int BlockId = 701;
		public const string BlockName = "warped_nylium";
		public const string BlockDisplayName = "Warped Nylium";

		public const float BlockHardness = 0.4F;
		public const float BlockResistance = 0.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 15224;
		public const int BlockMinStateId = 15224;
		public const int BlockMaxStateId = 15224;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WarpedNylium () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedNylium (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedFungus : Block {
		public const int BlockId = 702;
		public const string BlockName = "warped_fungus";
		public const string BlockDisplayName = "Warped Fungus";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 15225;
		public const int BlockMinStateId = 15225;
		public const int BlockMaxStateId = 15225;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WarpedFungus () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedFungus (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedWartBlock : Block {
		public const int BlockId = 703;
		public const string BlockName = "warped_wart_block";
		public const string BlockDisplayName = "Warped Wart Block";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/hoe";
		public const int BlockDefaultState = 15226;
		public const int BlockMinStateId = 15226;
		public const int BlockMaxStateId = 15226;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WarpedWartBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedWartBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedRoots : Block {
		public const int BlockId = 704;
		public const string BlockName = "warped_roots";
		public const string BlockDisplayName = "Warped Roots";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 15227;
		public const int BlockMinStateId = 15227;
		public const int BlockMaxStateId = 15227;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WarpedRoots () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedRoots (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class NetherSprouts : Block {
		public const int BlockId = 705;
		public const string BlockName = "nether_sprouts";
		public const string BlockDisplayName = "Nether Sprouts";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 15228;
		public const int BlockMinStateId = 15228;
		public const int BlockMaxStateId = 15228;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public NetherSprouts () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public NetherSprouts (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonStem : Block {
		public const int BlockId = 706;
		public const string BlockName = "crimson_stem";
		public const string BlockDisplayName = "Crimson Stem";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15230;
		public const int BlockMinStateId = 15229;
		public const int BlockMaxStateId = 15231;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public CrimsonStem () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonStem (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedCrimsonStem : Block {
		public const int BlockId = 707;
		public const string BlockName = "stripped_crimson_stem";
		public const string BlockDisplayName = "Stripped Crimson Stem";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15233;
		public const int BlockMinStateId = 15232;
		public const int BlockMaxStateId = 15234;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedCrimsonStem () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedCrimsonStem (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonHyphae : Block {
		public const int BlockId = 708;
		public const string BlockName = "crimson_hyphae";
		public const string BlockDisplayName = "Crimson Hyphae";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15236;
		public const int BlockMinStateId = 15235;
		public const int BlockMaxStateId = 15237;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public CrimsonHyphae () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonHyphae (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StrippedCrimsonHyphae : Block {
		public const int BlockId = 709;
		public const string BlockName = "stripped_crimson_hyphae";
		public const string BlockDisplayName = "Stripped Crimson Hyphae";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 2F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15239;
		public const int BlockMinStateId = 15238;
		public const int BlockMaxStateId = 15240;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public StrippedCrimsonHyphae () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StrippedCrimsonHyphae (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonNylium : Block {
		public const int BlockId = 710;
		public const string BlockName = "crimson_nylium";
		public const string BlockDisplayName = "Crimson Nylium";

		public const float BlockHardness = 0.4F;
		public const float BlockResistance = 0.4F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 15241;
		public const int BlockMinStateId = 15241;
		public const int BlockMaxStateId = 15241;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CrimsonNylium () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonNylium (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonFungus : Block {
		public const int BlockId = 711;
		public const string BlockName = "crimson_fungus";
		public const string BlockDisplayName = "Crimson Fungus";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 15242;
		public const int BlockMinStateId = 15242;
		public const int BlockMaxStateId = 15242;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CrimsonFungus () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonFungus (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Shroomlight : Block {
		public const int BlockId = 712;
		public const string BlockName = "shroomlight";
		public const string BlockDisplayName = "Shroomlight";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 15;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/hoe";
		public const int BlockDefaultState = 15243;
		public const int BlockMinStateId = 15243;
		public const int BlockMaxStateId = 15243;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Shroomlight () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Shroomlight (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WeepingVines : Block {
		public const int BlockId = 713;
		public const string BlockName = "weeping_vines";
		public const string BlockDisplayName = "Weeping Vines";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 15244;
		public const int BlockMinStateId = 15244;
		public const int BlockMaxStateId = 15269;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 26, null), }, 0);	

		public WeepingVines () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WeepingVines (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WeepingVinesPlant : Block {
		public const int BlockId = 714;
		public const string BlockName = "weeping_vines_plant";
		public const string BlockDisplayName = "Weeping Vines Plant";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 15270;
		public const int BlockMinStateId = 15270;
		public const int BlockMaxStateId = 15270;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WeepingVinesPlant () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WeepingVinesPlant (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class TwistingVines : Block {
		public const int BlockId = 715;
		public const string BlockName = "twisting_vines";
		public const string BlockDisplayName = "Twisting Vines";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 15271;
		public const int BlockMinStateId = 15271;
		public const int BlockMaxStateId = 15296;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 26, null), }, 0);	

		public TwistingVines () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public TwistingVines (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class TwistingVinesPlant : Block {
		public const int BlockId = 716;
		public const string BlockName = "twisting_vines_plant";
		public const string BlockDisplayName = "Twisting Vines Plant";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 15297;
		public const int BlockMinStateId = 15297;
		public const int BlockMaxStateId = 15297;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public TwistingVinesPlant () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public TwistingVinesPlant (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonRoots : Block {
		public const int BlockId = 717;
		public const string BlockName = "crimson_roots";
		public const string BlockDisplayName = "Crimson Roots";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 15298;
		public const int BlockMinStateId = 15298;
		public const int BlockMaxStateId = 15298;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CrimsonRoots () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonRoots (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonPlanks : Block {
		public const int BlockId = 718;
		public const string BlockName = "crimson_planks";
		public const string BlockDisplayName = "Crimson Planks";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15299;
		public const int BlockMinStateId = 15299;
		public const int BlockMaxStateId = 15299;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CrimsonPlanks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonPlanks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedPlanks : Block {
		public const int BlockId = 719;
		public const string BlockName = "warped_planks";
		public const string BlockDisplayName = "Warped Planks";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15300;
		public const int BlockMinStateId = 15300;
		public const int BlockMaxStateId = 15300;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WarpedPlanks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedPlanks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonSlab : Block {
		public const int BlockId = 720;
		public const string BlockName = "crimson_slab";
		public const string BlockDisplayName = "Crimson Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15304;
		public const int BlockMinStateId = 15301;
		public const int BlockMaxStateId = 15306;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public CrimsonSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedSlab : Block {
		public const int BlockId = 721;
		public const string BlockName = "warped_slab";
		public const string BlockDisplayName = "Warped Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15310;
		public const int BlockMinStateId = 15307;
		public const int BlockMaxStateId = 15312;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public WarpedSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonPressurePlate : Block {
		public const int BlockId = 722;
		public const string BlockName = "crimson_pressure_plate";
		public const string BlockDisplayName = "Crimson Pressure Plate";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15314;
		public const int BlockMinStateId = 15313;
		public const int BlockMaxStateId = 15314;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public CrimsonPressurePlate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonPressurePlate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedPressurePlate : Block {
		public const int BlockId = 723;
		public const string BlockName = "warped_pressure_plate";
		public const string BlockDisplayName = "Warped Pressure Plate";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15316;
		public const int BlockMinStateId = 15315;
		public const int BlockMaxStateId = 15316;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public WarpedPressurePlate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedPressurePlate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonFence : Block {
		public const int BlockId = 724;
		public const string BlockName = "crimson_fence";
		public const string BlockDisplayName = "Crimson Fence";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15348;
		public const int BlockMinStateId = 15317;
		public const int BlockMaxStateId = 15348;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public CrimsonFence () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonFence (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedFence : Block {
		public const int BlockId = 725;
		public const string BlockName = "warped_fence";
		public const string BlockDisplayName = "Warped Fence";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15380;
		public const int BlockMinStateId = 15349;
		public const int BlockMaxStateId = 15380;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 31);	

		public WarpedFence () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedFence (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonTrapdoor : Block {
		public const int BlockId = 726;
		public const string BlockName = "crimson_trapdoor";
		public const string BlockDisplayName = "Crimson Trapdoor";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15396;
		public const int BlockMinStateId = 15381;
		public const int BlockMaxStateId = 15444;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 15);	

		public CrimsonTrapdoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonTrapdoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedTrapdoor : Block {
		public const int BlockId = 727;
		public const string BlockName = "warped_trapdoor";
		public const string BlockDisplayName = "Warped Trapdoor";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15460;
		public const int BlockMinStateId = 15445;
		public const int BlockMaxStateId = 15508;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 15);	

		public WarpedTrapdoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedTrapdoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonFenceGate : Block {
		public const int BlockId = 728;
		public const string BlockName = "crimson_fence_gate";
		public const string BlockDisplayName = "Crimson Fence Gate";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15516;
		public const int BlockMinStateId = 15509;
		public const int BlockMaxStateId = 15540;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("in_wall", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 7);	

		public CrimsonFenceGate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonFenceGate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedFenceGate : Block {
		public const int BlockId = 729;
		public const string BlockName = "warped_fence_gate";
		public const string BlockDisplayName = "Warped Fence Gate";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15548;
		public const int BlockMinStateId = 15541;
		public const int BlockMaxStateId = 15572;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("in_wall", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 7);	

		public WarpedFenceGate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedFenceGate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonStairs : Block {
		public const int BlockId = 730;
		public const string BlockName = "crimson_stairs";
		public const string BlockDisplayName = "Crimson Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15584;
		public const int BlockMinStateId = 15573;
		public const int BlockMaxStateId = 15652;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public CrimsonStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedStairs : Block {
		public const int BlockId = 731;
		public const string BlockName = "warped_stairs";
		public const string BlockDisplayName = "Warped Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15664;
		public const int BlockMinStateId = 15653;
		public const int BlockMaxStateId = 15732;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public WarpedStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonButton : Block {
		public const int BlockId = 732;
		public const string BlockName = "crimson_button";
		public const string BlockDisplayName = "Crimson Button";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15742;
		public const int BlockMinStateId = 15733;
		public const int BlockMaxStateId = 15756;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("face", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "floor", "wall", "ceiling" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public CrimsonButton () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonButton (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedButton : Block {
		public const int BlockId = 733;
		public const string BlockName = "warped_button";
		public const string BlockDisplayName = "Warped Button";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15766;
		public const int BlockMinStateId = 15757;
		public const int BlockMaxStateId = 15780;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("face", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "floor", "wall", "ceiling" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public WarpedButton () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedButton (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonDoor : Block {
		public const int BlockId = 734;
		public const string BlockName = "crimson_door";
		public const string BlockDisplayName = "Crimson Door";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15792;
		public const int BlockMinStateId = 15781;
		public const int BlockMaxStateId = 15844;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }),new BlockStateProperty("hinge", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "left", "right" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public CrimsonDoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonDoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedDoor : Block {
		public const int BlockId = 735;
		public const string BlockName = "warped_door";
		public const string BlockDisplayName = "Warped Door";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15856;
		public const int BlockMinStateId = 15845;
		public const int BlockMaxStateId = 15908;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }),new BlockStateProperty("hinge", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "left", "right" }),new BlockStateProperty("open", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public WarpedDoor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedDoor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonSign : Block {
		public const int BlockId = 736;
		public const string BlockName = "crimson_sign";
		public const string BlockDisplayName = "Crimson Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15910;
		public const int BlockMinStateId = 15909;
		public const int BlockMaxStateId = 15940;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public CrimsonSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedSign : Block {
		public const int BlockId = 737;
		public const string BlockName = "warped_sign";
		public const string BlockDisplayName = "Warped Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15942;
		public const int BlockMinStateId = 15941;
		public const int BlockMaxStateId = 15972;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("rotation", BlockStateProperty.BlockStatePropertyType.Int, 16, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public WarpedSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrimsonWallSign : Block {
		public const int BlockId = 738;
		public const string BlockName = "crimson_wall_sign";
		public const string BlockDisplayName = "Crimson Wall Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15974;
		public const int BlockMinStateId = 15973;
		public const int BlockMaxStateId = 15980;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public CrimsonWallSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrimsonWallSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WarpedWallSign : Block {
		public const int BlockId = 739;
		public const string BlockName = "warped_wall_sign";
		public const string BlockDisplayName = "Warped Wall Sign";

		public const float BlockHardness = 1F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 16;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 15982;
		public const int BlockMinStateId = 15981;
		public const int BlockMaxStateId = 15988;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public WarpedWallSign () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WarpedWallSign (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class StructureBlock : Block {
		public const int BlockId = 740;
		public const string BlockName = "structure_block";
		public const string BlockDisplayName = "Structure Block";

		public const float BlockHardness = 3.4028235E+38F;
		public const float BlockResistance = 3600000F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 15990;
		public const int BlockMinStateId = 15989;
		public const int BlockMaxStateId = 15992;
				public static readonly int[]? BlockHarvestTools = new int[] {  };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("mode", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "save", "load", "corner", "data" }), }, 1);	

		public StructureBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public StructureBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Jigsaw : Block {
		public const int BlockId = 741;
		public const string BlockName = "jigsaw";
		public const string BlockDisplayName = "Jigsaw Block";

		public const float BlockHardness = 3.4028235E+38F;
		public const float BlockResistance = 3600000F;
		public const bool BlockDiggable = false;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 16003;
		public const int BlockMinStateId = 15993;
		public const int BlockMaxStateId = 16004;
				public static readonly int[]? BlockHarvestTools = new int[] {  };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("orientation", BlockStateProperty.BlockStatePropertyType.Enum, 12, new string[] { "down_east", "down_north", "down_south", "down_west", "up_east", "up_north", "up_south", "up_west", "west_up", "east_up", "north_up", "south_up" }), }, 10);	

		public Jigsaw () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Jigsaw (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Composter : Block {
		public const int BlockId = 742;
		public const string BlockName = "composter";
		public const string BlockDisplayName = "Composter";

		public const float BlockHardness = 0.6F;
		public const float BlockResistance = 0.6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 16005;
		public const int BlockMinStateId = 16005;
		public const int BlockMaxStateId = 16013;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("level", BlockStateProperty.BlockStatePropertyType.Int, 9, null), }, 0);	

		public Composter () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Composter (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Target : Block {
		public const int BlockId = 743;
		public const string BlockName = "target";
		public const string BlockDisplayName = "Target";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/hoe";
		public const int BlockDefaultState = 16014;
		public const int BlockMinStateId = 16014;
		public const int BlockMaxStateId = 16029;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("power", BlockStateProperty.BlockStatePropertyType.Int, 16, null), }, 0);	

		public Target () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Target (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BeeNest : Block {
		public const int BlockId = 744;
		public const string BlockName = "bee_nest";
		public const string BlockDisplayName = "Bee Nest";

		public const float BlockHardness = 0.3F;
		public const float BlockResistance = 0.3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 16030;
		public const int BlockMinStateId = 16030;
		public const int BlockMaxStateId = 16053;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("honey_level", BlockStateProperty.BlockStatePropertyType.Int, 6, null), }, 0);	

		public BeeNest () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BeeNest (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Beehive : Block {
		public const int BlockId = 745;
		public const string BlockName = "beehive";
		public const string BlockDisplayName = "Beehive";

		public const float BlockHardness = 0.6F;
		public const float BlockResistance = 0.6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/axe";
		public const int BlockDefaultState = 16054;
		public const int BlockMinStateId = 16054;
		public const int BlockMaxStateId = 16077;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("honey_level", BlockStateProperty.BlockStatePropertyType.Int, 6, null), }, 0);	

		public Beehive () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Beehive (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class HoneyBlock : Block {
		public const int BlockId = 746;
		public const string BlockName = "honey_block";
		public const string BlockDisplayName = "Honey Block";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 16078;
		public const int BlockMinStateId = 16078;
		public const int BlockMaxStateId = 16078;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public HoneyBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public HoneyBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class HoneycombBlock : Block {
		public const int BlockId = 747;
		public const string BlockName = "honeycomb_block";
		public const string BlockDisplayName = "Honeycomb Block";

		public const float BlockHardness = 0.6F;
		public const float BlockResistance = 0.6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 16079;
		public const int BlockMinStateId = 16079;
		public const int BlockMaxStateId = 16079;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public HoneycombBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public HoneycombBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class NetheriteBlock : Block {
		public const int BlockId = 748;
		public const string BlockName = "netherite_block";
		public const string BlockDisplayName = "Block of Netherite";

		public const float BlockHardness = 50F;
		public const float BlockResistance = 1200F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16080;
		public const int BlockMinStateId = 16080;
		public const int BlockMaxStateId = 16080;
				public static readonly int[]? BlockHarvestTools = new int[] { 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public NetheriteBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public NetheriteBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AncientDebris : Block {
		public const int BlockId = 749;
		public const string BlockName = "ancient_debris";
		public const string BlockDisplayName = "Ancient Debris";

		public const float BlockHardness = 30F;
		public const float BlockResistance = 1200F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16081;
		public const int BlockMinStateId = 16081;
		public const int BlockMaxStateId = 16081;
				public static readonly int[]? BlockHarvestTools = new int[] { 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public AncientDebris () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AncientDebris (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CryingObsidian : Block {
		public const int BlockId = 750;
		public const string BlockName = "crying_obsidian";
		public const string BlockDisplayName = "Crying Obsidian";

		public const float BlockHardness = 50F;
		public const float BlockResistance = 1200F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 10;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16082;
		public const int BlockMinStateId = 16082;
		public const int BlockMaxStateId = 16082;
				public static readonly int[]? BlockHarvestTools = new int[] { 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CryingObsidian () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CryingObsidian (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RespawnAnchor : Block {
		public const int BlockId = 751;
		public const string BlockName = "respawn_anchor";
		public const string BlockDisplayName = "Respawn Anchor";

		public const float BlockHardness = 50F;
		public const float BlockResistance = 1200F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16083;
		public const int BlockMinStateId = 16083;
		public const int BlockMaxStateId = 16087;
				public static readonly int[]? BlockHarvestTools = new int[] { 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("charges", BlockStateProperty.BlockStatePropertyType.Int, 5, null), }, 0);	

		public RespawnAnchor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RespawnAnchor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedCrimsonFungus : Block {
		public const int BlockId = 752;
		public const string BlockName = "potted_crimson_fungus";
		public const string BlockDisplayName = "Potted Crimson Fungus";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 16088;
		public const int BlockMinStateId = 16088;
		public const int BlockMaxStateId = 16088;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedCrimsonFungus () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedCrimsonFungus (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedWarpedFungus : Block {
		public const int BlockId = 753;
		public const string BlockName = "potted_warped_fungus";
		public const string BlockDisplayName = "Potted Warped Fungus";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 16089;
		public const int BlockMinStateId = 16089;
		public const int BlockMaxStateId = 16089;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedWarpedFungus () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedWarpedFungus (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedCrimsonRoots : Block {
		public const int BlockId = 754;
		public const string BlockName = "potted_crimson_roots";
		public const string BlockDisplayName = "Potted Crimson Roots";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 16090;
		public const int BlockMinStateId = 16090;
		public const int BlockMaxStateId = 16090;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedCrimsonRoots () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedCrimsonRoots (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedWarpedRoots : Block {
		public const int BlockId = 755;
		public const string BlockName = "potted_warped_roots";
		public const string BlockDisplayName = "Potted Warped Roots";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 16091;
		public const int BlockMinStateId = 16091;
		public const int BlockMaxStateId = 16091;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedWarpedRoots () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedWarpedRoots (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Lodestone : Block {
		public const int BlockId = 756;
		public const string BlockName = "lodestone";
		public const string BlockDisplayName = "Lodestone";

		public const float BlockHardness = 3.5F;
		public const float BlockResistance = 3.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16092;
		public const int BlockMinStateId = 16092;
		public const int BlockMaxStateId = 16092;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Lodestone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Lodestone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Blackstone : Block {
		public const int BlockId = 757;
		public const string BlockName = "blackstone";
		public const string BlockDisplayName = "Blackstone";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16093;
		public const int BlockMinStateId = 16093;
		public const int BlockMaxStateId = 16093;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Blackstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Blackstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackstoneStairs : Block {
		public const int BlockId = 758;
		public const string BlockName = "blackstone_stairs";
		public const string BlockDisplayName = "Blackstone Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16105;
		public const int BlockMinStateId = 16094;
		public const int BlockMaxStateId = 16173;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public BlackstoneStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackstoneStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackstoneWall : Block {
		public const int BlockId = 759;
		public const string BlockName = "blackstone_wall";
		public const string BlockDisplayName = "Blackstone Wall";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16177;
		public const int BlockMinStateId = 16174;
		public const int BlockMaxStateId = 16497;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public BlackstoneWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackstoneWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackstoneSlab : Block {
		public const int BlockId = 760;
		public const string BlockName = "blackstone_slab";
		public const string BlockDisplayName = "Blackstone Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16501;
		public const int BlockMinStateId = 16498;
		public const int BlockMaxStateId = 16503;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public BlackstoneSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackstoneSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedBlackstone : Block {
		public const int BlockId = 761;
		public const string BlockName = "polished_blackstone";
		public const string BlockDisplayName = "Polished Blackstone";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16504;
		public const int BlockMinStateId = 16504;
		public const int BlockMaxStateId = 16504;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PolishedBlackstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedBlackstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedBlackstoneBricks : Block {
		public const int BlockId = 762;
		public const string BlockName = "polished_blackstone_bricks";
		public const string BlockDisplayName = "Polished Blackstone Bricks";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16505;
		public const int BlockMinStateId = 16505;
		public const int BlockMaxStateId = 16505;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PolishedBlackstoneBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedBlackstoneBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrackedPolishedBlackstoneBricks : Block {
		public const int BlockId = 763;
		public const string BlockName = "cracked_polished_blackstone_bricks";
		public const string BlockDisplayName = "Cracked Polished Blackstone Bricks";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16506;
		public const int BlockMinStateId = 16506;
		public const int BlockMaxStateId = 16506;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CrackedPolishedBlackstoneBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrackedPolishedBlackstoneBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ChiseledPolishedBlackstone : Block {
		public const int BlockId = 764;
		public const string BlockName = "chiseled_polished_blackstone";
		public const string BlockDisplayName = "Chiseled Polished Blackstone";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16507;
		public const int BlockMinStateId = 16507;
		public const int BlockMaxStateId = 16507;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public ChiseledPolishedBlackstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ChiseledPolishedBlackstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedBlackstoneBrickSlab : Block {
		public const int BlockId = 765;
		public const string BlockName = "polished_blackstone_brick_slab";
		public const string BlockDisplayName = "Polished Blackstone Brick Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16511;
		public const int BlockMinStateId = 16508;
		public const int BlockMaxStateId = 16513;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public PolishedBlackstoneBrickSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedBlackstoneBrickSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedBlackstoneBrickStairs : Block {
		public const int BlockId = 766;
		public const string BlockName = "polished_blackstone_brick_stairs";
		public const string BlockDisplayName = "Polished Blackstone Brick Stairs";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16525;
		public const int BlockMinStateId = 16514;
		public const int BlockMaxStateId = 16593;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public PolishedBlackstoneBrickStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedBlackstoneBrickStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedBlackstoneBrickWall : Block {
		public const int BlockId = 767;
		public const string BlockName = "polished_blackstone_brick_wall";
		public const string BlockDisplayName = "Polished Blackstone Brick Wall";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16597;
		public const int BlockMinStateId = 16594;
		public const int BlockMaxStateId = 16917;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public PolishedBlackstoneBrickWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedBlackstoneBrickWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GildedBlackstone : Block {
		public const int BlockId = 768;
		public const string BlockName = "gilded_blackstone";
		public const string BlockDisplayName = "Gilded Blackstone";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16918;
		public const int BlockMinStateId = 16918;
		public const int BlockMaxStateId = 16918;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public GildedBlackstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GildedBlackstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedBlackstoneStairs : Block {
		public const int BlockId = 769;
		public const string BlockName = "polished_blackstone_stairs";
		public const string BlockDisplayName = "Polished Blackstone Stairs";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 16930;
		public const int BlockMinStateId = 16919;
		public const int BlockMaxStateId = 16998;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public PolishedBlackstoneStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedBlackstoneStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedBlackstoneSlab : Block {
		public const int BlockId = 770;
		public const string BlockName = "polished_blackstone_slab";
		public const string BlockDisplayName = "Polished Blackstone Slab";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17002;
		public const int BlockMinStateId = 16999;
		public const int BlockMaxStateId = 17004;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public PolishedBlackstoneSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedBlackstoneSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedBlackstonePressurePlate : Block {
		public const int BlockId = 771;
		public const string BlockName = "polished_blackstone_pressure_plate";
		public const string BlockDisplayName = "Polished Blackstone Pressure Plate";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17006;
		public const int BlockMinStateId = 17005;
		public const int BlockMaxStateId = 17006;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public PolishedBlackstonePressurePlate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedBlackstonePressurePlate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedBlackstoneButton : Block {
		public const int BlockId = 772;
		public const string BlockName = "polished_blackstone_button";
		public const string BlockDisplayName = "Polished Blackstone Button";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17016;
		public const int BlockMinStateId = 17007;
		public const int BlockMaxStateId = 17030;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("face", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "floor", "wall", "ceiling" }),new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public PolishedBlackstoneButton () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedBlackstoneButton (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedBlackstoneWall : Block {
		public const int BlockId = 773;
		public const string BlockName = "polished_blackstone_wall";
		public const string BlockDisplayName = "Polished Blackstone Wall";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17034;
		public const int BlockMinStateId = 17031;
		public const int BlockMaxStateId = 17354;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public PolishedBlackstoneWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedBlackstoneWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ChiseledNetherBricks : Block {
		public const int BlockId = 774;
		public const string BlockName = "chiseled_nether_bricks";
		public const string BlockDisplayName = "Chiseled Nether Bricks";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17355;
		public const int BlockMinStateId = 17355;
		public const int BlockMaxStateId = 17355;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public ChiseledNetherBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ChiseledNetherBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrackedNetherBricks : Block {
		public const int BlockId = 775;
		public const string BlockName = "cracked_nether_bricks";
		public const string BlockDisplayName = "Cracked Nether Bricks";

		public const float BlockHardness = 2F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17356;
		public const int BlockMinStateId = 17356;
		public const int BlockMaxStateId = 17356;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CrackedNetherBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrackedNetherBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class QuartzBricks : Block {
		public const int BlockId = 776;
		public const string BlockName = "quartz_bricks";
		public const string BlockDisplayName = "Quartz Bricks";

		public const float BlockHardness = 0.8F;
		public const float BlockResistance = 0.8F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17357;
		public const int BlockMinStateId = 17357;
		public const int BlockMaxStateId = 17357;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public QuartzBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public QuartzBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Candle : Block {
		public const int BlockId = 777;
		public const string BlockName = "candle";
		public const string BlockDisplayName = "Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17361;
		public const int BlockMinStateId = 17358;
		public const int BlockMaxStateId = 17373;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public Candle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Candle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteCandle : Block {
		public const int BlockId = 778;
		public const string BlockName = "white_candle";
		public const string BlockDisplayName = "White Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17377;
		public const int BlockMinStateId = 17374;
		public const int BlockMaxStateId = 17389;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public WhiteCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeCandle : Block {
		public const int BlockId = 779;
		public const string BlockName = "orange_candle";
		public const string BlockDisplayName = "Orange Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17393;
		public const int BlockMinStateId = 17390;
		public const int BlockMaxStateId = 17405;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public OrangeCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaCandle : Block {
		public const int BlockId = 780;
		public const string BlockName = "magenta_candle";
		public const string BlockDisplayName = "Magenta Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17409;
		public const int BlockMinStateId = 17406;
		public const int BlockMaxStateId = 17421;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public MagentaCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueCandle : Block {
		public const int BlockId = 781;
		public const string BlockName = "light_blue_candle";
		public const string BlockDisplayName = "Light Blue Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17425;
		public const int BlockMinStateId = 17422;
		public const int BlockMaxStateId = 17437;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public LightBlueCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowCandle : Block {
		public const int BlockId = 782;
		public const string BlockName = "yellow_candle";
		public const string BlockDisplayName = "Yellow Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17441;
		public const int BlockMinStateId = 17438;
		public const int BlockMaxStateId = 17453;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public YellowCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeCandle : Block {
		public const int BlockId = 783;
		public const string BlockName = "lime_candle";
		public const string BlockDisplayName = "Lime Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17457;
		public const int BlockMinStateId = 17454;
		public const int BlockMaxStateId = 17469;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public LimeCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkCandle : Block {
		public const int BlockId = 784;
		public const string BlockName = "pink_candle";
		public const string BlockDisplayName = "Pink Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17473;
		public const int BlockMinStateId = 17470;
		public const int BlockMaxStateId = 17485;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public PinkCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayCandle : Block {
		public const int BlockId = 785;
		public const string BlockName = "gray_candle";
		public const string BlockDisplayName = "Gray Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17489;
		public const int BlockMinStateId = 17486;
		public const int BlockMaxStateId = 17501;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public GrayCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayCandle : Block {
		public const int BlockId = 786;
		public const string BlockName = "light_gray_candle";
		public const string BlockDisplayName = "Light Gray Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17505;
		public const int BlockMinStateId = 17502;
		public const int BlockMaxStateId = 17517;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public LightGrayCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanCandle : Block {
		public const int BlockId = 787;
		public const string BlockName = "cyan_candle";
		public const string BlockDisplayName = "Cyan Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17521;
		public const int BlockMinStateId = 17518;
		public const int BlockMaxStateId = 17533;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public CyanCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleCandle : Block {
		public const int BlockId = 788;
		public const string BlockName = "purple_candle";
		public const string BlockDisplayName = "Purple Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17537;
		public const int BlockMinStateId = 17534;
		public const int BlockMaxStateId = 17549;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public PurpleCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueCandle : Block {
		public const int BlockId = 789;
		public const string BlockName = "blue_candle";
		public const string BlockDisplayName = "Blue Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17553;
		public const int BlockMinStateId = 17550;
		public const int BlockMaxStateId = 17565;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public BlueCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownCandle : Block {
		public const int BlockId = 790;
		public const string BlockName = "brown_candle";
		public const string BlockDisplayName = "Brown Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17569;
		public const int BlockMinStateId = 17566;
		public const int BlockMaxStateId = 17581;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public BrownCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenCandle : Block {
		public const int BlockId = 791;
		public const string BlockName = "green_candle";
		public const string BlockDisplayName = "Green Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17585;
		public const int BlockMinStateId = 17582;
		public const int BlockMaxStateId = 17597;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public GreenCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedCandle : Block {
		public const int BlockId = 792;
		public const string BlockName = "red_candle";
		public const string BlockDisplayName = "Red Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17601;
		public const int BlockMinStateId = 17598;
		public const int BlockMaxStateId = 17613;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public RedCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackCandle : Block {
		public const int BlockId = 793;
		public const string BlockName = "black_candle";
		public const string BlockDisplayName = "Black Candle";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17617;
		public const int BlockMinStateId = 17614;
		public const int BlockMaxStateId = 17629;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("candles", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "1", "2", "3", "4" }),new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public BlackCandle () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackCandle (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CandleCake : Block {
		public const int BlockId = 794;
		public const string BlockName = "candle_cake";
		public const string BlockDisplayName = "Cake with Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17631;
		public const int BlockMinStateId = 17630;
		public const int BlockMaxStateId = 17631;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public CandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WhiteCandleCake : Block {
		public const int BlockId = 795;
		public const string BlockName = "white_candle_cake";
		public const string BlockDisplayName = "Cake with White Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17633;
		public const int BlockMinStateId = 17632;
		public const int BlockMaxStateId = 17633;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public WhiteCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WhiteCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OrangeCandleCake : Block {
		public const int BlockId = 796;
		public const string BlockName = "orange_candle_cake";
		public const string BlockDisplayName = "Cake with Orange Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17635;
		public const int BlockMinStateId = 17634;
		public const int BlockMaxStateId = 17635;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public OrangeCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OrangeCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MagentaCandleCake : Block {
		public const int BlockId = 797;
		public const string BlockName = "magenta_candle_cake";
		public const string BlockDisplayName = "Cake with Magenta Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17637;
		public const int BlockMinStateId = 17636;
		public const int BlockMaxStateId = 17637;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public MagentaCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MagentaCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightBlueCandleCake : Block {
		public const int BlockId = 798;
		public const string BlockName = "light_blue_candle_cake";
		public const string BlockDisplayName = "Cake with Light Blue Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17639;
		public const int BlockMinStateId = 17638;
		public const int BlockMaxStateId = 17639;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public LightBlueCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightBlueCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class YellowCandleCake : Block {
		public const int BlockId = 799;
		public const string BlockName = "yellow_candle_cake";
		public const string BlockDisplayName = "Cake with Yellow Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17641;
		public const int BlockMinStateId = 17640;
		public const int BlockMaxStateId = 17641;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public YellowCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public YellowCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LimeCandleCake : Block {
		public const int BlockId = 800;
		public const string BlockName = "lime_candle_cake";
		public const string BlockDisplayName = "Cake with Lime Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17643;
		public const int BlockMinStateId = 17642;
		public const int BlockMaxStateId = 17643;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public LimeCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LimeCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PinkCandleCake : Block {
		public const int BlockId = 801;
		public const string BlockName = "pink_candle_cake";
		public const string BlockDisplayName = "Cake with Pink Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17645;
		public const int BlockMinStateId = 17644;
		public const int BlockMaxStateId = 17645;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public PinkCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PinkCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GrayCandleCake : Block {
		public const int BlockId = 802;
		public const string BlockName = "gray_candle_cake";
		public const string BlockDisplayName = "Cake with Gray Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17647;
		public const int BlockMinStateId = 17646;
		public const int BlockMaxStateId = 17647;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public GrayCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GrayCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightGrayCandleCake : Block {
		public const int BlockId = 803;
		public const string BlockName = "light_gray_candle_cake";
		public const string BlockDisplayName = "Cake with Light Gray Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17649;
		public const int BlockMinStateId = 17648;
		public const int BlockMaxStateId = 17649;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public LightGrayCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightGrayCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CyanCandleCake : Block {
		public const int BlockId = 804;
		public const string BlockName = "cyan_candle_cake";
		public const string BlockDisplayName = "Cake with Cyan Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17651;
		public const int BlockMinStateId = 17650;
		public const int BlockMaxStateId = 17651;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public CyanCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CyanCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PurpleCandleCake : Block {
		public const int BlockId = 805;
		public const string BlockName = "purple_candle_cake";
		public const string BlockDisplayName = "Cake with Purple Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17653;
		public const int BlockMinStateId = 17652;
		public const int BlockMaxStateId = 17653;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public PurpleCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PurpleCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlueCandleCake : Block {
		public const int BlockId = 806;
		public const string BlockName = "blue_candle_cake";
		public const string BlockDisplayName = "Cake with Blue Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17655;
		public const int BlockMinStateId = 17654;
		public const int BlockMaxStateId = 17655;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public BlueCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlueCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BrownCandleCake : Block {
		public const int BlockId = 807;
		public const string BlockName = "brown_candle_cake";
		public const string BlockDisplayName = "Cake with Brown Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17657;
		public const int BlockMinStateId = 17656;
		public const int BlockMaxStateId = 17657;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public BrownCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BrownCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class GreenCandleCake : Block {
		public const int BlockId = 808;
		public const string BlockName = "green_candle_cake";
		public const string BlockDisplayName = "Cake with Green Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17659;
		public const int BlockMinStateId = 17658;
		public const int BlockMaxStateId = 17659;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public GreenCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public GreenCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RedCandleCake : Block {
		public const int BlockId = 809;
		public const string BlockName = "red_candle_cake";
		public const string BlockDisplayName = "Cake with Red Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17661;
		public const int BlockMinStateId = 17660;
		public const int BlockMaxStateId = 17661;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public RedCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RedCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BlackCandleCake : Block {
		public const int BlockId = 810;
		public const string BlockName = "black_candle_cake";
		public const string BlockDisplayName = "Cake with Black Candle";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17663;
		public const int BlockMinStateId = 17662;
		public const int BlockMaxStateId = 17663;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("lit", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public BlackCandleCake () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BlackCandleCake (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AmethystBlock : Block {
		public const int BlockId = 811;
		public const string BlockName = "amethyst_block";
		public const string BlockDisplayName = "Block of Amethyst";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 1.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17664;
		public const int BlockMinStateId = 17664;
		public const int BlockMaxStateId = 17664;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public AmethystBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AmethystBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BuddingAmethyst : Block {
		public const int BlockId = 812;
		public const string BlockName = "budding_amethyst";
		public const string BlockDisplayName = "Budding Amethyst";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 1.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17665;
		public const int BlockMinStateId = 17665;
		public const int BlockMaxStateId = 17665;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public BuddingAmethyst () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BuddingAmethyst (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class AmethystCluster : Block {
		public const int BlockId = 813;
		public const string BlockName = "amethyst_cluster";
		public const string BlockDisplayName = "Amethyst Cluster";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 1.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 5;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17675;
		public const int BlockMinStateId = 17666;
		public const int BlockMaxStateId = 17677;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public AmethystCluster () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public AmethystCluster (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LargeAmethystBud : Block {
		public const int BlockId = 814;
		public const string BlockName = "large_amethyst_bud";
		public const string BlockDisplayName = "Large Amethyst Bud";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 4;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17687;
		public const int BlockMinStateId = 17678;
		public const int BlockMaxStateId = 17689;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public LargeAmethystBud () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LargeAmethystBud (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MediumAmethystBud : Block {
		public const int BlockId = 815;
		public const string BlockName = "medium_amethyst_bud";
		public const string BlockDisplayName = "Medium Amethyst Bud";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 2;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17699;
		public const int BlockMinStateId = 17690;
		public const int BlockMaxStateId = 17701;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public MediumAmethystBud () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MediumAmethystBud (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmallAmethystBud : Block {
		public const int BlockId = 816;
		public const string BlockName = "small_amethyst_bud";
		public const string BlockDisplayName = "Small Amethyst Bud";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 1;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17711;
		public const int BlockMinStateId = 17702;
		public const int BlockMaxStateId = 17713;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 9);	

		public SmallAmethystBud () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmallAmethystBud (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Tuff : Block {
		public const int BlockId = 817;
		public const string BlockName = "tuff";
		public const string BlockDisplayName = "Tuff";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17714;
		public const int BlockMinStateId = 17714;
		public const int BlockMaxStateId = 17714;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Tuff () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Tuff (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Calcite : Block {
		public const int BlockId = 818;
		public const string BlockName = "calcite";
		public const string BlockDisplayName = "Calcite";

		public const float BlockHardness = 0.75F;
		public const float BlockResistance = 0.75F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17715;
		public const int BlockMinStateId = 17715;
		public const int BlockMaxStateId = 17715;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Calcite () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Calcite (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class TintedGlass : Block {
		public const int BlockId = 819;
		public const string BlockName = "tinted_glass";
		public const string BlockDisplayName = "Tinted Glass";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17716;
		public const int BlockMinStateId = 17716;
		public const int BlockMaxStateId = 17716;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public TintedGlass () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public TintedGlass (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PowderSnow : Block {
		public const int BlockId = 820;
		public const string BlockName = "powder_snow";
		public const string BlockDisplayName = "Powder Snow";

		public const float BlockHardness = 0.25F;
		public const float BlockResistance = 0.25F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 1;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 1;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 17717;
		public const int BlockMinStateId = 17717;
		public const int BlockMaxStateId = 17717;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PowderSnow () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PowderSnow (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SculkSensor : Block {
		public const int BlockId = 821;
		public const string BlockName = "sculk_sensor";
		public const string BlockDisplayName = "Sculk Sensor";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 1.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 1;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/hoe";
		public const int BlockDefaultState = 17719;
		public const int BlockMinStateId = 17718;
		public const int BlockMaxStateId = 17813;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("power", BlockStateProperty.BlockStatePropertyType.Int, 16, null),new BlockStateProperty("sculk_sensor_phase", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "inactive", "active", "cooldown" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public SculkSensor () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SculkSensor (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OxidizedCopper : Block {
		public const int BlockId = 822;
		public const string BlockName = "oxidized_copper";
		public const string BlockDisplayName = "Oxidized Copper";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17814;
		public const int BlockMinStateId = 17814;
		public const int BlockMaxStateId = 17814;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public OxidizedCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OxidizedCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WeatheredCopper : Block {
		public const int BlockId = 823;
		public const string BlockName = "weathered_copper";
		public const string BlockDisplayName = "Weathered Copper";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17815;
		public const int BlockMinStateId = 17815;
		public const int BlockMaxStateId = 17815;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WeatheredCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WeatheredCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ExposedCopper : Block {
		public const int BlockId = 824;
		public const string BlockName = "exposed_copper";
		public const string BlockDisplayName = "Exposed Copper";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17816;
		public const int BlockMinStateId = 17816;
		public const int BlockMaxStateId = 17816;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public ExposedCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ExposedCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CopperBlock : Block {
		public const int BlockId = 825;
		public const string BlockName = "copper_block";
		public const string BlockDisplayName = "Block of Copper";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17817;
		public const int BlockMinStateId = 17817;
		public const int BlockMaxStateId = 17817;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CopperBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CopperBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CopperOre : Block {
		public const int BlockId = 826;
		public const string BlockName = "copper_ore";
		public const string BlockDisplayName = "Copper Ore";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17818;
		public const int BlockMinStateId = 17818;
		public const int BlockMaxStateId = 17818;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CopperOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CopperOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateCopperOre : Block {
		public const int BlockId = 827;
		public const string BlockName = "deepslate_copper_ore";
		public const string BlockDisplayName = "Deepslate Copper Ore";

		public const float BlockHardness = 4.5F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17819;
		public const int BlockMinStateId = 17819;
		public const int BlockMaxStateId = 17819;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeepslateCopperOre () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateCopperOre (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OxidizedCutCopper : Block {
		public const int BlockId = 828;
		public const string BlockName = "oxidized_cut_copper";
		public const string BlockDisplayName = "Oxidized Cut Copper";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17820;
		public const int BlockMinStateId = 17820;
		public const int BlockMaxStateId = 17820;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public OxidizedCutCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OxidizedCutCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WeatheredCutCopper : Block {
		public const int BlockId = 829;
		public const string BlockName = "weathered_cut_copper";
		public const string BlockDisplayName = "Weathered Cut Copper";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17821;
		public const int BlockMinStateId = 17821;
		public const int BlockMaxStateId = 17821;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WeatheredCutCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WeatheredCutCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ExposedCutCopper : Block {
		public const int BlockId = 830;
		public const string BlockName = "exposed_cut_copper";
		public const string BlockDisplayName = "Exposed Cut Copper";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17822;
		public const int BlockMinStateId = 17822;
		public const int BlockMaxStateId = 17822;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public ExposedCutCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ExposedCutCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CutCopper : Block {
		public const int BlockId = 831;
		public const string BlockName = "cut_copper";
		public const string BlockDisplayName = "Cut Copper";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17823;
		public const int BlockMinStateId = 17823;
		public const int BlockMaxStateId = 17823;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CutCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CutCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OxidizedCutCopperStairs : Block {
		public const int BlockId = 832;
		public const string BlockName = "oxidized_cut_copper_stairs";
		public const string BlockDisplayName = "Oxidized Cut Copper Stairs";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17835;
		public const int BlockMinStateId = 17824;
		public const int BlockMaxStateId = 17903;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public OxidizedCutCopperStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OxidizedCutCopperStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WeatheredCutCopperStairs : Block {
		public const int BlockId = 833;
		public const string BlockName = "weathered_cut_copper_stairs";
		public const string BlockDisplayName = "Weathered Cut Copper Stairs";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17915;
		public const int BlockMinStateId = 17904;
		public const int BlockMaxStateId = 17983;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public WeatheredCutCopperStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WeatheredCutCopperStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ExposedCutCopperStairs : Block {
		public const int BlockId = 834;
		public const string BlockName = "exposed_cut_copper_stairs";
		public const string BlockDisplayName = "Exposed Cut Copper Stairs";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 17995;
		public const int BlockMinStateId = 17984;
		public const int BlockMaxStateId = 18063;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public ExposedCutCopperStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ExposedCutCopperStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CutCopperStairs : Block {
		public const int BlockId = 835;
		public const string BlockName = "cut_copper_stairs";
		public const string BlockDisplayName = "Cut Copper Stairs";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18075;
		public const int BlockMinStateId = 18064;
		public const int BlockMaxStateId = 18143;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public CutCopperStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CutCopperStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class OxidizedCutCopperSlab : Block {
		public const int BlockId = 836;
		public const string BlockName = "oxidized_cut_copper_slab";
		public const string BlockDisplayName = "Oxidized Cut Copper Slab";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18147;
		public const int BlockMinStateId = 18144;
		public const int BlockMaxStateId = 18149;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public OxidizedCutCopperSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public OxidizedCutCopperSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WeatheredCutCopperSlab : Block {
		public const int BlockId = 837;
		public const string BlockName = "weathered_cut_copper_slab";
		public const string BlockDisplayName = "Weathered Cut Copper Slab";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18153;
		public const int BlockMinStateId = 18150;
		public const int BlockMaxStateId = 18155;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public WeatheredCutCopperSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WeatheredCutCopperSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ExposedCutCopperSlab : Block {
		public const int BlockId = 838;
		public const string BlockName = "exposed_cut_copper_slab";
		public const string BlockDisplayName = "Exposed Cut Copper Slab";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18159;
		public const int BlockMinStateId = 18156;
		public const int BlockMaxStateId = 18161;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public ExposedCutCopperSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ExposedCutCopperSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CutCopperSlab : Block {
		public const int BlockId = 839;
		public const string BlockName = "cut_copper_slab";
		public const string BlockDisplayName = "Cut Copper Slab";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18165;
		public const int BlockMinStateId = 18162;
		public const int BlockMaxStateId = 18167;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public CutCopperSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CutCopperSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedCopperBlock : Block {
		public const int BlockId = 840;
		public const string BlockName = "waxed_copper_block";
		public const string BlockDisplayName = "Waxed Block of Copper";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18168;
		public const int BlockMinStateId = 18168;
		public const int BlockMaxStateId = 18168;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WaxedCopperBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedCopperBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedWeatheredCopper : Block {
		public const int BlockId = 841;
		public const string BlockName = "waxed_weathered_copper";
		public const string BlockDisplayName = "Waxed Weathered Copper";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18169;
		public const int BlockMinStateId = 18169;
		public const int BlockMaxStateId = 18169;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WaxedWeatheredCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedWeatheredCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedExposedCopper : Block {
		public const int BlockId = 842;
		public const string BlockName = "waxed_exposed_copper";
		public const string BlockDisplayName = "Waxed Exposed Copper";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18170;
		public const int BlockMinStateId = 18170;
		public const int BlockMaxStateId = 18170;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WaxedExposedCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedExposedCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedOxidizedCopper : Block {
		public const int BlockId = 843;
		public const string BlockName = "waxed_oxidized_copper";
		public const string BlockDisplayName = "Waxed Oxidized Copper";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18171;
		public const int BlockMinStateId = 18171;
		public const int BlockMaxStateId = 18171;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WaxedOxidizedCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedOxidizedCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedOxidizedCutCopper : Block {
		public const int BlockId = 844;
		public const string BlockName = "waxed_oxidized_cut_copper";
		public const string BlockDisplayName = "Waxed Oxidized Cut Copper";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18172;
		public const int BlockMinStateId = 18172;
		public const int BlockMaxStateId = 18172;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WaxedOxidizedCutCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedOxidizedCutCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedWeatheredCutCopper : Block {
		public const int BlockId = 845;
		public const string BlockName = "waxed_weathered_cut_copper";
		public const string BlockDisplayName = "Waxed Weathered Cut Copper";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18173;
		public const int BlockMinStateId = 18173;
		public const int BlockMaxStateId = 18173;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WaxedWeatheredCutCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedWeatheredCutCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedExposedCutCopper : Block {
		public const int BlockId = 846;
		public const string BlockName = "waxed_exposed_cut_copper";
		public const string BlockDisplayName = "Waxed Exposed Cut Copper";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18174;
		public const int BlockMinStateId = 18174;
		public const int BlockMaxStateId = 18174;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WaxedExposedCutCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedExposedCutCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedCutCopper : Block {
		public const int BlockId = 847;
		public const string BlockName = "waxed_cut_copper";
		public const string BlockDisplayName = "Waxed Cut Copper";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18175;
		public const int BlockMinStateId = 18175;
		public const int BlockMaxStateId = 18175;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public WaxedCutCopper () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedCutCopper (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedOxidizedCutCopperStairs : Block {
		public const int BlockId = 848;
		public const string BlockName = "waxed_oxidized_cut_copper_stairs";
		public const string BlockDisplayName = "Waxed Oxidized Cut Copper Stairs";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18187;
		public const int BlockMinStateId = 18176;
		public const int BlockMaxStateId = 18255;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public WaxedOxidizedCutCopperStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedOxidizedCutCopperStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedWeatheredCutCopperStairs : Block {
		public const int BlockId = 849;
		public const string BlockName = "waxed_weathered_cut_copper_stairs";
		public const string BlockDisplayName = "Waxed Weathered Cut Copper Stairs";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18267;
		public const int BlockMinStateId = 18256;
		public const int BlockMaxStateId = 18335;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public WaxedWeatheredCutCopperStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedWeatheredCutCopperStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedExposedCutCopperStairs : Block {
		public const int BlockId = 850;
		public const string BlockName = "waxed_exposed_cut_copper_stairs";
		public const string BlockDisplayName = "Waxed Exposed Cut Copper Stairs";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18347;
		public const int BlockMinStateId = 18336;
		public const int BlockMaxStateId = 18415;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public WaxedExposedCutCopperStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedExposedCutCopperStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedCutCopperStairs : Block {
		public const int BlockId = 851;
		public const string BlockName = "waxed_cut_copper_stairs";
		public const string BlockDisplayName = "Waxed Cut Copper Stairs";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18427;
		public const int BlockMinStateId = 18416;
		public const int BlockMaxStateId = 18495;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public WaxedCutCopperStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedCutCopperStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedOxidizedCutCopperSlab : Block {
		public const int BlockId = 852;
		public const string BlockName = "waxed_oxidized_cut_copper_slab";
		public const string BlockDisplayName = "Waxed Oxidized Cut Copper Slab";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18499;
		public const int BlockMinStateId = 18496;
		public const int BlockMaxStateId = 18501;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public WaxedOxidizedCutCopperSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedOxidizedCutCopperSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedWeatheredCutCopperSlab : Block {
		public const int BlockId = 853;
		public const string BlockName = "waxed_weathered_cut_copper_slab";
		public const string BlockDisplayName = "Waxed Weathered Cut Copper Slab";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18505;
		public const int BlockMinStateId = 18502;
		public const int BlockMaxStateId = 18507;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public WaxedWeatheredCutCopperSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedWeatheredCutCopperSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedExposedCutCopperSlab : Block {
		public const int BlockId = 854;
		public const string BlockName = "waxed_exposed_cut_copper_slab";
		public const string BlockDisplayName = "Waxed Exposed Cut Copper Slab";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18511;
		public const int BlockMinStateId = 18508;
		public const int BlockMaxStateId = 18513;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public WaxedExposedCutCopperSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedExposedCutCopperSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class WaxedCutCopperSlab : Block {
		public const int BlockId = 855;
		public const string BlockName = "waxed_cut_copper_slab";
		public const string BlockDisplayName = "Waxed Cut Copper Slab";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18517;
		public const int BlockMinStateId = 18514;
		public const int BlockMaxStateId = 18519;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public WaxedCutCopperSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public WaxedCutCopperSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class LightningRod : Block {
		public const int BlockId = 856;
		public const string BlockName = "lightning_rod";
		public const string BlockDisplayName = "Lightning Rod";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18539;
		public const int BlockMinStateId = 18520;
		public const int BlockMaxStateId = 18543;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 6, new string[] { "north", "east", "south", "west", "up", "down" }),new BlockStateProperty("powered", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 19);	

		public LightningRod () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public LightningRod (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PointedDripstone : Block {
		public const int BlockId = 857;
		public const string BlockName = "pointed_dripstone";
		public const string BlockDisplayName = "Pointed Dripstone";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 3F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18549;
		public const int BlockMinStateId = 18544;
		public const int BlockMaxStateId = 18563;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("thickness", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "tip_merge", "tip", "frustum", "middle", "base" }),new BlockStateProperty("vertical_direction", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "up", "down" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 5);	

		public PointedDripstone () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PointedDripstone (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DripstoneBlock : Block {
		public const int BlockId = 858;
		public const string BlockName = "dripstone_block";
		public const string BlockDisplayName = "Dripstone Block";

		public const float BlockHardness = 1.5F;
		public const float BlockResistance = 1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18564;
		public const int BlockMinStateId = 18564;
		public const int BlockMaxStateId = 18564;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DripstoneBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DripstoneBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CaveVines : Block {
		public const int BlockId = 859;
		public const string BlockName = "cave_vines";
		public const string BlockDisplayName = "Cave Vines";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 18566;
		public const int BlockMinStateId = 18565;
		public const int BlockMaxStateId = 18616;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("age", BlockStateProperty.BlockStatePropertyType.Int, 26, null),new BlockStateProperty("berries", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public CaveVines () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CaveVines (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CaveVinesPlant : Block {
		public const int BlockId = 860;
		public const string BlockName = "cave_vines_plant";
		public const string BlockDisplayName = "Cave Vines Plant";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 18618;
		public const int BlockMinStateId = 18617;
		public const int BlockMaxStateId = 18618;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("berries", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public CaveVinesPlant () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CaveVinesPlant (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SporeBlossom : Block {
		public const int BlockId = 861;
		public const string BlockName = "spore_blossom";
		public const string BlockDisplayName = "Spore Blossom";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 18619;
		public const int BlockMinStateId = 18619;
		public const int BlockMaxStateId = 18619;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SporeBlossom () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SporeBlossom (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Azalea : Block {
		public const int BlockId = 862;
		public const string BlockName = "azalea";
		public const string BlockDisplayName = "Azalea";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 18620;
		public const int BlockMinStateId = 18620;
		public const int BlockMaxStateId = 18620;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public Azalea () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Azalea (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class FloweringAzalea : Block {
		public const int BlockId = 863;
		public const string BlockName = "flowering_azalea";
		public const string BlockDisplayName = "Flowering Azalea";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 18621;
		public const int BlockMinStateId = 18621;
		public const int BlockMaxStateId = 18621;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public FloweringAzalea () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public FloweringAzalea (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MossCarpet : Block {
		public const int BlockId = 864;
		public const string BlockName = "moss_carpet";
		public const string BlockDisplayName = "Moss Carpet";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant";
		public const int BlockDefaultState = 18622;
		public const int BlockMinStateId = 18622;
		public const int BlockMaxStateId = 18622;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public MossCarpet () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MossCarpet (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class MossBlock : Block {
		public const int BlockId = 865;
		public const string BlockName = "moss_block";
		public const string BlockDisplayName = "Moss Block";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/hoe";
		public const int BlockDefaultState = 18623;
		public const int BlockMinStateId = 18623;
		public const int BlockMaxStateId = 18623;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public MossBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public MossBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BigDripleaf : Block {
		public const int BlockId = 866;
		public const string BlockName = "big_dripleaf";
		public const string BlockDisplayName = "Big Dripleaf";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 18625;
		public const int BlockMinStateId = 18624;
		public const int BlockMaxStateId = 18655;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("tilt", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "none", "unstable", "partial", "full" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public BigDripleaf () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BigDripleaf (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class BigDripleafStem : Block {
		public const int BlockId = 867;
		public const string BlockName = "big_dripleaf_stem";
		public const string BlockDisplayName = "Big Dripleaf Stem";

		public const float BlockHardness = 0.1F;
		public const float BlockResistance = 0.1F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 18657;
		public const int BlockMinStateId = 18656;
		public const int BlockMaxStateId = 18663;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public BigDripleafStem () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public BigDripleafStem (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmallDripleaf : Block {
		public const int BlockId = 868;
		public const string BlockName = "small_dripleaf";
		public const string BlockDisplayName = "Small Dripleaf";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 18667;
		public const int BlockMinStateId = 18664;
		public const int BlockMaxStateId = 18679;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "upper", "lower" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public SmallDripleaf () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmallDripleaf (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class HangingRoots : Block {
		public const int BlockId = 869;
		public const string BlockName = "hanging_roots";
		public const string BlockDisplayName = "Hanging Roots";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "empty";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "plant;mineable/axe";
		public const int BlockDefaultState = 18681;
		public const int BlockMinStateId = 18680;
		public const int BlockMaxStateId = 18681;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 1);	

		public HangingRoots () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public HangingRoots (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RootedDirt : Block {
		public const int BlockId = 870;
		public const string BlockName = "rooted_dirt";
		public const string BlockDisplayName = "Rooted Dirt";

		public const float BlockHardness = 0.5F;
		public const float BlockResistance = 0.5F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/shovel";
		public const int BlockDefaultState = 18682;
		public const int BlockMinStateId = 18682;
		public const int BlockMaxStateId = 18682;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RootedDirt () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RootedDirt (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class Deepslate : Block {
		public const int BlockId = 871;
		public const string BlockName = "deepslate";
		public const string BlockDisplayName = "Deepslate";

		public const float BlockHardness = 3F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18684;
		public const int BlockMinStateId = 18683;
		public const int BlockMaxStateId = 18685;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public Deepslate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public Deepslate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CobbledDeepslate : Block {
		public const int BlockId = 872;
		public const string BlockName = "cobbled_deepslate";
		public const string BlockDisplayName = "Cobbled Deepslate";

		public const float BlockHardness = 3.5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18686;
		public const int BlockMinStateId = 18686;
		public const int BlockMaxStateId = 18686;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CobbledDeepslate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CobbledDeepslate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CobbledDeepslateStairs : Block {
		public const int BlockId = 873;
		public const string BlockName = "cobbled_deepslate_stairs";
		public const string BlockDisplayName = "Cobbled Deepslate Stairs";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18698;
		public const int BlockMinStateId = 18687;
		public const int BlockMaxStateId = 18766;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public CobbledDeepslateStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CobbledDeepslateStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CobbledDeepslateSlab : Block {
		public const int BlockId = 874;
		public const string BlockName = "cobbled_deepslate_slab";
		public const string BlockDisplayName = "Cobbled Deepslate Slab";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18770;
		public const int BlockMinStateId = 18767;
		public const int BlockMaxStateId = 18772;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public CobbledDeepslateSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CobbledDeepslateSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CobbledDeepslateWall : Block {
		public const int BlockId = 875;
		public const string BlockName = "cobbled_deepslate_wall";
		public const string BlockDisplayName = "Cobbled Deepslate Wall";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 18776;
		public const int BlockMinStateId = 18773;
		public const int BlockMaxStateId = 19096;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public CobbledDeepslateWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CobbledDeepslateWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedDeepslate : Block {
		public const int BlockId = 876;
		public const string BlockName = "polished_deepslate";
		public const string BlockDisplayName = "Polished Deepslate";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 19097;
		public const int BlockMinStateId = 19097;
		public const int BlockMaxStateId = 19097;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PolishedDeepslate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedDeepslate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedDeepslateStairs : Block {
		public const int BlockId = 877;
		public const string BlockName = "polished_deepslate_stairs";
		public const string BlockDisplayName = "Polished Deepslate Stairs";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 19109;
		public const int BlockMinStateId = 19098;
		public const int BlockMaxStateId = 19177;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public PolishedDeepslateStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedDeepslateStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedDeepslateSlab : Block {
		public const int BlockId = 878;
		public const string BlockName = "polished_deepslate_slab";
		public const string BlockDisplayName = "Polished Deepslate Slab";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 19181;
		public const int BlockMinStateId = 19178;
		public const int BlockMaxStateId = 19183;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public PolishedDeepslateSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedDeepslateSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PolishedDeepslateWall : Block {
		public const int BlockId = 879;
		public const string BlockName = "polished_deepslate_wall";
		public const string BlockDisplayName = "Polished Deepslate Wall";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 19187;
		public const int BlockMinStateId = 19184;
		public const int BlockMaxStateId = 19507;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public PolishedDeepslateWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PolishedDeepslateWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateTiles : Block {
		public const int BlockId = 880;
		public const string BlockName = "deepslate_tiles";
		public const string BlockDisplayName = "Deepslate Tiles";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 19508;
		public const int BlockMinStateId = 19508;
		public const int BlockMaxStateId = 19508;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeepslateTiles () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateTiles (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateTileStairs : Block {
		public const int BlockId = 881;
		public const string BlockName = "deepslate_tile_stairs";
		public const string BlockDisplayName = "Deepslate Tile Stairs";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 19520;
		public const int BlockMinStateId = 19509;
		public const int BlockMaxStateId = 19588;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public DeepslateTileStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateTileStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateTileSlab : Block {
		public const int BlockId = 882;
		public const string BlockName = "deepslate_tile_slab";
		public const string BlockDisplayName = "Deepslate Tile Slab";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 19592;
		public const int BlockMinStateId = 19589;
		public const int BlockMaxStateId = 19594;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public DeepslateTileSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateTileSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateTileWall : Block {
		public const int BlockId = 883;
		public const string BlockName = "deepslate_tile_wall";
		public const string BlockDisplayName = "Deepslate Tile Wall";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 19598;
		public const int BlockMinStateId = 19595;
		public const int BlockMaxStateId = 19918;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public DeepslateTileWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateTileWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateBricks : Block {
		public const int BlockId = 884;
		public const string BlockName = "deepslate_bricks";
		public const string BlockDisplayName = "Deepslate Bricks";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 19919;
		public const int BlockMinStateId = 19919;
		public const int BlockMaxStateId = 19919;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public DeepslateBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateBrickStairs : Block {
		public const int BlockId = 885;
		public const string BlockName = "deepslate_brick_stairs";
		public const string BlockDisplayName = "Deepslate Brick Stairs";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 19931;
		public const int BlockMinStateId = 19920;
		public const int BlockMaxStateId = 19999;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("facing", BlockStateProperty.BlockStatePropertyType.Enum, 4, new string[] { "north", "south", "west", "east" }),new BlockStateProperty("half", BlockStateProperty.BlockStatePropertyType.Enum, 2, new string[] { "top", "bottom" }),new BlockStateProperty("shape", BlockStateProperty.BlockStatePropertyType.Enum, 5, new string[] { "straight", "inner_left", "inner_right", "outer_left", "outer_right" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 11);	

		public DeepslateBrickStairs () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateBrickStairs (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateBrickSlab : Block {
		public const int BlockId = 886;
		public const string BlockName = "deepslate_brick_slab";
		public const string BlockDisplayName = "Deepslate Brick Slab";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 20003;
		public const int BlockMinStateId = 20000;
		public const int BlockMaxStateId = 20005;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("type", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "top", "bottom", "double" }),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null), }, 3);	

		public DeepslateBrickSlab () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateBrickSlab (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class DeepslateBrickWall : Block {
		public const int BlockId = 887;
		public const string BlockName = "deepslate_brick_wall";
		public const string BlockDisplayName = "Deepslate Brick Wall";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 20009;
		public const int BlockMinStateId = 20006;
		public const int BlockMaxStateId = 20329;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("east", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("north", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("south", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }),new BlockStateProperty("up", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("waterlogged", BlockStateProperty.BlockStatePropertyType.Bool, 2, null),new BlockStateProperty("west", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "none", "low", "tall" }), }, 3);	

		public DeepslateBrickWall () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public DeepslateBrickWall (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class ChiseledDeepslate : Block {
		public const int BlockId = 888;
		public const string BlockName = "chiseled_deepslate";
		public const string BlockDisplayName = "Chiseled Deepslate";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 20330;
		public const int BlockMinStateId = 20330;
		public const int BlockMaxStateId = 20330;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public ChiseledDeepslate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public ChiseledDeepslate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrackedDeepslateBricks : Block {
		public const int BlockId = 889;
		public const string BlockName = "cracked_deepslate_bricks";
		public const string BlockDisplayName = "Cracked Deepslate Bricks";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 20331;
		public const int BlockMinStateId = 20331;
		public const int BlockMaxStateId = 20331;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CrackedDeepslateBricks () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrackedDeepslateBricks (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class CrackedDeepslateTiles : Block {
		public const int BlockId = 890;
		public const string BlockName = "cracked_deepslate_tiles";
		public const string BlockDisplayName = "Cracked Deepslate Tiles";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 20332;
		public const int BlockMinStateId = 20332;
		public const int BlockMaxStateId = 20332;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public CrackedDeepslateTiles () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public CrackedDeepslateTiles (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class InfestedDeepslate : Block {
		public const int BlockId = 891;
		public const string BlockName = "infested_deepslate";
		public const string BlockDisplayName = "Infested Deepslate";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 20334;
		public const int BlockMinStateId = 20333;
		public const int BlockMaxStateId = 20335;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] { new BlockStateProperty("axis", BlockStateProperty.BlockStatePropertyType.Enum, 3, new string[] { "x", "y", "z" }), }, 1);	

		public InfestedDeepslate () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public InfestedDeepslate (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class SmoothBasalt : Block {
		public const int BlockId = 892;
		public const string BlockName = "smooth_basalt";
		public const string BlockDisplayName = "Smooth Basalt";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 20336;
		public const int BlockMinStateId = 20336;
		public const int BlockMaxStateId = 20336;
				public static readonly int[]? BlockHarvestTools = new int[] { 701, 706, 711, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public SmoothBasalt () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public SmoothBasalt (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RawIronBlock : Block {
		public const int BlockId = 893;
		public const string BlockName = "raw_iron_block";
		public const string BlockDisplayName = "Block of Raw Iron";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 20337;
		public const int BlockMinStateId = 20337;
		public const int BlockMaxStateId = 20337;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RawIronBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RawIronBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RawCopperBlock : Block {
		public const int BlockId = 894;
		public const string BlockName = "raw_copper_block";
		public const string BlockDisplayName = "Block of Raw Copper";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 20338;
		public const int BlockMinStateId = 20338;
		public const int BlockMaxStateId = 20338;
				public static readonly int[]? BlockHarvestTools = new int[] { 706, 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RawCopperBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RawCopperBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class RawGoldBlock : Block {
		public const int BlockId = 895;
		public const string BlockName = "raw_gold_block";
		public const string BlockDisplayName = "Block of Raw Gold";

		public const float BlockHardness = 5F;
		public const float BlockResistance = 6F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = false;
		public const int BlockFilterLight = 15;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "mineable/pickaxe";
		public const int BlockDefaultState = 20339;
		public const int BlockMinStateId = 20339;
		public const int BlockMaxStateId = 20339;
				public static readonly int[]? BlockHarvestTools = new int[] { 716, 721, 726 };
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public RawGoldBlock () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public RawGoldBlock (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedAzaleaBush : Block {
		public const int BlockId = 896;
		public const string BlockName = "potted_azalea_bush";
		public const string BlockDisplayName = "Potted Azalea";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 20340;
		public const int BlockMinStateId = 20340;
		public const int BlockMaxStateId = 20340;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedAzaleaBush () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedAzaleaBush (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	public class PottedFloweringAzaleaBush : Block {
		public const int BlockId = 897;
		public const string BlockName = "potted_flowering_azalea_bush";
		public const string BlockDisplayName = "Potted Flowering Azalea";

		public const float BlockHardness = 0F;
		public const float BlockResistance = 0F;
		public const bool BlockDiggable = true;
		public const bool BlockTransparent = true;
		public const int BlockFilterLight = 0;
		public const int BlockEmitLight = 0;
		public const string BlockBoundingBox = "block";
		public const int BlockStackSize = 64;
		public const string BlockMaterial = "default";
		public const int BlockDefaultState = 20341;
		public const int BlockMinStateId = 20341;
		public const int BlockMaxStateId = 20341;
				public static readonly int[]? BlockHarvestTools = null;
			
		public static readonly BlockProperties BlockProperties = new BlockProperties(new BlockStateProperty[] {  }, 0);	

		public PottedFloweringAzaleaBush () : base(BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {} 

		public PottedFloweringAzaleaBush (int state, Position pos) : base(state, pos, BlockId, BlockName, BlockDisplayName, BlockHardness, BlockResistance, BlockDiggable, BlockTransparent, BlockFilterLight, BlockEmitLight, BlockBoundingBox, BlockStackSize, BlockMaterial, BlockDefaultState, BlockMinStateId, BlockMaxStateId, BlockHarvestTools, BlockProperties) {}
	}
	

	public enum BlockType {
					Air = 0,
					Stone = 1,
					Granite = 2,
					PolishedGranite = 3,
					Diorite = 4,
					PolishedDiorite = 5,
					Andesite = 6,
					PolishedAndesite = 7,
					GrassBlock = 8,
					Dirt = 9,
					CoarseDirt = 10,
					Podzol = 11,
					Cobblestone = 12,
					OakPlanks = 13,
					SprucePlanks = 14,
					BirchPlanks = 15,
					JunglePlanks = 16,
					AcaciaPlanks = 17,
					DarkOakPlanks = 18,
					OakSapling = 19,
					SpruceSapling = 20,
					BirchSapling = 21,
					JungleSapling = 22,
					AcaciaSapling = 23,
					DarkOakSapling = 24,
					Bedrock = 25,
					Water = 26,
					Lava = 27,
					Sand = 28,
					RedSand = 29,
					Gravel = 30,
					GoldOre = 31,
					DeepslateGoldOre = 32,
					IronOre = 33,
					DeepslateIronOre = 34,
					CoalOre = 35,
					DeepslateCoalOre = 36,
					NetherGoldOre = 37,
					OakLog = 38,
					SpruceLog = 39,
					BirchLog = 40,
					JungleLog = 41,
					AcaciaLog = 42,
					DarkOakLog = 43,
					StrippedSpruceLog = 44,
					StrippedBirchLog = 45,
					StrippedJungleLog = 46,
					StrippedAcaciaLog = 47,
					StrippedDarkOakLog = 48,
					StrippedOakLog = 49,
					OakWood = 50,
					SpruceWood = 51,
					BirchWood = 52,
					JungleWood = 53,
					AcaciaWood = 54,
					DarkOakWood = 55,
					StrippedOakWood = 56,
					StrippedSpruceWood = 57,
					StrippedBirchWood = 58,
					StrippedJungleWood = 59,
					StrippedAcaciaWood = 60,
					StrippedDarkOakWood = 61,
					OakLeaves = 62,
					SpruceLeaves = 63,
					BirchLeaves = 64,
					JungleLeaves = 65,
					AcaciaLeaves = 66,
					DarkOakLeaves = 67,
					AzaleaLeaves = 68,
					FloweringAzaleaLeaves = 69,
					Sponge = 70,
					WetSponge = 71,
					Glass = 72,
					LapisOre = 73,
					DeepslateLapisOre = 74,
					LapisBlock = 75,
					Dispenser = 76,
					Sandstone = 77,
					ChiseledSandstone = 78,
					CutSandstone = 79,
					NoteBlock = 80,
					WhiteBed = 81,
					OrangeBed = 82,
					MagentaBed = 83,
					LightBlueBed = 84,
					YellowBed = 85,
					LimeBed = 86,
					PinkBed = 87,
					GrayBed = 88,
					LightGrayBed = 89,
					CyanBed = 90,
					PurpleBed = 91,
					BlueBed = 92,
					BrownBed = 93,
					GreenBed = 94,
					RedBed = 95,
					BlackBed = 96,
					PoweredRail = 97,
					DetectorRail = 98,
					StickyPiston = 99,
					Cobweb = 100,
					Grass = 101,
					Fern = 102,
					DeadBush = 103,
					Seagrass = 104,
					TallSeagrass = 105,
					Piston = 106,
					PistonHead = 107,
					WhiteWool = 108,
					OrangeWool = 109,
					MagentaWool = 110,
					LightBlueWool = 111,
					YellowWool = 112,
					LimeWool = 113,
					PinkWool = 114,
					GrayWool = 115,
					LightGrayWool = 116,
					CyanWool = 117,
					PurpleWool = 118,
					BlueWool = 119,
					BrownWool = 120,
					GreenWool = 121,
					RedWool = 122,
					BlackWool = 123,
					MovingPiston = 124,
					Dandelion = 125,
					Poppy = 126,
					BlueOrchid = 127,
					Allium = 128,
					AzureBluet = 129,
					RedTulip = 130,
					OrangeTulip = 131,
					WhiteTulip = 132,
					PinkTulip = 133,
					OxeyeDaisy = 134,
					Cornflower = 135,
					WitherRose = 136,
					LilyOfTheValley = 137,
					BrownMushroom = 138,
					RedMushroom = 139,
					GoldBlock = 140,
					IronBlock = 141,
					Bricks = 142,
					Tnt = 143,
					Bookshelf = 144,
					MossyCobblestone = 145,
					Obsidian = 146,
					Torch = 147,
					WallTorch = 148,
					Fire = 149,
					SoulFire = 150,
					Spawner = 151,
					OakStairs = 152,
					Chest = 153,
					RedstoneWire = 154,
					DiamondOre = 155,
					DeepslateDiamondOre = 156,
					DiamondBlock = 157,
					CraftingTable = 158,
					Wheat = 159,
					Farmland = 160,
					Furnace = 161,
					OakSign = 162,
					SpruceSign = 163,
					BirchSign = 164,
					AcaciaSign = 165,
					JungleSign = 166,
					DarkOakSign = 167,
					OakDoor = 168,
					Ladder = 169,
					Rail = 170,
					CobblestoneStairs = 171,
					OakWallSign = 172,
					SpruceWallSign = 173,
					BirchWallSign = 174,
					AcaciaWallSign = 175,
					JungleWallSign = 176,
					DarkOakWallSign = 177,
					Lever = 178,
					StonePressurePlate = 179,
					IronDoor = 180,
					OakPressurePlate = 181,
					SprucePressurePlate = 182,
					BirchPressurePlate = 183,
					JunglePressurePlate = 184,
					AcaciaPressurePlate = 185,
					DarkOakPressurePlate = 186,
					RedstoneOre = 187,
					DeepslateRedstoneOre = 188,
					RedstoneTorch = 189,
					RedstoneWallTorch = 190,
					StoneButton = 191,
					Snow = 192,
					Ice = 193,
					SnowBlock = 194,
					Cactus = 195,
					Clay = 196,
					SugarCane = 197,
					Jukebox = 198,
					OakFence = 199,
					Pumpkin = 200,
					Netherrack = 201,
					SoulSand = 202,
					SoulSoil = 203,
					Basalt = 204,
					PolishedBasalt = 205,
					SoulTorch = 206,
					SoulWallTorch = 207,
					Glowstone = 208,
					NetherPortal = 209,
					CarvedPumpkin = 210,
					JackOLantern = 211,
					Cake = 212,
					Repeater = 213,
					WhiteStainedGlass = 214,
					OrangeStainedGlass = 215,
					MagentaStainedGlass = 216,
					LightBlueStainedGlass = 217,
					YellowStainedGlass = 218,
					LimeStainedGlass = 219,
					PinkStainedGlass = 220,
					GrayStainedGlass = 221,
					LightGrayStainedGlass = 222,
					CyanStainedGlass = 223,
					PurpleStainedGlass = 224,
					BlueStainedGlass = 225,
					BrownStainedGlass = 226,
					GreenStainedGlass = 227,
					RedStainedGlass = 228,
					BlackStainedGlass = 229,
					OakTrapdoor = 230,
					SpruceTrapdoor = 231,
					BirchTrapdoor = 232,
					JungleTrapdoor = 233,
					AcaciaTrapdoor = 234,
					DarkOakTrapdoor = 235,
					StoneBricks = 236,
					MossyStoneBricks = 237,
					CrackedStoneBricks = 238,
					ChiseledStoneBricks = 239,
					InfestedStone = 240,
					InfestedCobblestone = 241,
					InfestedStoneBricks = 242,
					InfestedMossyStoneBricks = 243,
					InfestedCrackedStoneBricks = 244,
					InfestedChiseledStoneBricks = 245,
					BrownMushroomBlock = 246,
					RedMushroomBlock = 247,
					MushroomStem = 248,
					IronBars = 249,
					Chain = 250,
					GlassPane = 251,
					Melon = 252,
					AttachedPumpkinStem = 253,
					AttachedMelonStem = 254,
					PumpkinStem = 255,
					MelonStem = 256,
					Vine = 257,
					GlowLichen = 258,
					OakFenceGate = 259,
					BrickStairs = 260,
					StoneBrickStairs = 261,
					Mycelium = 262,
					LilyPad = 263,
					NetherBricks = 264,
					NetherBrickFence = 265,
					NetherBrickStairs = 266,
					NetherWart = 267,
					EnchantingTable = 268,
					BrewingStand = 269,
					Cauldron = 270,
					WaterCauldron = 271,
					LavaCauldron = 272,
					PowderSnowCauldron = 273,
					EndPortal = 274,
					EndPortalFrame = 275,
					EndStone = 276,
					DragonEgg = 277,
					RedstoneLamp = 278,
					Cocoa = 279,
					SandstoneStairs = 280,
					EmeraldOre = 281,
					DeepslateEmeraldOre = 282,
					EnderChest = 283,
					TripwireHook = 284,
					Tripwire = 285,
					EmeraldBlock = 286,
					SpruceStairs = 287,
					BirchStairs = 288,
					JungleStairs = 289,
					CommandBlock = 290,
					Beacon = 291,
					CobblestoneWall = 292,
					MossyCobblestoneWall = 293,
					FlowerPot = 294,
					PottedOakSapling = 295,
					PottedSpruceSapling = 296,
					PottedBirchSapling = 297,
					PottedJungleSapling = 298,
					PottedAcaciaSapling = 299,
					PottedDarkOakSapling = 300,
					PottedFern = 301,
					PottedDandelion = 302,
					PottedPoppy = 303,
					PottedBlueOrchid = 304,
					PottedAllium = 305,
					PottedAzureBluet = 306,
					PottedRedTulip = 307,
					PottedOrangeTulip = 308,
					PottedWhiteTulip = 309,
					PottedPinkTulip = 310,
					PottedOxeyeDaisy = 311,
					PottedCornflower = 312,
					PottedLilyOfTheValley = 313,
					PottedWitherRose = 314,
					PottedRedMushroom = 315,
					PottedBrownMushroom = 316,
					PottedDeadBush = 317,
					PottedCactus = 318,
					Carrots = 319,
					Potatoes = 320,
					OakButton = 321,
					SpruceButton = 322,
					BirchButton = 323,
					JungleButton = 324,
					AcaciaButton = 325,
					DarkOakButton = 326,
					SkeletonSkull = 327,
					SkeletonWallSkull = 328,
					WitherSkeletonSkull = 329,
					WitherSkeletonWallSkull = 330,
					ZombieHead = 331,
					ZombieWallHead = 332,
					PlayerHead = 333,
					PlayerWallHead = 334,
					CreeperHead = 335,
					CreeperWallHead = 336,
					DragonHead = 337,
					DragonWallHead = 338,
					Anvil = 339,
					ChippedAnvil = 340,
					DamagedAnvil = 341,
					TrappedChest = 342,
					LightWeightedPressurePlate = 343,
					HeavyWeightedPressurePlate = 344,
					Comparator = 345,
					DaylightDetector = 346,
					RedstoneBlock = 347,
					NetherQuartzOre = 348,
					Hopper = 349,
					QuartzBlock = 350,
					ChiseledQuartzBlock = 351,
					QuartzPillar = 352,
					QuartzStairs = 353,
					ActivatorRail = 354,
					Dropper = 355,
					WhiteTerracotta = 356,
					OrangeTerracotta = 357,
					MagentaTerracotta = 358,
					LightBlueTerracotta = 359,
					YellowTerracotta = 360,
					LimeTerracotta = 361,
					PinkTerracotta = 362,
					GrayTerracotta = 363,
					LightGrayTerracotta = 364,
					CyanTerracotta = 365,
					PurpleTerracotta = 366,
					BlueTerracotta = 367,
					BrownTerracotta = 368,
					GreenTerracotta = 369,
					RedTerracotta = 370,
					BlackTerracotta = 371,
					WhiteStainedGlassPane = 372,
					OrangeStainedGlassPane = 373,
					MagentaStainedGlassPane = 374,
					LightBlueStainedGlassPane = 375,
					YellowStainedGlassPane = 376,
					LimeStainedGlassPane = 377,
					PinkStainedGlassPane = 378,
					GrayStainedGlassPane = 379,
					LightGrayStainedGlassPane = 380,
					CyanStainedGlassPane = 381,
					PurpleStainedGlassPane = 382,
					BlueStainedGlassPane = 383,
					BrownStainedGlassPane = 384,
					GreenStainedGlassPane = 385,
					RedStainedGlassPane = 386,
					BlackStainedGlassPane = 387,
					AcaciaStairs = 388,
					DarkOakStairs = 389,
					SlimeBlock = 390,
					Barrier = 391,
					Light = 392,
					IronTrapdoor = 393,
					Prismarine = 394,
					PrismarineBricks = 395,
					DarkPrismarine = 396,
					PrismarineStairs = 397,
					PrismarineBrickStairs = 398,
					DarkPrismarineStairs = 399,
					PrismarineSlab = 400,
					PrismarineBrickSlab = 401,
					DarkPrismarineSlab = 402,
					SeaLantern = 403,
					HayBlock = 404,
					WhiteCarpet = 405,
					OrangeCarpet = 406,
					MagentaCarpet = 407,
					LightBlueCarpet = 408,
					YellowCarpet = 409,
					LimeCarpet = 410,
					PinkCarpet = 411,
					GrayCarpet = 412,
					LightGrayCarpet = 413,
					CyanCarpet = 414,
					PurpleCarpet = 415,
					BlueCarpet = 416,
					BrownCarpet = 417,
					GreenCarpet = 418,
					RedCarpet = 419,
					BlackCarpet = 420,
					Terracotta = 421,
					CoalBlock = 422,
					PackedIce = 423,
					Sunflower = 424,
					Lilac = 425,
					RoseBush = 426,
					Peony = 427,
					TallGrass = 428,
					LargeFern = 429,
					WhiteBanner = 430,
					OrangeBanner = 431,
					MagentaBanner = 432,
					LightBlueBanner = 433,
					YellowBanner = 434,
					LimeBanner = 435,
					PinkBanner = 436,
					GrayBanner = 437,
					LightGrayBanner = 438,
					CyanBanner = 439,
					PurpleBanner = 440,
					BlueBanner = 441,
					BrownBanner = 442,
					GreenBanner = 443,
					RedBanner = 444,
					BlackBanner = 445,
					WhiteWallBanner = 446,
					OrangeWallBanner = 447,
					MagentaWallBanner = 448,
					LightBlueWallBanner = 449,
					YellowWallBanner = 450,
					LimeWallBanner = 451,
					PinkWallBanner = 452,
					GrayWallBanner = 453,
					LightGrayWallBanner = 454,
					CyanWallBanner = 455,
					PurpleWallBanner = 456,
					BlueWallBanner = 457,
					BrownWallBanner = 458,
					GreenWallBanner = 459,
					RedWallBanner = 460,
					BlackWallBanner = 461,
					RedSandstone = 462,
					ChiseledRedSandstone = 463,
					CutRedSandstone = 464,
					RedSandstoneStairs = 465,
					OakSlab = 466,
					SpruceSlab = 467,
					BirchSlab = 468,
					JungleSlab = 469,
					AcaciaSlab = 470,
					DarkOakSlab = 471,
					StoneSlab = 472,
					SmoothStoneSlab = 473,
					SandstoneSlab = 474,
					CutSandstoneSlab = 475,
					PetrifiedOakSlab = 476,
					CobblestoneSlab = 477,
					BrickSlab = 478,
					StoneBrickSlab = 479,
					NetherBrickSlab = 480,
					QuartzSlab = 481,
					RedSandstoneSlab = 482,
					CutRedSandstoneSlab = 483,
					PurpurSlab = 484,
					SmoothStone = 485,
					SmoothSandstone = 486,
					SmoothQuartz = 487,
					SmoothRedSandstone = 488,
					SpruceFenceGate = 489,
					BirchFenceGate = 490,
					JungleFenceGate = 491,
					AcaciaFenceGate = 492,
					DarkOakFenceGate = 493,
					SpruceFence = 494,
					BirchFence = 495,
					JungleFence = 496,
					AcaciaFence = 497,
					DarkOakFence = 498,
					SpruceDoor = 499,
					BirchDoor = 500,
					JungleDoor = 501,
					AcaciaDoor = 502,
					DarkOakDoor = 503,
					EndRod = 504,
					ChorusPlant = 505,
					ChorusFlower = 506,
					PurpurBlock = 507,
					PurpurPillar = 508,
					PurpurStairs = 509,
					EndStoneBricks = 510,
					Beetroots = 511,
					DirtPath = 512,
					EndGateway = 513,
					RepeatingCommandBlock = 514,
					ChainCommandBlock = 515,
					FrostedIce = 516,
					MagmaBlock = 517,
					NetherWartBlock = 518,
					RedNetherBricks = 519,
					BoneBlock = 520,
					StructureVoid = 521,
					Observer = 522,
					ShulkerBox = 523,
					WhiteShulkerBox = 524,
					OrangeShulkerBox = 525,
					MagentaShulkerBox = 526,
					LightBlueShulkerBox = 527,
					YellowShulkerBox = 528,
					LimeShulkerBox = 529,
					PinkShulkerBox = 530,
					GrayShulkerBox = 531,
					LightGrayShulkerBox = 532,
					CyanShulkerBox = 533,
					PurpleShulkerBox = 534,
					BlueShulkerBox = 535,
					BrownShulkerBox = 536,
					GreenShulkerBox = 537,
					RedShulkerBox = 538,
					BlackShulkerBox = 539,
					WhiteGlazedTerracotta = 540,
					OrangeGlazedTerracotta = 541,
					MagentaGlazedTerracotta = 542,
					LightBlueGlazedTerracotta = 543,
					YellowGlazedTerracotta = 544,
					LimeGlazedTerracotta = 545,
					PinkGlazedTerracotta = 546,
					GrayGlazedTerracotta = 547,
					LightGrayGlazedTerracotta = 548,
					CyanGlazedTerracotta = 549,
					PurpleGlazedTerracotta = 550,
					BlueGlazedTerracotta = 551,
					BrownGlazedTerracotta = 552,
					GreenGlazedTerracotta = 553,
					RedGlazedTerracotta = 554,
					BlackGlazedTerracotta = 555,
					WhiteConcrete = 556,
					OrangeConcrete = 557,
					MagentaConcrete = 558,
					LightBlueConcrete = 559,
					YellowConcrete = 560,
					LimeConcrete = 561,
					PinkConcrete = 562,
					GrayConcrete = 563,
					LightGrayConcrete = 564,
					CyanConcrete = 565,
					PurpleConcrete = 566,
					BlueConcrete = 567,
					BrownConcrete = 568,
					GreenConcrete = 569,
					RedConcrete = 570,
					BlackConcrete = 571,
					WhiteConcretePowder = 572,
					OrangeConcretePowder = 573,
					MagentaConcretePowder = 574,
					LightBlueConcretePowder = 575,
					YellowConcretePowder = 576,
					LimeConcretePowder = 577,
					PinkConcretePowder = 578,
					GrayConcretePowder = 579,
					LightGrayConcretePowder = 580,
					CyanConcretePowder = 581,
					PurpleConcretePowder = 582,
					BlueConcretePowder = 583,
					BrownConcretePowder = 584,
					GreenConcretePowder = 585,
					RedConcretePowder = 586,
					BlackConcretePowder = 587,
					Kelp = 588,
					KelpPlant = 589,
					DriedKelpBlock = 590,
					TurtleEgg = 591,
					DeadTubeCoralBlock = 592,
					DeadBrainCoralBlock = 593,
					DeadBubbleCoralBlock = 594,
					DeadFireCoralBlock = 595,
					DeadHornCoralBlock = 596,
					TubeCoralBlock = 597,
					BrainCoralBlock = 598,
					BubbleCoralBlock = 599,
					FireCoralBlock = 600,
					HornCoralBlock = 601,
					DeadTubeCoral = 602,
					DeadBrainCoral = 603,
					DeadBubbleCoral = 604,
					DeadFireCoral = 605,
					DeadHornCoral = 606,
					TubeCoral = 607,
					BrainCoral = 608,
					BubbleCoral = 609,
					FireCoral = 610,
					HornCoral = 611,
					DeadTubeCoralFan = 612,
					DeadBrainCoralFan = 613,
					DeadBubbleCoralFan = 614,
					DeadFireCoralFan = 615,
					DeadHornCoralFan = 616,
					TubeCoralFan = 617,
					BrainCoralFan = 618,
					BubbleCoralFan = 619,
					FireCoralFan = 620,
					HornCoralFan = 621,
					DeadTubeCoralWallFan = 622,
					DeadBrainCoralWallFan = 623,
					DeadBubbleCoralWallFan = 624,
					DeadFireCoralWallFan = 625,
					DeadHornCoralWallFan = 626,
					TubeCoralWallFan = 627,
					BrainCoralWallFan = 628,
					BubbleCoralWallFan = 629,
					FireCoralWallFan = 630,
					HornCoralWallFan = 631,
					SeaPickle = 632,
					BlueIce = 633,
					Conduit = 634,
					BambooSapling = 635,
					Bamboo = 636,
					PottedBamboo = 637,
					VoidAir = 638,
					CaveAir = 639,
					BubbleColumn = 640,
					PolishedGraniteStairs = 641,
					SmoothRedSandstoneStairs = 642,
					MossyStoneBrickStairs = 643,
					PolishedDioriteStairs = 644,
					MossyCobblestoneStairs = 645,
					EndStoneBrickStairs = 646,
					StoneStairs = 647,
					SmoothSandstoneStairs = 648,
					SmoothQuartzStairs = 649,
					GraniteStairs = 650,
					AndesiteStairs = 651,
					RedNetherBrickStairs = 652,
					PolishedAndesiteStairs = 653,
					DioriteStairs = 654,
					PolishedGraniteSlab = 655,
					SmoothRedSandstoneSlab = 656,
					MossyStoneBrickSlab = 657,
					PolishedDioriteSlab = 658,
					MossyCobblestoneSlab = 659,
					EndStoneBrickSlab = 660,
					SmoothSandstoneSlab = 661,
					SmoothQuartzSlab = 662,
					GraniteSlab = 663,
					AndesiteSlab = 664,
					RedNetherBrickSlab = 665,
					PolishedAndesiteSlab = 666,
					DioriteSlab = 667,
					BrickWall = 668,
					PrismarineWall = 669,
					RedSandstoneWall = 670,
					MossyStoneBrickWall = 671,
					GraniteWall = 672,
					StoneBrickWall = 673,
					NetherBrickWall = 674,
					AndesiteWall = 675,
					RedNetherBrickWall = 676,
					SandstoneWall = 677,
					EndStoneBrickWall = 678,
					DioriteWall = 679,
					Scaffolding = 680,
					Loom = 681,
					Barrel = 682,
					Smoker = 683,
					BlastFurnace = 684,
					CartographyTable = 685,
					FletchingTable = 686,
					Grindstone = 687,
					Lectern = 688,
					SmithingTable = 689,
					Stonecutter = 690,
					Bell = 691,
					Lantern = 692,
					SoulLantern = 693,
					Campfire = 694,
					SoulCampfire = 695,
					SweetBerryBush = 696,
					WarpedStem = 697,
					StrippedWarpedStem = 698,
					WarpedHyphae = 699,
					StrippedWarpedHyphae = 700,
					WarpedNylium = 701,
					WarpedFungus = 702,
					WarpedWartBlock = 703,
					WarpedRoots = 704,
					NetherSprouts = 705,
					CrimsonStem = 706,
					StrippedCrimsonStem = 707,
					CrimsonHyphae = 708,
					StrippedCrimsonHyphae = 709,
					CrimsonNylium = 710,
					CrimsonFungus = 711,
					Shroomlight = 712,
					WeepingVines = 713,
					WeepingVinesPlant = 714,
					TwistingVines = 715,
					TwistingVinesPlant = 716,
					CrimsonRoots = 717,
					CrimsonPlanks = 718,
					WarpedPlanks = 719,
					CrimsonSlab = 720,
					WarpedSlab = 721,
					CrimsonPressurePlate = 722,
					WarpedPressurePlate = 723,
					CrimsonFence = 724,
					WarpedFence = 725,
					CrimsonTrapdoor = 726,
					WarpedTrapdoor = 727,
					CrimsonFenceGate = 728,
					WarpedFenceGate = 729,
					CrimsonStairs = 730,
					WarpedStairs = 731,
					CrimsonButton = 732,
					WarpedButton = 733,
					CrimsonDoor = 734,
					WarpedDoor = 735,
					CrimsonSign = 736,
					WarpedSign = 737,
					CrimsonWallSign = 738,
					WarpedWallSign = 739,
					StructureBlock = 740,
					Jigsaw = 741,
					Composter = 742,
					Target = 743,
					BeeNest = 744,
					Beehive = 745,
					HoneyBlock = 746,
					HoneycombBlock = 747,
					NetheriteBlock = 748,
					AncientDebris = 749,
					CryingObsidian = 750,
					RespawnAnchor = 751,
					PottedCrimsonFungus = 752,
					PottedWarpedFungus = 753,
					PottedCrimsonRoots = 754,
					PottedWarpedRoots = 755,
					Lodestone = 756,
					Blackstone = 757,
					BlackstoneStairs = 758,
					BlackstoneWall = 759,
					BlackstoneSlab = 760,
					PolishedBlackstone = 761,
					PolishedBlackstoneBricks = 762,
					CrackedPolishedBlackstoneBricks = 763,
					ChiseledPolishedBlackstone = 764,
					PolishedBlackstoneBrickSlab = 765,
					PolishedBlackstoneBrickStairs = 766,
					PolishedBlackstoneBrickWall = 767,
					GildedBlackstone = 768,
					PolishedBlackstoneStairs = 769,
					PolishedBlackstoneSlab = 770,
					PolishedBlackstonePressurePlate = 771,
					PolishedBlackstoneButton = 772,
					PolishedBlackstoneWall = 773,
					ChiseledNetherBricks = 774,
					CrackedNetherBricks = 775,
					QuartzBricks = 776,
					Candle = 777,
					WhiteCandle = 778,
					OrangeCandle = 779,
					MagentaCandle = 780,
					LightBlueCandle = 781,
					YellowCandle = 782,
					LimeCandle = 783,
					PinkCandle = 784,
					GrayCandle = 785,
					LightGrayCandle = 786,
					CyanCandle = 787,
					PurpleCandle = 788,
					BlueCandle = 789,
					BrownCandle = 790,
					GreenCandle = 791,
					RedCandle = 792,
					BlackCandle = 793,
					CandleCake = 794,
					WhiteCandleCake = 795,
					OrangeCandleCake = 796,
					MagentaCandleCake = 797,
					LightBlueCandleCake = 798,
					YellowCandleCake = 799,
					LimeCandleCake = 800,
					PinkCandleCake = 801,
					GrayCandleCake = 802,
					LightGrayCandleCake = 803,
					CyanCandleCake = 804,
					PurpleCandleCake = 805,
					BlueCandleCake = 806,
					BrownCandleCake = 807,
					GreenCandleCake = 808,
					RedCandleCake = 809,
					BlackCandleCake = 810,
					AmethystBlock = 811,
					BuddingAmethyst = 812,
					AmethystCluster = 813,
					LargeAmethystBud = 814,
					MediumAmethystBud = 815,
					SmallAmethystBud = 816,
					Tuff = 817,
					Calcite = 818,
					TintedGlass = 819,
					PowderSnow = 820,
					SculkSensor = 821,
					OxidizedCopper = 822,
					WeatheredCopper = 823,
					ExposedCopper = 824,
					CopperBlock = 825,
					CopperOre = 826,
					DeepslateCopperOre = 827,
					OxidizedCutCopper = 828,
					WeatheredCutCopper = 829,
					ExposedCutCopper = 830,
					CutCopper = 831,
					OxidizedCutCopperStairs = 832,
					WeatheredCutCopperStairs = 833,
					ExposedCutCopperStairs = 834,
					CutCopperStairs = 835,
					OxidizedCutCopperSlab = 836,
					WeatheredCutCopperSlab = 837,
					ExposedCutCopperSlab = 838,
					CutCopperSlab = 839,
					WaxedCopperBlock = 840,
					WaxedWeatheredCopper = 841,
					WaxedExposedCopper = 842,
					WaxedOxidizedCopper = 843,
					WaxedOxidizedCutCopper = 844,
					WaxedWeatheredCutCopper = 845,
					WaxedExposedCutCopper = 846,
					WaxedCutCopper = 847,
					WaxedOxidizedCutCopperStairs = 848,
					WaxedWeatheredCutCopperStairs = 849,
					WaxedExposedCutCopperStairs = 850,
					WaxedCutCopperStairs = 851,
					WaxedOxidizedCutCopperSlab = 852,
					WaxedWeatheredCutCopperSlab = 853,
					WaxedExposedCutCopperSlab = 854,
					WaxedCutCopperSlab = 855,
					LightningRod = 856,
					PointedDripstone = 857,
					DripstoneBlock = 858,
					CaveVines = 859,
					CaveVinesPlant = 860,
					SporeBlossom = 861,
					Azalea = 862,
					FloweringAzalea = 863,
					MossCarpet = 864,
					MossBlock = 865,
					BigDripleaf = 866,
					BigDripleafStem = 867,
					SmallDripleaf = 868,
					HangingRoots = 869,
					RootedDirt = 870,
					Deepslate = 871,
					CobbledDeepslate = 872,
					CobbledDeepslateStairs = 873,
					CobbledDeepslateSlab = 874,
					CobbledDeepslateWall = 875,
					PolishedDeepslate = 876,
					PolishedDeepslateStairs = 877,
					PolishedDeepslateSlab = 878,
					PolishedDeepslateWall = 879,
					DeepslateTiles = 880,
					DeepslateTileStairs = 881,
					DeepslateTileSlab = 882,
					DeepslateTileWall = 883,
					DeepslateBricks = 884,
					DeepslateBrickStairs = 885,
					DeepslateBrickSlab = 886,
					DeepslateBrickWall = 887,
					ChiseledDeepslate = 888,
					CrackedDeepslateBricks = 889,
					CrackedDeepslateTiles = 890,
					InfestedDeepslate = 891,
					SmoothBasalt = 892,
					RawIronBlock = 893,
					RawCopperBlock = 894,
					RawGoldBlock = 895,
					PottedAzaleaBush = 896,
					PottedFloweringAzaleaBush = 897,
			}
}

