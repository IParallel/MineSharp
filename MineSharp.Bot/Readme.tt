<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Reflection" #>
<#@ assembly name="System.Threading" #>
<#@ assembly name="$(SolutionDir)\MineSharp.Bot\bin\Debug\net6.0\MineSharp.Bot.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="MineSharp.Bot" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ output extension=".md" #>


# MineSharp.Bot
 Functions and logic to directly interact with a minecraft server

## API

 <#
 var functions = typeof(MinecraftBot).GetMethods().Where(x => x.GetCustomAttributes(true).Where(y => y is BotFunctionAttribute).ToArray().Length > 0).ToArray();
 Dictionary<string, List<string>> categories = new Dictionary<string, List<string>>();

  foreach (var func in functions) {
	
	var attr = (BotFunctionAttribute)func.GetCustomAttributes(true).First(y => y is BotFunctionAttribute);
	if (!categories.ContainsKey(attr.Category))
		categories.Add(attr.Category, new List<string>());

	categories[attr.Category].Add($"{GetSignature(func)}   \r\n{attr.Description} \r\n  ");
  }

  foreach (var cat in categories) {
	WriteLine($"### {cat.Key} ");
	 foreach (var m in cat.Value) { 
		WriteLine($"- {m}");
	 } 
  }
 #>

 
Docs will follow

 <#+ 
 
         public string GetSignature(MethodInfo method, bool callable = false)
        {
            var firstParam = true;
            var sigBuilder = new StringBuilder();
            if (callable == false)
            {
                if (method.IsPublic)
                    sigBuilder.Append("public ");
                else if (method.IsPrivate)
                    sigBuilder.Append("private ");
                else if (method.IsAssembly)
                    sigBuilder.Append("internal ");
                if (method.IsFamily)
                    sigBuilder.Append("protected ");
                if (method.IsStatic)
                    sigBuilder.Append("static ");
                sigBuilder.Append(TypeName(method.ReturnType));
                sigBuilder.Append(' ');
            }
            sigBuilder.Append(method.Name);

            // Add method generics
            if(method.IsGenericMethod)
            {
                sigBuilder.Append("<");
                foreach(var g in method.GetGenericArguments())
                {
                    if (firstParam)
                        firstParam = false;
                    else
                        sigBuilder.Append(", ");
                    sigBuilder.Append(TypeName(g));
                }
                sigBuilder.Append(">");
            }
            sigBuilder.Append("(");
            firstParam = true;
            var secondParam = false;
            foreach (var param in method.GetParameters())
            {
                if (firstParam)
                {
                    firstParam = false;
                    if (method.IsDefined(typeof(System.Runtime.CompilerServices.ExtensionAttribute), false))
                    {
                        if (callable)
                        {
                            secondParam = true;
                            continue;
                        }
                        sigBuilder.Append("this ");
                    }
                }
                else if (secondParam == true)
                    secondParam = false;
                else
                    sigBuilder.Append(", ");
                if (param.ParameterType.IsByRef)
                    sigBuilder.Append("ref ");
                else if (param.IsOut)
                    sigBuilder.Append("out ");
                if (!callable)
                {
                    sigBuilder.Append(TypeName(param.ParameterType));
                    sigBuilder.Append(' ');
                }
                sigBuilder.Append(param.Name);
            }
            sigBuilder.Append(")");
            return sigBuilder.ToString();
        }

        /// <summary>
        /// Get full type name with full namespace names
        /// </summary>
        /// <param name="type">Type. May be generic or nullable</param>
        /// <returns>Full type name, fully qualified namespaces</returns>
        public string TypeName(Type type)
        {
            var nullableType = Nullable.GetUnderlyingType(type);
            if (nullableType != null)
                return nullableType.Name + "?";

            if (type.IsAssignableTo(typeof(Task))) {
                if (type == typeof(Task)) return "Task";
                return $"Task<{TypeName(type.GetGenericArguments()[0]) }>";

            }

            if (!(type.IsGenericType && type.Name.Contains('`')))
                switch (type.Name)
                {
                    case "Single": return "float";
                    case "Double": return "double";
                    case "String": return "string";
                    case "Int32": return "int";
                    case "Decimal": return "decimal";
                    case "Object": return "object";
                    case "Void": return "void";
                    default:
                        {
                            return string.IsNullOrWhiteSpace(type.FullName) ? type.Name : type.FullName;
                        }
                }

            var sb = new StringBuilder(type.Name.Substring(0,
            type.Name.IndexOf('`'))
            );
            sb.Append('<');
            var first = true;
            foreach (var t in type.GetGenericArguments())
            {
                if (!first)
                    sb.Append(',');
                sb.Append(TypeName(t));
                first = false;
            }
            sb.Append('>');
            return sb.ToString();
        }

string GetMethodSignature(MethodInfo info) {
    string returnType = info.ReturnType.FullName!;
    if (info.ReturnType.IsAssignableTo(typeof(Task))) {
        if (info.ReturnType == typeof(Task)) returnType = "void";
        else returnType = info.ReturnType.GetGenericArguments()[0].FullName!;
    }

    return $"{returnType} {info.Name}({string.Join(", ", info.GetParameters().Select(x => $"{x.ParameterType.FullName} {x.Name}"))});";
}
 
 #>




